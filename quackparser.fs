//F# Parser generated by Rustlr for grammar quack
    
module Quack
open System;
open System.Collections.Generic;
open Fussless;
open Fussless.RuntimeParser;
//AST modifications
// 1. Sequences are now Applys
// 2. Code blocks are now a thing
// 3. BeginSeq's are ListLiterals and have different syntax
// 4. Vars are now  be LBox'ed
// 5. While/If Conditions are now LBox'ed
// 6. Added LLpointer
// 7. Added Class Declaration
// 8. Added Import Declaration
type expr =
  |Integer of int
  | Floatpt of float
  | Strlit of string
  | Var of LBox<string>
  | Nil
  | Binop of string*expr*expr
  | Uniop of string*expr
  | Ifelse of LBox<expr>*expr*expr
  | Whileloop of LBox<expr>*expr
  | Define of LBox<string>*expr
  | TypedDefine of LBox<lltype*string>*expr
  | Lambda of (string list)*expr
  | TypedLambda of ((lltype*string) list)*lltype*LBox<expr>
  | Let of LBox<string>*expr*LBox<expr>
  | TypedLet of LBox<lltype*string>*expr*LBox<expr>
  | Quote of expr
  | Class of LBox<string>*expr
  | Import of LBox<string>
  | Setq of LBox<string>*expr
  | Apply of LBox<string> * LBox<expr> list
  | ListLiteral of LBox<expr> list
  | CodeBlock of LBox<expr> list
  // type expressions
  | TypeExpr of lltype
  | TypedVal of (lltype*expr) 
  | Label of string   // not a proper expression - just a temporary
  | Error
 and lltype =  // abstract syntax for type expressions
  | LLint | LLfloat | LLstring
  | LList of lltype | LLtuple of lltype list
  | LLfun of (lltype list)*lltype
  | LLpointer of lltype
  | LLunknown | LLuntypable | LLvar of string | LLunit
//lexattribute line_comment #
//-------------------------------------------------------
//LEX TERMINALS
//-------------------------------------------------------
//Math Operators
//Comparison Operators
//Logic Operators
//Misc Operators
//Primitive Types
//Syntax Components
//Grouping Symbols
//Declaration Symbols
//Loops and Decision Statements
//Value Literals
//Imports
//lexterminal YOINK yoink
//-------------------------------------------------------
//VALUE TERMINALS
//-------------------------------------------------------
//-------------------------------------------------------
//PRODUCTION DECLARATIONS
//-------------------------------------------------------
//Expressions
// Sequences
//Operators
//Statement Types
//Types
//-------------------------------------------------------
//GRAMMAR PRODUCTION RULES
//-------------------------------------------------------
//UNIT_EXPR --> LBRACKET EXPR_SEQ:x RBRACKET {}
//UNIT_EXPR --> TRUE { True }
//UNIT_EXPR --> FALSE { False }
//Binop("and" ,x,y) }
//Binop("or",x,y)
//EXPR_SEQ --> EXPR:[e] ;  EXPR_SEQ:seq  { e:: seq }
//EXPR_SEQ --> EXPR:[e] ;  { [e] } 
//EXPR_STATEMENT --> EXPR_SEQ:e { CodeBlock(e) } 

let private SYMBOLS = [|"_WILDCARD_TOKEN_";";";"'";"PLUS";"MINUS";"TIMES";"DIVIDE";"MODULO";"EXPONENT";"EQUALS";"PLUSPLUS";"MINUSMINUS";"LT";"GT";"LTE";"GTE";"EQ";"NOTEQ";"OR";"AND";"NOT";"CONS";"CAR";"CDR";"TILDA";"LAMBDA";"BOOLEAN";"INT";"STRING";"FLOAT";"DOT";"COMMA";"COLON";"LBRACKET";"RBRACKET";"LCURLY";"RCURLY";"LPAREN";"RPAREN";"LET";"DEFINE";"IN";"CLASS";"IF";"ELSE";"FOR";"WHILE";"TRUE";"FALSE";"NIL";"IMPORT";"VAR";"INTEGER_LITERAL";"FLOAT_LITERAL";"STRING_LITERAL";"UNIT_EXPR";"LAMBDA_EXPR";"UNARY_OPERATOR_EXPR";"EXPONENT_OPER";"BINOP_MULTIPLICATION_EXPR";"BINOP_ADDITION_EXPR";"AND_EXPR";"OR_EXPR";"BINOP_EQUALITY_EXPR";"DEFINE_EXPR";"LET_EXPR";"EXPR";"EXPR_SEQ";"LIST_SEQ";"VAR_SEQ";"STATEMENT_SEQ";"LIST_EXPR";"CODE_BLOCK";"LAMBDA_BLOCK";"UNIOP";"BINOP_MULT_OPER";"BINOP_PLUS_OPER";"BINOP_EQUAL_OPER";"PROGRAM";"STATEMENT";"EXPR_STATEMENT";"LOOP_STATEMENT";"SELECT_STATEMENT";"CLASS_DECLARATION";"UNIT_TYPE";"UNTYPED_PREFIX";"TYPE_PREFIX";"START";"EOF"|];

let private TABLE:uint64 [] = [|231929217024UL;210453921792UL;270584774657UL;274880397313UL;240518365185UL;219043790848UL;317830266881UL;249109413889UL;171801313280UL;107374247936UL;266289020929UL;335008956417UL;184685887488UL;347894382593UL;227634511872UL;304945233921UL;180390789120UL;124554182656UL;253403398145UL;279175233537UL;98785624064UL;300648824833UL;236225101825UL;120260263936UL;360778694657UL;197570134016UL;103079804928UL;283469414401UL;244814839809UL;257698758657UL;94489542656UL;85901312000UL;223340527616UL;339303333889UL;352188104705UL;158916214784UL;141735690240UL;167504379904UL;261993857025UL;214750461952UL;115964510208UL;281694022860800UL;281840051879937UL;281844346650625UL;281771332337665UL;563057327734786UL;563078802571266UL;563083097538562UL;562988608258050UL;844515127918594UL;844506537984002UL;844489358114818UL;844476473212930UL;844480768180226UL;844446408441858UL;844437818507266UL;844497948049410UL;844454998376450UL;844459293343746UL;844588142362626UL;844493653082114UL;844463588311042UL;844485063147522UL;844601027264514UL;844502243016706UL;844442113474562UL;844570962493442UL;844450703409154UL;844429228572674UL;844558077591554UL;1125985807368194UL;1126127541288962UL;1126024462073858UL;1126131836256258UL;1126118951354370UL;1126110361419778UL;1126114656387074UL;1126058821812226UL;1126041641943042UL;1126020167106562UL;1125994397302786UL;1125998692270082UL;1126123246321666UL;1126015872139266UL;1126002987237378UL;1126007282204674UL;1407538094080002UL;1407409245061122UL;1407426424930306UL;1407456489701378UL;1407550978981890UL;1407379180290050UL;1407396361404416UL;1407443604799490UL;1407465079635970UL;1407439309832194UL;1407430719897602UL;1407435014864898UL;1407387770224642UL;1407520914210818UL;1407452194734082UL;1407447899766786UL;1407697009311745UL;1407392065191938UL;1407404951404544UL;1407413540028418UL;1407508029308930UL;1407400656502784UL;1688957234446338UL;1688978709282818UL;1688983004250114UL;1688888514969602UL;1970350607237122UL;1970470866321410UL;1970329132400642UL;1970359197171714UL;1970346312269826UL;1970337722335234UL;1970354902204418UL;1970406441811970UL;1970415031746562UL;1970457981419522UL;1970393556910082UL;1970488046190594UL;1970402146844674UL;1970483754041344UL;1970384966975490UL;1970376377040898UL;1970389261942786UL;1970363492139010UL;1970342017302530UL;1970500931092482UL;1970397851877378UL;1970380672008194UL;2251881418915842UL;2251872828981250UL;2251877123948546UL;2251821289373698UL;2251963023294466UL;2251829879308290UL;2251945843425282UL;2251868534013954UL;2251851354144770UL;2251838469242882UL;2251975908196354UL;2251859944079362UL;2251812699439106UL;2251855649112066UL;2251834174275586UL;2251804109504514UL;2251890008850434UL;2251816994406402UL;2251864239046658UL;2251932958523394UL;2251825584340994UL;2533493834842114UL;2533498129809410UL;2533369280790530UL;2533502424776706UL;2533416525430786UL;2533433705299970UL;2533373575757826UL;2533360690855938UL;2533390755627010UL;2533377870725122UL;2533506719744002UL;2533399345561602UL;2533489539874818UL;2533395050594306UL;2533382165692418UL;2533485244907522UL;2815114842275841UL;2815119137636353UL;2814968813256704UL;3096357889835010UL;3096250515652610UL;3096241927094272UL;3096284877094912UL;3096555459903489UL;3096306350227458UL;3096297762324480UL;3096302055260162UL;3096551165001729UL;3096387954606082UL;3096263402389504UL;3096229040816130UL;3096254810619906UL;3096280582324224UL;3096237632716800UL;3096370774736898UL;3096276287225856UL;3096259105587202UL;3096289171800064UL;3096246220685314UL;3096314941669376UL;3096293467422720UL;3096400839507970UL;3377897293479938UL;3377807099166722UL;3377931653218306UL;3377871523676162UL;3377802804199426UL;3377918768316418UL;3377785624330242UL;3377923063283714UL;3378077682106370UL;3377927358251010UL;3377841458905090UL;3377824279035906UL;3377794214264834UL;3377910178381826UL;3377798509232130UL;3377862933741570UL;3377867228708866UL;3377815689101314UL;3377819984068610UL;3377884408578050UL;3377858638774274UL;3377914473349122UL;3377854343806978UL;3659320728944642UL;3659243419533314UL;3659187584958466UL;3659337908813826UL;3659204764827650UL;3659350793715714UL;3659247714500610UL;3659200469860354UL;3659256305811456UL;3659234829598722UL;3659213354762242UL;3659307844042754UL;3659252009467906UL;3659191879925762UL;3659264894369794UL;3659209059794946UL;3659239124566018UL;3659226239664130UL;3659196174893058UL;3659178995023874UL;3659230534631426UL;3940881603166208UL;3940765638459392UL;3940757048197120UL;3940744163491840UL;3940804297359362UL;3940817178329088UL;3941001862053889UL;3940954619183105UL;3940924554346497UL;3940834359836672UL;3940808590163968UL;3940885899051009UL;3940868717740032UL;3940791409639424UL;3940997568331777UL;3940903077347329UL;3940920258723841UL;3940890192314369UL;3940894488788993UL;3941010452643841UL;3940933143363585UL;3940774228131840UL;3940873014476800UL;3940864424411136UL;3940898783363073UL;3940950325919745UL;3940907372707841UL;3940967504216065UL;3940877308461056UL;3940735575261184UL;3940911667806209UL;3940860127870976UL;3940748459573248UL;3940928849182721UL;3940988977283073UL;3940769934213120UL;3940752753754112UL;3940821475262464UL;3940847244083200UL;3941027635658754UL;3940915962970113UL;4222176190922754UL;4222128946282498UL;4222189075824642UL;4222206255693826UL;4222141831184386UL;4222150421118978UL;4222146126151682UL;4222197665759234UL;4222154716086274UL;4222159011053570UL;4222300744974338UL;4222193370791938UL;4222137536217090UL;4222270680203266UL;4222287860072450UL;4222201960726530UL;4222257795301378UL;4222214845628418UL;4222163306020866UL;4222184780857346UL;4222180485890050UL;4503625400320002UL;4503689824829442UL;4503633990254594UL;4503672644960258UL;4503616810385410UL;4503676941107200UL;4503775724175362UL;4503655465091074UL;4503668349992962UL;4503745659404290UL;4503603925483522UL;4503612515418114UL;4503681234894850UL;4503629695287298UL;4503638285221890UL;4503732774502402UL;4503762839273474UL;4503659760058370UL;4503621105352706UL;4503651170123778UL;4503664055025666UL;4785452565921794UL;4785229227622402UL;5066656955039746UL;5066678429876226UL;5066588235563010UL;5066682724843522UL;5348037443190786UL;5348041738158082UL;5348028853256194UL;5348097572732930UL;5348093277765634UL;5348046033125378UL;5348200651948034UL;5348088982798338UL;5348050328092674UL;5348106162667522UL;5348063212994562UL;5348058918027266UL;5348080392863746UL;5348054623059970UL;5348170587176962UL;5348187767046146UL;5348157702275074UL;5348101867700226UL;5348076097896450UL;5348114752602114UL;5348084687831042UL;5629576845066242UL;5629563960164354UL;5629538190360578UL;5629512420556802UL;5629675629314050UL;5629645564542978UL;5629533898342400UL;5629559665197058UL;5629568255131650UL;5629521010491394UL;5629572550098946UL;5629555370229762UL;5629516715524098UL;5629662744412162UL;5629529600425986UL;5629581140033538UL;5629525305458690UL;5629589729968130UL;5629551075262466UL;5629503830622210UL;5629632679641090UL;5911189260533762UL;5911094771253250UL;5911069001449474UL;5911193555501058UL;5911073296416770UL;5911197850468354UL;5911184965566466UL;5911090476285954UL;5911206440402946UL;5911202145435650UL;5911077591384066UL;5911099066220546UL;5911133425958914UL;5911081886351362UL;5911116246089730UL;5911060411514882UL;6192556866273280UL;6474302421467139UL;6755403740545024UL;7037033336143872UL;7318512604545026UL;7318525489446914UL;7318375165591554UL;7318409525329922UL;7318362280689666UL;7318439590100994UL;7318413820297218UL;7318482539773954UL;7318495424675842UL;7318426705199106UL;7318370870624258UL;7318422410231810UL;7318379460558850UL;7318431000166402UL;7318400935395330UL;7318383755526146UL;7318366575656962UL;7318405230362626UL;7318388050493442UL;7318353690755074UL;7318418115264514UL;7600185149882369UL;7600116433682433UL;7599910272499712UL;7599918860730368UL;7599927450992640UL;7600052005699584UL;7600043414978560UL;7599991875567616UL;7600142201454593UL;7600107843682305UL;7600103546421249UL;7600056300404736UL;7600129316421633UL;7600039121649664UL;7600077774585857UL;7600090660208641UL;7600064889552897UL;7600086365044737UL;7600069186027521UL;7600099251585025UL;7600034825109504UL;7599940335697920UL;7600073480601601UL;7600047711715328UL;7599983287402496UL;7599948925370368UL;7599931745435648UL;7600082069946369UL;7600094955962369UL;7599923156811776UL;7599944631451648UL;7600060596289537UL;7599966106877952UL;7599996172500992UL;7599970403155970UL;7881333710323714UL;7881376659996674UL;7881325120389122UL;7881462559342594UL;7881350890192898UL;7881445379473410UL;7881320825421826UL;7881380954963970UL;7881475444244482UL;7881389544898562UL;7881303645552642UL;7881432494571522UL;7881329415356418UL;7881368070062082UL;7881359480127490UL;7881312235487234UL;7881372365029378UL;7881355185160194UL;7881316530454530UL;7881363775094786UL;7881338005291010UL;8162864519839746UL;8162843045003266UL;8162847339970562UL;8162851634937858UL;8162834455068674UL;8162800095330306UL;8162787210428418UL;8162791505395714UL;8162825865134082UL;8162920354414594UL;8162804390297602UL;8162795800363010UL;8162808685264898UL;8162855929905154UL;8162937534283778UL;8162778620493826UL;8162812980232194UL;8162838750035970UL;8162950419185666UL;8162907469512706UL;8162830160101378UL;8444343791648770UL;8444356676550658UL;8444352381583362UL;8444391036289026UL;8444348086616066UL;8444369561452546UL;8444472640667650UL;8444481230602242UL;8444335201714178UL;8444459755765762UL;8444468345700354UL;8444373856419842UL;8444365266485250UL;8444464050733058UL;8444408216158210UL;8444476935634946UL;8725934735818754UL;8725831656603650UL;8725866016342018UL;8725908966014978UL;8725810181767170UL;8725939030786050UL;8725943325753346UL;8725947620720642UL;8725896081113090UL;8725840246538242UL;8725891786145794UL;8725887491178498UL;8725921850916866UL;8725956210655234UL;8726102239543298UL;8725951915687938UL;8725818771701762UL;8725883196211202UL;8725823066669058UL;8725827361636354UL;8725878901243906UL;8725848836472834UL;8725844541505538UL;9007431187759104UL;9288893279633408UL;9570166388752386UL;9570209338425346UL;9570217928359938UL;9570153503850498UL;9570312417640450UL;9570170683719682UL;9570282352869378UL;9570187863588866UL;9570183568621570UL;9570179273654274UL;9570162093785090UL;9570325302542338UL;9570295237771266UL;9570213633392642UL;9570226518294530UL;9570205043458050UL;9570230813261826UL;9570200748490754UL;9570174978686978UL;9570239403196418UL;9570222223327234UL;9851783103578112UL;10133245194076162UL;10133172179632130UL;10133232309174274UL;10133275258847234UL;10133137819893762UL;10133180769566722UL;10133133524926466UL;10133176474599426UL;10133154999762946UL;10133159294730242UL;10133112050089986UL;10133262373945346UL;10133163589697538UL;10133116345057282UL;10133103460155394UL;10133167884664834UL;10133120640024578UL;10133189359501314UL;10133129229959170UL;10133124934991874UL;10133150704795650UL;10414934916988929UL;10414788888756224UL;10414922032676865UL;10414844723068929UL;10414806067511296UL;10414660039606272UL;10414741642674176UL;10414672923918336UL;10414879083528193UL;10414823247708161UL;10414849018691585UL;10414814656659457UL;10414677218099200UL;10414745939607552UL;10414840427315201UL;10414827541692417UL;10414891968561153UL;10414758824181760UL;10414818953134081UL;10414771708428288UL;10414836132151297UL;10414793182085120UL;10414797478821888UL;10414733054509056UL;10414690102804480UL;10414715873984512UL;10414857607708673UL;10414831837052929UL;10414913445691393UL;10414801772806144UL;10414784592216064UL;10414926326398977UL;10414698692476928UL;10414853313527809UL;10414668627836928UL;10414810363396097UL;10414681512542208UL;10414694398558208UL;10696087773446146UL;10696225212399618UL;10696212327497730UL;10696126428151810UL;10696053413707778UL;10696109248282626UL;10696122133184514UL;10696079183511554UL;10696182262726658UL;10696083478478850UL;10696113543249922UL;10696066298609666UL;10696104953315330UL;10696139313053698UL;10696117838217218UL;10696062003642370UL;10696074888544258UL;10696070593576962UL;10696100658348034UL;10696195147628546UL;10696130723119106UL;10977541274861570UL;10977558454730754UL;10977549864796162UL;10977579929567234UL;10977657238978562UL;10977601404403714UL;10977554159763458UL;10977545569828866UL;10977700188651522UL;10977588519501826UL;10977592814469122UL;10977670123880450UL;10977605699371010UL;10977597109436418UL;10977575634599938UL;10977687303749634UL;10977536979894274UL;10977584224534530UL;10977528389959682UL;10977562749698050UL;10977614289305602UL;11259368440659969UL;11259218114576384UL;11259364143595521UL;11540740334157825UL;11540697385664512UL;11540572830760960UL;11540632961351680UL;11540736038993921UL;11540714568417281UL;11540559946448896UL;11540723154550785UL;11540705974353920UL;11540718859976705UL;11540701679648768UL;11540594305400832UL;11540688795598848UL;11540791875403777UL;11540684499058688UL;11540615780827136UL;11540577124941824UL;11540568534679552UL;11540731743895553UL;11540590009647104UL;11540778990370817UL;11540693088927744UL;11540581419384832UL;11540727448535041UL;11540598599319552UL;11540744629911553UL;11540710270238721UL;11540834823831553UL;11822077874733058UL;11822082171011072UL;12103552847773698UL;12103561442754560UL;12103462653460482UL;12103557142740994UL;12385027829596160UL;12666502801260546UL;12666507096227842UL;12666412606947330UL;12948059383660546UL;12947947714510850UL;12948076563529730UL;12947934829608962UL;12948067973595138UL;12948063678627842UL;12948072268562434UL;12947943419543554UL;12948080858497026UL;12947952009478146UL;12948007844052994UL;13229409806450690UL;13229538655469570UL;13229534360502274UL;13229426986319874UL;13229551540371458UL;13229555835338754UL;13229422691352578UL;13229482820894722UL;13229542950436866UL;13229418396385282UL;13229547245404162UL;13510957797539842UL;13510897667997698UL;13510893373030402UL;13511030811983874UL;13511026517016578UL;13511022222049282UL;13510884783095810UL;13511009337147394UL;13510901962964994UL;13511013632114690UL;13511017927081986UL;13792501493334016UL;13792492902612992UL;13792376938627072UL;13792432775036928UL;13792372644446208UL;13792591689089025UL;13792497199349760UL;13792510083923969UL;13792488609284096UL;13792368348364800UL;13792505788039168UL;13792522972299265UL;13792484312743936UL;13792359760134144UL;13792518673661953UL;14073959289454592UL;14073997944946689UL;14074010829389825UL;14073912047370242UL;14073916339912704UL;14073972176060416UL;14073890571223040UL;14074015124553729UL;14073993650372609UL;14074019420307457UL;14073869095796736UL;14073834736844800UL;14074066665799681UL;14073985060634625UL;14074109614227457UL;14073847621156864UL;14073963585994752UL;14073864800043008UL;14074002238930945UL;14073907751747584UL;14073989353897985UL;14074006534291457UL;14074028010766337UL;14073843325075456UL;14073976470044672UL;14074040898748417UL;14073851915337728UL;14074032308027393UL;14073873389715456UL;14074053780766721UL;14074023715930113UL;14073920636846080UL;14073980764749824UL;14073967879323648UL;14073856209780736UL;14355262472454144UL;14636909244317698UL;14636913539284994UL;14636926424186882UL;14636857704710146UL;14636801870135298UL;14636930719154178UL;14636922129219586UL;14636917834252290UL;14636784690266114UL;14636797575168002UL;14636793280200706UL;14918384221487106UL;14918401401356290UL;14918332681879554UL;14918259667435522UL;14918397106388994UL;14918276847304706UL;14918392811421698UL;14918388516454402UL;14918268257370114UL;14918272552337410UL;14918405696323586UL;15199751824211970UL;15199859198394370UL;15199807658786818UL;15199880673230850UL;15199743234277378UL;15199867788328962UL;15199747529244674UL;15199863493361666UL;15199876378263554UL;15199872083296258UL;15199734644342786UL;15481226798891008UL;15481381417844737UL;15481347059613696UL;15481372828499969UL;15481359944187905UL;15481334173007872UL;15481355648303104UL;15481351353597952UL;15481368533925889UL;15481222504710144UL;15481209620398080UL;15481394307596289UL;15481377122484225UL;15481441549352961UL;15481218208628736UL;15481342762876928UL;15481282635300864UL;15481338469548032UL;15762684597108736UL;15762847805210625UL;15762813446258688UL;15762822036324352UL;15762701775601664UL;15762826330308608UL;15762693185339392UL;15762817739587584UL;15762697481420800UL;15762809149718528UL;15762852104503297UL;15762834920898561UL;15762830625013760UL;15762757612011520UL;15762916526063617UL;15762843510636545UL;16044176754081794UL;16044301308133378UL;16044159574212610UL;16044284128264194UL;16044232588656642UL;16044297013166082UL;16044288423231490UL;16044168164147202UL;16044305603100674UL;16044172459114498UL;16044292718198786UL;16325707565498370UL;16325651730923522UL;16325759105105922UL;16325634551054338UL;16325767695040514UL;16325780579942402UL;16325763400073218UL;16325647435956226UL;16325643140988930UL;16325776284975106UL;16325771990007810UL;16607234081488898UL;16607251261358082UL;16607242671423490UL;16607238376456194UL;16607126707306498UL;16607122412339202UL;16607109527437314UL;16607182541881346UL;16607118117371906UL;16607255556325378UL;16607246966390786UL;16888717648527362UL;16888721943494658UL;16888726238461954UL;16888730533429250UL;16888713353560066UL;16888601684410370UL;16888709058592770UL;16888593094475778UL;16888597389443074UL;16888584504541186UL;16888657518985218UL;17170132495040514UL;17170201214517250UL;17170196919549954UL;17170059480596482UL;17170188329615362UL;17170184034648066UL;17170068070531074UL;17170192624582658UL;17170205509484546UL;17170076660465666UL;17170072365498370UL;17451551637504002UL;17451680486522882UL;17451607472078850UL;17451547342536706UL;17451659011686402UL;17451667601620994UL;17451543047569410UL;17451676191555586UL;17451663306653698UL;17451534457634818UL;17451671896588290UL;17733133988462594UL;17733138283429890UL;17733082448855042UL;17733146873364482UL;17733018024345602UL;17733026614280194UL;17733155463299074UL;17733022319312898UL;17733009434411010UL;17733151168331778UL;17733142578397186UL;18014630438699008UL;18014613259943936UL;18014497295106048UL;18014501589286912UL;18014617553272832UL;18014621850009600UL;18014634734583809UL;18014716339748865UL;18014484410793984UL;18014557425696768UL;18014651912880129UL;18014643324321793UL;18014647618895873UL;18014492999024640UL;18014656208240641UL;18014669098123265UL;18014626143993856UL;18014608963403776UL;18296028109537282UL;18296251447836674UL;18577606161661953UL;18577580392120320UL;18577597572317185UL;18577610461675521UL;18577576097415168UL;18577571803430912UL;18577434364215296UL;18577593277743105UL;18577558916825088UL;18577451542708224UL;18577601866301441UL;18577584688005121UL;18577447248527360UL;18577563213365248UL;18577619047677953UL;18577507379118080UL;18577442952445952UL;18577666293170177UL;18577567506694144UL;18858926519418880UL;18859055368830976UL;18858917929156608UL;18858982355828736UL;18859051074125824UL;18859059664715777UL;18858922225238016UL;18859046780141568UL;18859038190075904UL;18859068258582529UL;18858909340925952UL;18859141269880833UL;18859042483404800UL;18859033893535744UL;19140663491493889UL;19140594774966273UL;19140667786264577UL;19140517462474752UL;19421876476575746UL;19421889361477634UL;19421940901085186UL;19421970965856258UL;19421872181608450UL;19421932311150594UL;19421897951412226UL;19421945196052482UL;19421893656444930UL;19421915131281410UL;19421958080954370UL;19422151354482690UL;19421936606117890UL;19421996735660034UL;19422001030627330UL;19421928016183298UL;19421859296706562UL;19421988145725442UL;19421880771543042UL;19422005325594626UL;19421867886641154UL;19421992440692738UL;19421983850758146UL;19703467413536768UL;19703497479159809UL;19703334271057920UL;19703390105436160UL;19703566200012801UL;19703523250143233UL;19703527544979457UL;19703471710273536UL;19703463120207872UL;19703351449550848UL;19703347155369984UL;19703355743993856UL;19703609148440577UL;19703368630009856UL;19703488888111105UL;19703364334256128UL;19703415874125824UL;19703531843551233UL;19703480298962944UL;19703506068504577UL;19703518954520577UL;19703514658766849UL;19703493184585729UL;19703458823667712UL;19703342859288576UL;19703510363602945UL;19703553314979841UL;19703484594847745UL;19703420171059200UL;19703476004257792UL;19703501773144065UL;19703407285960704UL;19703372923928576UL;19984869378359298UL;19984886558228482UL;19984856496472064UL;20266344358150144UL;20547711955173378UL;20547849394126850UL;20547836509224962UL;20547694775304194UL;20547750609879042UL;20547733430009858UL;20547806444453890UL;20547677595435010UL;20547763494780930UL;20547746314911746UL;20547737724977154UL;20547729135042562UL;20547703365238786UL;20547754904846338UL;20547690480336898UL;20547699070271490UL;20547742019944450UL;20547724840075266UL;20547819329355778UL;20547707660206082UL;20547686185369602UL;20829298606604288UL;21110893838073857UL;21110876656697345UL;21110928198533121UL;21110838003761152UL;21110782169513984UL;21110842297090048UL;21110747807481856UL;21110739217809408UL;21110790757679104UL;21110850887811072UL;21110722038923264UL;21110730627547136UL;21110906727366657UL;21110859478401025UL;21110833707220992UL;21110872362713089UL;21110743513563136UL;21110726333104128UL;21110898133696513UL;21110795054612480UL;21110868068139009UL;21110889542320129UL;21110863771664385UL;21110880952057857UL;21110846593826816UL;21110855182516224UL;21110764988989440UL;21110984031993857UL;21110709154611200UL;21110885247156225UL;21110717742841856UL;21110902428532737UL;21110941083566081UL;21392261445058560UL;21673611867783168UL;21955194213302274UL;21955065364283394UL;21955086839119874UL;21955108313956354UL;21955061069316098UL;21955112608923650UL;21955052479381506UL;21955116903890946UL;21955181328400386UL;21955082544152578UL;21955138378727426UL;21955129788792834UL;21955211393171458UL;21955125493825538UL;21955078249185282UL;21955104018989058UL;21955121198858242UL;21955073954217986UL;21955069659250690UL;21955224278073346UL;21955099724021762UL;22236892530081793UL;22236888235311105UL;22236819519307777UL;22236742206291968UL;22518358920593409UL;22518114101362688UL;22518122691035136UL;22518118397116416UL;22799739402584065UL;22799722222977025UL;22799747993960449UL;22799571899187200UL;22799752288796673UL;22799778058797057UL;22799687864025088UL;22799713631928321UL;22799717928402945UL;22799567603105792UL;22799790943830017UL;22799786652729345UL;22799589078073344UL;22799580487811072UL;22799644914876416UL;22799700748075008UL;22799597667745792UL;22799683567484928UL;22799709338664961UL;22799756588023809UL;22799593373827072UL;22799559014875136UL;22799576193368064UL;22799743698337793UL;22799730812321793UL;22799696454090752UL;22799623444103168UL;22799692157353984UL;22799632029777920UL;22799614849253376UL;22799640617943040UL;22799726516961281UL;22799833892257793UL;22799735107420161UL;22799705042780160UL;23081021106225154UL;23080960976683010UL;23080973861584898UL;23080969566617602UL;23081124185440258UL;23081094120669186UL;23081008221323266UL;23080978156552194UL;23080965271650306UL;23080982454403072UL;23080952386748418UL;23081029696159746UL;23081038286094338UL;23081111300538370UL;23081012516290562UL;23081081235767298UL;23081016811257858UL;23081025401192450UL;23081003926355970UL;23080999631388674UL;23080986746486786UL;23362586282491904UL;23644056959909888UL;23644001123500032UL;23644142858534913UL;23644202988929025UL;23644018303959040UL;23644129972912128UL;23644258822389761UL;23644134268796929UL;23643983945007104UL;23644138568679425UL;23644155742453761UL;23644014008205312UL;23644117087485952UL;23643996829319168UL;23644168628469761UL;23644112794157056UL;23644039779385344UL;23644215873961985UL;23644164332716033UL;23643992533237760UL;23644005417943040UL;23644121384222720UL;23644125678206976UL;23644147153108993UL;23644151447093249UL;23644022597877760UL;23644160037552129UL;23644108497616896UL;23925441741979650UL;23925506166489090UL;23925519051390978UL;23925385907404802UL;23925450331914242UL;23925394497339394UL;23925463216816130UL;23925398792306690UL;23925433152045058UL;23925428857077762UL;23925377317470210UL;23925446036946946UL;23925424562110466UL;23925403087273986UL;23925390202372098UL;23925437447012354UL;23925549116162050UL;23925536231260162UL;23925411677208578UL;23925407382241282UL;23925454626881538UL;24206921013395458UL;24207011207708674UL;24206860883853314UL;24206981142937602UL;24206916718428162UL;24206865178820610UL;24206882358689794UL;24206903833526274UL;24206994027839490UL;24206852293918722UL;24206886653657090UL;24206929603330050UL;24206878064967680UL;24206938193264642UL;24207170122874881UL;24206908128493570UL;24206899538558978UL;24206869474967552UL;24207024092610562UL;24206873770065920UL;24206925308362754UL;24206912423460866UL;24488357336317954UL;24488374516187138UL;24488499070238722UL;24488361631285250UL;24488395991023618UL;24488378811154434UL;24488391696056322UL;24488353041350658UL;24488400285990914UL;24488486185336834UL;24488387401089026UL;24488344451416066UL;24488413170892802UL;24488327271546882UL;24488340156448770UL;24488469005467650UL;24488456120565762UL;24488404580958210UL;24488348746383362UL;24488335861481474UL;24488383106121730UL;24769849493028866UL;24769823723225090UL;24769870967865346UL;24769879559110656UL;24769862377930754UL;24769836608126978UL;24769810838323202UL;24769866672898050UL;24769974047080450UL;24769943982309378UL;24769802248388610UL;24769853787996162UL;24769819428257794UL;24769815133290498UL;24769858082963458UL;24769828018192386UL;24769961162178562UL;24769832313159682UL;24769931097407490UL;24769875262832642UL;24769888147734530UL;25051290108493826UL;25051277223591938UL;25051363122937858UL;25051345943068674UL;25051307288363010UL;25051328763199490UL;25051436137381890UL;25051298698428418UL;25051406072610818UL;25051341648101378UL;25051311583330306UL;25051337353134082UL;25051302993395714UL;25051333058166786UL;25051418957512706UL;25051354533003266UL;25051449022283778UL;25051285813526530UL;25051294403461122UL;25051324468232194UL;25051350238035970UL;25332876759859200UL;25614386096373760UL;25895912607842304UL;25896058636075009UL;25895929786597376UL;25895955556139009UL;25895989922168833UL;25895981329874945UL;25896002802614273UL;25895951260778497UL;25895977032613889UL;25895921197907968UL;25895942672220161UL;25895964146401281UL;25895946966794241UL;25895805231628288UL;25895843889348610UL;25895934082482177UL;25895783758692352UL;25896015687647233UL;25895916901171200UL;25895839593070592UL;25895813821890560UL;25895925491892224UL;25895818117644288UL;25895959851237377UL;25895908311302144UL;25895796643004416UL;25895861069217794UL;25895792346923008UL;25895800937185280UL;25895972737777665UL;25895938375745537UL;25895968442155009UL;25895856773595136UL;25895869658693632UL;25895865361760256UL;25895822411563008UL;26177194312138754UL;26177207197040642UL;26177202902073346UL;26177250146713602UL;26177336046059522UL;26177224376909826UL;26177254441680898UL;26177237261811714UL;26177305981288450UL;26177211492007938UL;26177177132269570UL;26177348930961410UL;26177245851746306UL;26177190017171458UL;26177185722204162UL;26177198607106050UL;26177318866190338UL;26177232966844418UL;26177241556779010UL;26177263031615490UL;26177228671877122UL;26458755185049600UL;26458746596425728UL;26458875445313536UL;26458918395576321UL;26458750890606592UL;26458909804658689UL;26459008589496321UL;26458995705184257UL;26458926986035201UL;26458832496689152UL;26458931280216065UL;26458914099822593UL;26458965641068545UL;26458948459626497UL;26458763775311872UL;26458888329166849UL;26458862561263616UL;26458789546491904UL;26458819612114944UL;26458884035903489UL;26458733712113664UL;26458768071065600UL;26458952756035585UL;26458982825328641UL;26458866854592512UL;26458858264723456UL;26458845380935680UL;26458879740018688UL;26458901214199809UL;26458815315181568UL;26458806727016448UL;26458828201590784UL;26458772364984320UL;26458922691198977UL;26458892625641473UL;26458896920215553UL;26458905509560321UL;26458742300344320UL;26458999998906369UL;26458987114135553UL;26458871151329280UL;26740286003412992UL;27021627829387266UL;27021657894158338UL;27021773858275330UL;27021760973373442UL;27021730908602370UL;27021687958929410UL;27021670779060226UL;27021743793504258UL;27021614944485378UL;27021662189125634UL;27021632124354562UL;27021636419321858UL;27021602059583490UL;27021649304223746UL;27021675074027522UL;27021679368994818UL;27021653599191042UL;27021623534419970UL;27021666484092930UL;27021610649518082UL;27021619239452674UL;27303167230476288UL;27303158642245632UL;27303175820738560UL;27303197295116288UL;27303300375445504UL;27303326144331777UL;27303334734790657UL;27303313266311169UL;27303390571200513UL;27303171526557696UL;27303231657148416UL;27303214476623872UL;27303343325708289UL;27303308966035457UL;27303304670150656UL;27303287491395584UL;27303330439692289UL;27303377686167553UL;27303193001197568UL;27303283194855424UL;27303180115181568UL;27303296081461248UL;27303339029954561UL;27303188705443840UL;27303317555773441UL;27303291784724480UL;27303433519628289UL;27303321850347521UL;27584676570464258UL;27866155838668802UL;27866061349388290UL;27866151543701506UL;28147643703296002UL;28147660883165186UL;28147553508982786UL;28147536329113602UL;28147570688851970UL;28147579278786562UL;28147519149244418UL;28147566393884674UL;28147673768067074UL;28147574983819266UL;28147532034146306UL;28147562098917378UL;28147557803950082UL;28147587868721154UL;28147501969375234UL;28147523444211714UL;28147514854277122UL;28147630818394114UL;28147549214015490UL;28147510559309826UL;28147527739179010UL;28428976946741250UL;28429024191381506UL;28429011306479618UL;28428985536675842UL;28429037076283394UL;28429054256152578UL;28429045666217986UL;28429041371250690UL;28429049961185282UL;28429062846087170UL;28429007011512322UL;28428989831643138UL;28429135860531202UL;28429105795760130UL;28429002716545026UL;28428994126610434UL;28429148745433090UL;28429028486348802UL;28428998421577730UL;28429118680662018UL;28429032781316098UL;28710683849588737UL;28710550704291840UL;28710628015276032UL;28710619425800192UL;28710542114029568UL;28710572178669568UL;28710799812591617UL;28710786927820801UL;28710567884750848UL;28710795518869505UL;28710546410110976UL;28710563588997120UL;28710726799720449UL;28710709618343937UL;28710765454753793UL;28710705323245569UL;28710645194620928UL;28710670965014528UL;28710722504884225UL;28710701027885057UL;28710688142852097UL;28710752569720833UL;28710589360177152UL;28710662374948864UL;28710533525798912UL;28710658078408704UL;28710615128866816UL;28710713913507841UL;28710696733900801UL;28710675258998784UL;28710554998734848UL;28710808403181569UL;28710748273311745UL;28710718209261569UL;28710731093901313UL;28710632310374400UL;28710679553703936UL;28710606540701696UL;28710666668277760UL;28710782639210497UL;28710692439326721UL;28991926896689154UL;28991995616165890UL;28991956961460226UL;28992012796035074UL;28991935486623746UL;28991987026231298UL;28991948371525634UL;28991982731264002UL;28992055745708034UL;28991991321198594UL;28991952666492930UL;28991999911133186UL;28992085810479106UL;28991944076558338UL;28992068630609922UL;28991978436296706UL;28992098695380994UL;28992004206100482UL;28991961256427522UL;28991974141329410UL;28991939781591042UL;29273573678907392UL;29555138843639809UL;29555125958017025UL;29554971340242944UL;29555083008540672UL;29555113072984065UL;29555087305080832UL;29555022885158912UL;29554979928866816UL;29555143139393537UL;29555100189130752UL;29554992814882816UL;29555040058998784UL;29555044355932160UL;29555233333313537UL;29555177499852801UL;29555186094637057UL;29555014290309120UL;29554997108801536UL;29554958455930880UL;29555134548475905UL;29555108779720705UL;29555117369458689UL;29554967044161536UL;29554975634423808UL;29555156029079553UL;29555121664032769UL;29555091598409728UL;29555130253377537UL;29555151729852417UL;29555031470833664UL;29555190384885761UL;29555095895146496UL;29554988519129088UL;29555147435016193UL;29555104483835904UL;29836575165841408UL;29836708310024193UL;29836596640743425UL;29836600934727681UL;29836579460546560UL;29836557985251328UL;29836631006707713UL;29836446316953600UL;29836618116104193UL;29836588049694721UL;29836622411726849UL;29836665361596417UL;29836506447544320UL;29836515035709440UL;29836497862787072UL;29836472085512192UL;29836613820350465UL;29836442020872192UL;29836433432641536UL;29836656776445953UL;29836463495839744UL;29836570871857152UL;29836454905577472UL;29836583756431361UL;29836450611134464UL;29836519332642816UL;29836609525186561UL;29836652476563457UL;29836489267019776UL;29836626706563073UL;29836562281791488UL;29836592346169345UL;29836605230088193UL;29836566575120384UL;29836467791593472UL;30117968539877378UL;30117985719746562UL;30399452111241216UL;30681012979826689UL;30681021570875393UL;30681038750482433UL;30681133240156161UL;30680922792919040UL;30681081706840065UL;30681043046236161UL;30681055936839681UL;30680875541266432UL;30681017276301313UL;30681004390678528UL;30680987211923456UL;30680995801989120UL;30680871247085568UL;30680879835709440UL;30680897015644160UL;30680858362773504UL;30680982915383296UL;30681047341858817UL;30680991505252352UL;30680892721725440UL;30680931377676288UL;30681025864859649UL;30681000095973376UL;30681034455318529UL;30680888425971712UL;30681051636695041UL;30680914197151744UL;30681090291728385UL;30681077406695425UL;30681008686563329UL;30680939965841408UL;30680944262774784UL;30681030160220161UL;30680866951004160UL;30962303276417026UL;30962316161318914UL;30962311866351618UL;30962337636155394UL;30962324751253506UL;30962410650599426UL;30962260326744066UL;30962380585828354UL;30962251736809474UL;30962393470730242UL;30962268916678658UL;30962423535501314UL;30962281801580546UL;30962307571384322UL;30962264621711362UL;30962329046220802UL;30962286096547842UL;30962298981449730UL;30962320456286210UL;30962277506613250UL;30962273211645954UL;31243877041504256UL;31525300471398400UL;31525416435384320UL;31525558170288129UL;31525515221860353UL;31525369192906752UL;31525446501007361UL;31525437909958657UL;31525455090352129UL;31525472271990785UL;31525429320810496UL;31525510932070401UL;31525304765841408UL;31525476566827009UL;31525450794991617UL;31525442206433281UL;31525339127283712UL;31525425026105344UL;31525296177217536UL;31525463680614401UL;31525412142055424UL;31525317651857408UL;31525407845515264UL;31525356307808256UL;31525347722133504UL;31525480866054145UL;31525364895973376UL;31525433616695297UL;31525420732121088UL;31525291881136128UL;31525467976368129UL;31525459385450497UL;31525313356103680UL;31525502336827393UL;31525321945776128UL;31525283292905472UL;31806805515698178UL;31806732501254146UL;31806723911319554UL;31806753976090626UL;31806698141515778UL;31806711026417666UL;31806689551581186UL;31806676666679298UL;31806728206286850UL;31806818400600066UL;31806706731450370UL;31806702436483074UL;31806741091188738UL;31806848465371138UL;31806762566025218UL;31806749681123330UL;31806736796221442UL;31806835580469250UL;31806745386156034UL;31806685256613890UL;31806693846548482UL;32088379277443074UL;32088271903260674UL;32088357802606594UL;32088319147900930UL;32088374982475778UL;32088250428424194UL;32088254723391490UL;32088246133456898UL;32088344917704706UL;32088314852933634UL;32088525306331138UL;32088233248555010UL;32088306262999042UL;32088289083129858UL;32088263313326082UL;32088301968031746UL;32088310557966338UL;32088362097573890UL;32088241838489602UL;32088370687508482UL;32088267608293378UL;32088366392541186UL;32088332032802818UL;32369626624622592UL;32651221852618752UL;32651436601769985UL;32651380767850497UL;32651264802816000UL;32651415128702977UL;32651342113275905UL;32651204672684032UL;32651213262946304UL;32651183199748096UL;32651320638963712UL;32651324932947968UL;32651376473669633UL;32651359292293121UL;32651402243670017UL;32651294868570112UL;32651363587457025UL;32651312048898048UL;32651239034126336UL;32651329227653120UL;32651256214650880UL;32651445192818689UL;32651333523537921UL;32651432313880577UL;32651397947260929UL;32651316342226944UL;32651337816801281UL;32651367883210753UL;32651350701834241UL;32651458077130753UL;32651354997194753UL;32651277689225216UL;32651449486540801UL;32651217558700032UL;32651191787978752UL;32651269099749376UL;32651196084060160UL;32651307752357888UL;32651200378241024UL;32651372178833409UL;32651346407849985UL;32651281984323584UL;32932726898622466UL;32932950236921858UL;33214236238479360UL;33495612426813442UL;33495685441257474UL;33495556592238594UL;33495698326159362UL;33495655376486402UL;33495578067075074UL;33495573772107778UL;33495543707336706UL;33495548002304002UL;33495526527467522UL;33495582362042370UL;33495552297271298UL;33495539412369410UL;33495595246944258UL;33495590951976962UL;33495560887205890UL;33495535117402114UL;33495586657009666UL;33495668261388290UL;33495603836878850UL;33495599541911554UL;33777053043392514UL;33777018683654146UL;33777070223261698UL;33777010093719554UL;33777130352803842UL;33777160417574914UL;33777001503784962UL;33777022978621442UL;33777031568556034UL;33777035863523330UL;33777065928294402UL;33777014388686850UL;33777061633327106UL;33777173302476802UL;33777143237705730UL;33777057338359810UL;33777048748425218UL;33777074518228994UL;33777027273588738UL;33777078813196290UL;33777087403130882UL;34058656869646338UL;34058704114286594UL;34058631099842562UL;34058695524352002UL;34058661164613634UL;34058691229384706UL;34058669754548226UL;34058570970300418UL;34058613919973378UL;34058686934417410UL;34058588150169602UL;34058592445136898UL;34058643984744450UL;34058635394809858UL;34058850143174658UL;34058699819319298UL;34058639689777154UL;34058579560235010UL;34058558085398530UL;34058596740104194UL;34058575265267714UL;34058566675333122UL;34058626804875266UL;34058682639450114UL;34340101785649152UL;34621705610788865UL;34621508036722688UL;34621671244824577UL;34621688424431617UL;34621542395674624UL;34621649769922560UL;34621546689593344UL;34621563871100928UL;34621697015808001UL;34621525215215616UL;34621701310644225UL;34621516624953344UL;34621739965677569UL;34621692720185345UL;34621572466868224UL;34621654064627712UL;34621520921034752UL;34621684129267713UL;34621529509658624UL;34621782914105345UL;34621658360512513UL;34621727080644609UL;34621645475938304UL;34621593936723968UL;34621589639790592UL;34621636885872640UL;34621538099920896UL;34621632589332480UL;34621666950250497UL;34621731381248001UL;34621581051625472UL;34621679834169345UL;34621641179201536UL;34621662653775873UL;34621675538808833UL;34903111864614914UL;34903038850170882UL;34903094684745730UL;34903107569647618UL;34903120454549506UL;34903056030040066UL;34903051735072770UL;34903013080367106UL;34903004490432514UL;34903116159582210UL;34903129044484098UL;34903068914941954UL;34903064619974658UL;34903124749516802UL;34903021670301698UL;34903086094811138UL;34902995900497922UL;34903060325007362UL;34902983015596034UL;34903017375334402UL;34903000195465218UL;34902991605530626UL;34903081799843842UL;34903275073372162UL;35184492352176130UL;35184604021325826UL;35184457992437762UL;35184582546489346UL;35184750050213890UL;35184543891783682UL;35184539596816386UL;35184488057208834UL;35184556776685570UL;35184475172306946UL;35184591136423938UL;35184496647143426UL;35184479467274242UL;35184526711914498UL;35184531006881794UL;35184599726358530UL;35184535301849090UL;35184569661587458UL;35184595431391234UL;35184470877339650UL;35184466582372354UL;35184513827012610UL;35184586841456642UL; |];


//Enum for return values 
type FLTypeDUnion = | Enumvariant_0 of expr | Enumvariant_5 of float | Enumvariant_36 of lltype | Enumvariant_22 of LBox<expr> list | Enumvariant_29 of String | Enumvariant_38 of (lltype*string) | Enumvariant_21 of (lltype*string) list | Enumvariant_1 of unit | Enumvariant_6 of string | Enumvariant_4 of int | Enumvariant_2 of int*int ;;

let _rrsemaction_0_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLint 

let _rrsemaction_1_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLstring 

let _rrsemaction_2_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLfloat 

let _rrsemaction_3_(parser:RTParser<FLTypeDUnion,unit>, v:string) =  (LLunknown, v) 

let _rrsemaction_4_(parser:RTParser<FLTypeDUnion,unit>, x:(lltype*string)) =  x 

let _rrsemaction_5_(parser:RTParser<FLTypeDUnion,unit>, v:string, _item1_:expr, t:lltype) =  (t,v) 

let _rrsemaction_6_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_7_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<string>) =  Var(x) 

let _rrsemaction_8_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<string>, _item1_:expr, l:LBox<expr> list, _item3_:expr) = Apply(x, l)

let _rrsemaction_9_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:LBox<string>) = Import(x)

let _rrsemaction_10_(parser:RTParser<FLTypeDUnion,unit>, x:string) =  Strlit(x) 

let _rrsemaction_11_(parser:RTParser<FLTypeDUnion,unit>, x:int) =  Integer(x) 

let _rrsemaction_12_(parser:RTParser<FLTypeDUnion,unit>, x:float) =  Floatpt(x) 

let _rrsemaction_13_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  Nil 

let _rrsemaction_14_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_15_(parser:RTParser<FLTypeDUnion,unit>, e:String, x:expr) =  Uniop(e,x) 

let _rrsemaction_16_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "not" 

let _rrsemaction_17_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "~" 

let _rrsemaction_18_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "car" 

let _rrsemaction_19_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cdr" 

let _rrsemaction_20_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_21_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("^",x,y) 

let _rrsemaction_22_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_23_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_24_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "*" 

let _rrsemaction_25_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "/" 

let _rrsemaction_26_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "%" 

let _rrsemaction_27_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_28_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_29_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "+" 

let _rrsemaction_30_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "-" 

let _rrsemaction_31_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_32_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_33_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "=" 

let _rrsemaction_34_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "!=" 

let _rrsemaction_35_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "eq" 

let _rrsemaction_36_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<=" 

let _rrsemaction_37_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">=" 

let _rrsemaction_38_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<" 

let _rrsemaction_39_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">" 

let _rrsemaction_40_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cons" 

let _rrsemaction_41_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_42_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<expr>, _item1_:expr, y:expr) =  Ifelse(x,y,Integer(0))

let _rrsemaction_43_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_44_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<expr>, _item1_:expr, y:expr) =  Ifelse(x,Integer(1),y) 

let _rrsemaction_45_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, _item1_:expr, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_46_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_47_(parser:RTParser<FLTypeDUnion,unit>) =  [] 

let _rrsemaction_48_(parser:RTParser<FLTypeDUnion,unit>, x:expr) = x

let _rrsemaction_49_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:LBox<expr> list, _item2_:expr) =  ListLiteral(x) 

let _rrsemaction_50_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_51_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, v:(lltype*string) list, _item2_:expr, x:LBox<expr>) =  TypedLambda(v,LLunknown,x) 

let _rrsemaction_52_(parser:RTParser<FLTypeDUnion,unit>, t:lltype, _item1_:expr, v:(lltype*string) list, _item3_:expr, x:LBox<expr>) =  TypedLambda(v,t,x) 

let _rrsemaction_53_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_54_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr, _item4_:expr, y:LBox<expr>) = TypedLet(d,x,y)

let _rrsemaction_55_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_56_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr) = TypedDefine(d,x)

let _rrsemaction_57_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_58_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string), _item1_:expr, seq:(lltype*string) list) =  e::seq 

let _rrsemaction_59_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string)) =  [e] 

let _rrsemaction_60_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_61_(parser:RTParser<FLTypeDUnion,unit>, x:expr) = x

let _rrsemaction_62_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) = x

let _rrsemaction_63_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_64_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:LBox<expr>, _item3_:expr, x:expr) =  Whileloop(p,x) 

let _rrsemaction_65_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:LBox<expr>, _item3_:expr, x:expr, _item5_:expr, y:expr) =  Ifelse(p,x,y)

let _rrsemaction_66_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) =  x 

let _rrsemaction_67_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_68_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_69_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_70_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_71_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:LBox<string>, _item2_:expr, p:expr, _item4_:expr) = Class(x,p)

let _rrsemaction_72_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<expr> list) =  CodeBlock(x) 

let _rrsemaction_73_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =   Unchecked.defaultof<unit>

let make_parser() : RTParser<FLTypeDUnion,unit> =
  let parser1 = skeleton_parser(Unchecked.defaultof<unit>,74,126)
  let mutable rule = skeleton_production("")
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_36(_rrsemaction_0_(parser,_item0_)));
  parser1.Rules.[0] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_36(_rrsemaction_1_(parser,_item0_)));
  parser1.Rules.[1] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_36(_rrsemaction_2_(parser,_item0_)));
  parser1.Rules.[2] <- rule;
  rule <- skeleton_production("UNTYPED_PREFIX")
  rule.action <- fun parser ->
    (let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_38(_rrsemaction_3_(parser,v)));
  parser1.Rules.[3] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_38(_rr_38) ->  _rr_38 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_38(_rrsemaction_4_(parser,x)));
  parser1.Rules.[4] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_36(_rr_36) ->  _rr_36 | _ -> Unchecked.defaultof<lltype>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_38(_rrsemaction_5_(parser,v,_item1_,t)));
  parser1.Rules.[5] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_6_(parser,_item0_,x,_item2_)));
  parser1.Rules.[6] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_7_(parser,x)));
  parser1.Rules.[7] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let l = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_8_(parser,x,_item1_,l,_item3_)));
  parser1.Rules.[8] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_9_(parser,_item0_,x)));
  parser1.Rules.[9] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_10_(parser,x)));
  parser1.Rules.[10] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_4(_rr_4) ->  _rr_4 | _ -> Unchecked.defaultof<int>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_11_(parser,x)));
  parser1.Rules.[11] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_5(_rr_5) ->  _rr_5 | _ -> Unchecked.defaultof<float>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_12_(parser,x)));
  parser1.Rules.[12] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_13_(parser,_item0_)));
  parser1.Rules.[13] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_14_(parser,x)));
  parser1.Rules.[14] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_15_(parser,e,x)));
  parser1.Rules.[15] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_16_(parser,_item0_)));
  parser1.Rules.[16] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_17_(parser,_item0_)));
  parser1.Rules.[17] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_18_(parser,_item0_)));
  parser1.Rules.[18] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_19_(parser,_item0_)));
  parser1.Rules.[19] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_20_(parser,x)));
  parser1.Rules.[20] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_21_(parser,x,_item1_,y)));
  parser1.Rules.[21] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_22_(parser,x)));
  parser1.Rules.[22] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_23_(parser,x,e,y)));
  parser1.Rules.[23] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_24_(parser,_item0_)));
  parser1.Rules.[24] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_25_(parser,_item0_)));
  parser1.Rules.[25] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_26_(parser,_item0_)));
  parser1.Rules.[26] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_27_(parser,x)));
  parser1.Rules.[27] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_28_(parser,x,e,y)));
  parser1.Rules.[28] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_29_(parser,_item0_)));
  parser1.Rules.[29] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_30_(parser,_item0_)));
  parser1.Rules.[30] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_31_(parser,x)));
  parser1.Rules.[31] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_32_(parser,x,e,y)));
  parser1.Rules.[32] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_33_(parser,_item0_)));
  parser1.Rules.[33] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_34_(parser,_item0_)));
  parser1.Rules.[34] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_35_(parser,_item0_)));
  parser1.Rules.[35] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_36_(parser,_item0_)));
  parser1.Rules.[36] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_37_(parser,_item0_)));
  parser1.Rules.[37] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_38_(parser,_item0_)));
  parser1.Rules.[38] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_39_(parser,_item0_)));
  parser1.Rules.[39] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_40_(parser,_item0_)));
  parser1.Rules.[40] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_41_(parser,x)));
  parser1.Rules.[41] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_42_(parser,x,_item1_,y)));
  parser1.Rules.[42] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_43_(parser,x)));
  parser1.Rules.[43] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_44_(parser,x,_item1_,y)));
  parser1.Rules.[44] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_45_(parser,e,_item1_,seq)));
  parser1.Rules.[45] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_46_(parser,e)));
  parser1.Rules.[46] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    ( FLTypeDUnion.Enumvariant_22(_rrsemaction_47_(parser)));
  parser1.Rules.[47] <- rule;
  rule <- skeleton_production("LIST_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_48_(parser,x)));
  parser1.Rules.[48] <- rule;
  rule <- skeleton_production("LIST_EXPR")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_49_(parser,_item0_,x,_item2_)));
  parser1.Rules.[49] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_50_(parser,x)));
  parser1.Rules.[50] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_51_(parser,_item0_,v,_item2_,x)));
  parser1.Rules.[51] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_36(_rr_36) ->  _rr_36 | _ -> Unchecked.defaultof<lltype>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_52_(parser,t,_item1_,v,_item3_,x)));
  parser1.Rules.[52] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_53_(parser,x)));
  parser1.Rules.[53] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let y_sitem = parser.Pop() in let y_val = (match y_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let y = lbox(y_val,y_sitem.line,y_sitem.column) in let _item4_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_38(_rr_38) ->  _rr_38 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_54_(parser,_item0_,d,_item2_,x,_item4_,y)));
  parser1.Rules.[54] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_55_(parser,x)));
  parser1.Rules.[55] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_38(_rr_38) ->  _rr_38 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_56_(parser,_item0_,d,_item2_,x)));
  parser1.Rules.[56] <- rule;
  rule <- skeleton_production("EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_57_(parser,x)));
  parser1.Rules.[57] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_38(_rr_38) ->  _rr_38 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_58_(parser,e,_item1_,seq)));
  parser1.Rules.[58] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_38(_rr_38) ->  _rr_38 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_59_(parser,e)));
  parser1.Rules.[59] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_60_(parser,_item0_,x,_item2_)));
  parser1.Rules.[60] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_61_(parser,x)));
  parser1.Rules.[61] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_62_(parser,x,_item1_)));
  parser1.Rules.[62] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_63_(parser,_item0_,x,_item2_)));
  parser1.Rules.[63] <- rule;
  rule <- skeleton_production("LOOP_STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p_sitem = parser.Pop() in let p_val = (match p_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = lbox(p_val,p_sitem.line,p_sitem.column) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_64_(parser,_item0_,_item1_,p,_item3_,x)));
  parser1.Rules.[64] <- rule;
  rule <- skeleton_production("SELECT_STATEMENT")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item5_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p_sitem = parser.Pop() in let p_val = (match p_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = lbox(p_val,p_sitem.line,p_sitem.column) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_65_(parser,_item0_,_item1_,p,_item3_,x,_item5_,y)));
  parser1.Rules.[65] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_66_(parser,x,_item1_)));
  parser1.Rules.[66] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_67_(parser,x)));
  parser1.Rules.[67] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_68_(parser,x)));
  parser1.Rules.[68] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_69_(parser,e,seq)));
  parser1.Rules.[69] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_70_(parser,e)));
  parser1.Rules.[70] <- rule;
  rule <- skeleton_production("PROGRAM")
  rule.action <- fun parser ->
    (let _item4_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_71_(parser,_item0_,x,_item2_,p,_item4_)));
  parser1.Rules.[71] <- rule;
  rule <- skeleton_production("PROGRAM")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_72_(parser,x)));
  parser1.Rules.[72] <- rule;
  rule <- skeleton_production("START")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_1(_rrsemaction_73_(parser,_item0_)));
  parser1.Rules.[73] <- rule;

  for i in 0..1978 do
    let (sti,symi,action) = decode_action(TABLE.[i])
    parser1.RSM.[sti].Add(SYMBOLS.[symi],action)
  for s in SYMBOLS do ignore (parser1.Symset.Add(s));
  parser1;;

let convert_token (lt:RawToken) =
  if lt=null then None
  else
    let (uval,utype) = 
      match lt.token_name with
        | "Alphanum" -> (FLTypeDUnion.Enumvariant_6((fun x-> x)(lt.token_text)),"VAR")
        | "Num" -> (FLTypeDUnion.Enumvariant_4(int(lt.token_text)),"INTEGER_LITERAL")
        | "Float" -> (FLTypeDUnion.Enumvariant_5(float(lt.token_text)),"FLOAT_LITERAL")
        | "StrLit" -> (FLTypeDUnion.Enumvariant_6((fun x -> x)(lt.token_text)),"STRING_LITERAL")
        | "in" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IN")
        | "--" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUSMINUS")
        | ">" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GT")
        | "if" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IF")
        | "++" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUSPLUS")
        | "{" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LCURLY")
        | "+" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUS")
        | "/" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DIVIDE")
        | "]" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RBRACKET")
        | "not" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOT")
        | "let" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LET")
        | ">=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GTE")
        | "import" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IMPORT")
        | "-" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUS")
        | ":" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COLON")
        | "eq" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQ")
        | "}" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RCURLY")
        | "define" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DEFINE")
        | "car" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CAR")
        | "cdr" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CDR")
        | ")" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RPAREN")
        | "," -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COMMA")
        | "while" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"WHILE")
        | "." -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DOT")
        | "&&" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"AND")
        | "^" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EXPONENT")
        | "!=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOTEQ")
        | "~" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TILDA")
        | "<" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LT")
        | "String" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"STRING")
        | "||" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"OR")
        | "*" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TIMES")
        | "%" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MODULO")
        | "lambda" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LAMBDA")
        | "<=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LTE")
        | "boolean" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"BOOLEAN")
        | "true" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TRUE")
        | "float" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FLOAT")
        | "class" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CLASS")
        | "nil" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NIL")
        | "else" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"ELSE")
        | "[" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LBRACKET")
        | "int" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"INT")
        | "(" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LPAREN")
        | "=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQUALS")
        | "for" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FOR")
        | "false" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FALSE")
        | "cons" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CONS")
        | ";" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),";")
        | "'" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"'")
        | "EOF" -> (FLTypeDUnion.Enumvariant_1(Unchecked.defaultof<unit>),"EOF")
        | x -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"Error:"+x)
    Some({TerminalToken.sym=utype; svalue=uval; line=lt.line; column=lt.column;});;

let parse_with(parser:RTParser<FLTypeDUnion,unit>, lexer:AbstractLexer<unit>) : expr option  =
  lexer.set_shared(parser.exstate)
  parser.NextToken <- fun () -> convert_token(lexer.next_lt())
  match parser.parse_core() with
    | Some(FLTypeDUnion.Enumvariant_0(_yyxres_)) -> Some(_yyxres_)
    | _ -> None;;

