//F# Parser generated by Rustlr for grammar quack
    
module Quack
open System;
open System.Collections.Generic;
open Fussless;
open Fussless.RuntimeParser;
//AST modifications
// 1. Sequences are now Applys and take optional arguments
// 2. Code blocks are now a thing
// 3. BeginSeq's are ListLiterals and have different syntax
// 4. Vars will now  be LBox'ed
//Questions for Liang
// 1. Is there a way to fix the Makefile to compile my files
// 2. Is there a way to make strings use quotes
type expr =
  |Integer of int
  | Floatpt of float
  | Strlit of string
  | Var of string
  | Nil
  | Binop of string*expr*expr
  | Uniop of string*expr
  | Ifelse of expr*expr*expr
  | Whileloop of expr*expr
  | Define of LBox<string>*expr
  | TypedDefine of LBox<lltype*string>*expr
  | Lambda of (string list)*expr
  | TypedLambda of ((lltype*string) list)*lltype*LBox<expr>
  | Let of LBox<string>*expr*LBox<expr>
  | TypedLet of LBox<lltype*string>*expr*LBox<expr>
  | Quote of expr
  | Setq of LBox<string>*expr
  | Apply of string * LBox<expr> list option
  | ListLiteral of LBox<expr> list
  | CodeBlock of LBox<expr> list
  // type expressions
  | TypeExpr of lltype
  | TypedVal of (lltype*expr) 
  | Label of string   // not a proper expression - just a temporary
  | Error
 and lltype =  // abstract syntax for type expressions
  | LLint | LLfloat | LLstring
  | LList of lltype | LLtuple of lltype list
  | LLfun of (lltype list)*lltype
  | LLunknown | LLuntypable | LLvar of string | LLunit
//-------------------------------------------------------
//LEX TERMINALS
//-------------------------------------------------------
//Math Operators
//Comparison Operators
//Logic Operators
//Misc Operators
//Primitive Types
//Syntax Components
//Grouping Symbols
//Declaration Symbols
//Loops and Decision Statements
//Value Literals
//Imports
//lexterminal YOINK yoink
//-------------------------------------------------------
//VALUE TERMINALS
//-------------------------------------------------------
//-------------------------------------------------------
//PRODUCTION DECLARATIONS
//-------------------------------------------------------
//Expressions
// Sequences
//Operators
//Statement Types
//Types
//-------------------------------------------------------
//GRAMMAR PRODUCTION RULES
//-------------------------------------------------------
//UNIT_EXPR --> LBRACKET EXPR_SEQ:x RBRACKET {}
//UNIT_EXPR --> TRUE { True }
//UNIT_EXPR --> FALSE { False }
//THIS IS A TEMPORARY INJECTION FOR A LIST LITERAL- THIS NEEDS TO CHANGE
//EXPR_SEQ --> EXPR:[e] ;  EXPR_SEQ:seq  { e:: seq }
//EXPR_SEQ --> EXPR:[e] ;  { [e] } 
//EXPR_STATEMENT --> EXPR_SEQ:e { CodeBlock(e) } 

let private SYMBOLS = [|"_WILDCARD_TOKEN_";";";"'";"PLUS";"MINUS";"TIMES";"DIVIDE";"MODULO";"EXPONENT";"EQUALS";"PLUSPLUS";"MINUSMINUS";"LT";"GT";"LTE";"GTE";"EQ";"NOTEQ";"OR";"AND";"NOT";"CONS";"CAR";"CDR";"TILDA";"DISPLAY";"LAMBDA";"BOOLEAN";"INT";"STRING";"FLOAT";"DOT";"COMMA";"COLON";"LBRACKET";"RBRACKET";"LCURLY";"RCURLY";"LPAREN";"RPAREN";"LET";"DEFINE";"IN";"IF";"ELSE";"FOR";"WHILE";"TRUE";"FALSE";"NIL";"VAR";"INTEGER_LITERAL";"FLOAT_LITERAL";"UNIT_EXPR";"LAMBDA_EXPR";"UNARY_OPERATOR_EXPR";"EXPONENT_OPER";"BINOP_MULTIPLICATION_EXPR";"BINOP_ADDITION_EXPR";"AND_EXPR";"OR_EXPR";"BINOP_EQUALITY_EXPR";"DEFINE_EXPR";"LET_EXPR";"EXPR";"EXPR_SEQ";"LIST_SEQ";"VAR_SEQ";"STATEMENT_SEQ";"LIST_LITERAL";"CODE_BLOCK";"LAMBDA_BLOCK";"UNIOP";"BINOP_MULT_OPER";"BINOP_PLUS_OPER";"BINOP_EQUAL_OPER";"PROGRAM";"STATEMENT";"EXPR_STATEMENT";"LOOP_STATEMENT";"SELECT_STATEMENT";"UNIT_TYPE";"UNTYPED_PREFIX";"TYPE_PREFIX";"NEWRENT_8_0";"START";"EOF"|];

let private TABLE:uint64 [] = [|128850591744UL;347894513665UL;111669477376UL;326419873793UL;292059217921UL;94489411584UL;146031116288UL;261993463809UL;309238628353UL;176096149504UL;214750068736UL;236224970753UL;274878169089UL;296353136641UL;124556673024UL;249109938177UL;85900263424UL;343598039041UL;231930527745UL;257698103297UL;184684445696UL;227633790977UL;8590655488UL;219044970496UL;98785296384UL;163210133504UL;223340265472UL;107374379008UL;270584250369UL;171799937024UL;103081115648UL;266290528257UL;210455494656UL;197569675264UL;240520593409UL;120259870720UL;253403660289UL;339303530497UL;330713989121UL;244815167489UL;281539403644930UL;281556583514114UL;281513633841154UL;281547993579522UL;281509338873858UL;281479274102786UL;281535108677634UL;281487864037378UL;281543698612226UL;281492159004674UL;281500748939266UL;281625302990850UL;281526518743042UL;281612418088962UL;281505043906562UL;281552288808960UL;281642482860034UL;281565173448706UL;281655367761922UL;281496453971970UL;281530813710338UL;563035854012418UL;563048738914306UL;563053033881602UL;563164703031298UL;563168997998594UL;563160408064002UL;563113163423746UL;563074508718082UL;563044443947010UL;563061623816194UL;562958544601090UL;563173292965890UL;563057328848898UL;563078803685378UL;563070213750786UL;844519420788738UL;844648269807618UL;844545190592514UL;844523715756034UL;844532305690626UL;844510830854146UL;844433521442818UL;844553780527106UL;844639679873026UL;844643974840322UL;844536600657922UL;844528010723330UL;844588140265474UL;844549485559810UL;844635384905730UL;1125904204562432UL;1407589634867200UL;1407731368656897UL;1407727073755137UL;1407662649376769UL;1688901403475970UL;1689030252494850UL;1688875633672194UL;1688909993410562UL;1688879928639490UL;1688940058181634UL;1688931468247042UL;1688867043737602UL;1688862748770306UL;1688905698443266UL;1689000187723778UL;1688914288377858UL;1688888518574082UL;1688854158835714UL;1688927173279746UL;1689017367592962UL;1688871338704898UL;1688987302821890UL;1688922878312450UL;1688884223606786UL;1688918583345154UL;1970492343779330UL;1970359199793154UL;1970380675153920UL;1970406444433410UL;1970350609858562UL;1970329135022082UL;1970415034368000UL;1970354904825858UL;1970337724956674UL;1970376379924480UL;1970475163910146UL;1970462279008258UL;1970384969990144UL;1970342019923970UL;1970363494825984UL;1970393559662592UL;1970505228681218UL;1970389264891904UL;1970402149466114UL;1970346314891266UL;1970397854695424UL;1970646963060737UL;2251890008981506UL;2251825584472066UL;2251855649243138UL;2251967318392834UL;2251859944210434UL;2251804109635586UL;2251881419046914UL;2251838469373954UL;2251829879439362UL;2251821289504770UL;2251851354275842UL;2251816994537474UL;2251877124079618UL;2251812699570178UL;2251834174406658UL;2251937253621762UL;2251980203294722UL;2251868534145026UL;2251950138523650UL;2251872829112322UL;2251864239177730UL;2533326332297218UL;2533352102100994UL;2533343512166402UL;2533442296414210UL;2533287677591554UL;2533364987002882UL;2533356398444544UL;2533313447395330UL;2533279087656962UL;2533330627264514UL;2533296267526146UL;2533291972558850UL;2533347807133698UL;2533412231643138UL;2533334922231810UL;2533425116545026UL;2533309152428034UL;2533300562493442UL;2533304857460738UL;2533339217199106UL;2533455181316098UL;2814960225026050UL;2814895800516610UL;2814835670974466UL;2814852850843650UL;2814917275353090UL;2814857145810946UL;2814874325680130UL;2814934455222274UL;2814968814960642UL;2814964519993346UL;2814848555876354UL;2814973109927938UL;2814758361563138UL;2814912980385794UL;2814861440778242UL;2814947340124162UL;2814925865287682UL;2814878620647426UL;2814844260909058UL;2814908685418498UL;2814921570320386UL;2815119138816002UL;2814870030712834UL;3096439495917568UL;3377832864514050UL;3377837159481346UL;3377811389677570UL;3377738375233538UL;3659337909796864UL;3940735574409218UL;3940752754278402UL;3940868718395394UL;3940748459311106UL;3940778524082178UL;3940864423428098UL;3940774229114882UL;3940658264997890UL;3940744164343810UL;3940812883820546UL;3940761344212994UL;3940860128460802UL;3940757049245698UL;3940873013362690UL;3940769934147586UL;4222133241315328UL;4222356582760449UL;4222433889288193UL;4222382348763137UL;4222352284450817UL;4222339400728576UL;4222249207332864UL;4222472545173505UL;4222335106154496UL;4222378054320129UL;4222347990925312UL;4222227731775488UL;4222219140071424UL;4222210550923264UL;4222287860793344UL;4222373760598017UL;4222223435956224UL;4222343695630336UL;4222369465827329UL;4222232025038848UL;4222253501251584UL;4222365171253249UL;4222236320137216UL;4222360875630593UL;4222386644123649UL;4222244910530560UL;4503698412929026UL;4503814377046018UL;4503724182732802UL;4503608218615810UL;4503707002863618UL;4503810082078722UL;4503685528027138UL;4503719887765506UL;4503694117961730UL;4503711297830914UL;4503728477700098UL;4503818672013314UL;4503702707896322UL;4503822966980610UL;4503762837438466UL;4785297946836994UL;4785083198472194UL;4785173392785410UL;4785177687752706UL;4785199162589186UL;4785237817294850UL;4785181982720002UL;4785259292131330UL;4785289356902402UL;4785246407229442UL;4785285061935106UL;4785242112262146UL;4785293651869698UL;4785250702196738UL;4785160507883522UL;4785233522327554UL;4785443975725058UL;4785220637425666UL;4785203457556482UL;4785169097818114UL;4785194867621890UL;4785186277687298UL;4785272177033218UL;5066712793481216UL;5348239308816384UL;5348381043785729UL;5348376747704321UL;5629636976574466UL;5629533897359362UL;5629568257097730UL;5629529602392066UL;5629576847032322UL;5629667041345538UL;5629589731934210UL;5629563962130434UL;5629555372195842UL;5629516717490178UL;5629503832588290UL;5629538192326658UL;5629649861476354UL;5629521012457474UL;5629679926247426UL;5629572552065026UL;5629559667163138UL;5629512422522882UL;5629525307424770UL;5629581141999618UL;5629551077228546UL;5911150607073280UL;5911189260992512UL;5911283749552129UL;5911227914584065UL;5911245095174145UL;5911094770794496UL;5911172080599040UL;5911069000335360UL;5911313814454273UL;5911099067596800UL;5911184966418432UL;5911305227468801UL;5911215031517185UL;5911081885302784UL;5911060411187200UL;5911219326091265UL;5911146310860800UL;5911103361515520UL;5911137721057280UL;5911210735894529UL;5911232209027073UL;5911077592039424UL;5911197851189248UL;5911159195369472UL;5911120542040064UL;5910983101579264UL;5911240801452033UL;5911318108962817UL;5911193555894272UL;5911073296220160UL;5911270864060417UL;5911236504387585UL;5911202144714753UL;5911086180401152UL;5911249389092865UL;5911206441451521UL;5911223620861953UL;5911322405437441UL;6192818859540482UL;6192608406142978UL;6474199342514177UL;6474109148790784UL;6474156394872833UL;6474010364608512UL;6474293836185602UL;6474100560494592UL;6474036133822464UL;6474272358858753UL;6474255178334209UL;6474070495461376UL;6474263767875585UL;6474152098136065UL;6474147804610560UL;6474134919839744UL;6474190754873345UL;6474186457808897UL;6474053314936832UL;6474044724215808UL;6474096264282112UL;6474216526249985UL;6474018953756672UL;6474177868005377UL;6474139214413824UL;6474049021018112UL;6474031838724096UL;6474173574283265UL;6474164984938497UL;6474160689315841UL;6474087674478592UL;6474195048595457UL;6474233702973441UL;6474027545460736UL;6474220817481729UL;6473933055000576UL;6474182162448385UL;6474083382788098UL;6474268062384129UL;6474023249641472UL;6474169279512577UL;6474143509315584UL;6474122034020352UL;6755438095892482UL;6755511110336514UL;6755536880140290UL;6755532585172994UL;7036951727964162UL;7036895893389314UL;7036904483323906UL;7036930253127682UL;7036891598422018UL;7036956022931458UL;7036934548094978UL;7036925958160386UL;7037041922277378UL;7036913073258498UL;7037024742408194UL;7037011857506306UL;7037054807179266UL;7036943138029570UL;7036964612866050UL;7036878713520130UL;7036938843062274UL;7036908778291202UL;7036887303454722UL;7036900188356610UL;7036947432996866UL;7318529783562242UL;7318370869772290UL;7318366574804994UL;7318486833889282UL;7318375164739586UL;7318516898660354UL;7318413819445250UL;7318400934543362UL;7318426704347138UL;7318353689903106UL;7318405229510658UL;7318422409379842UL;7318383754674178UL;7318388049641474UL;7318418114412546UL;7318430999314434UL;7318499718791170UL;7318439589249026UL;7318362279837698UL;7318379459706882UL;7318409524477954UL;7318512607428608UL;7599974696484866UL;7599991876354050UL;7599863027335170UL;7599828667596802UL;7599837257531394UL;7600004761255938UL;7599858732367874UL;7599893092106242UL;7599875912237058UL;7599961811582978UL;7599901682040834UL;7599841552498690UL;7599845847465986UL;7599880207204354UL;7599854437400578UL;7599905977008130UL;7599897387073538UL;7599884502171650UL;7599888797138946UL;7599850142433282UL;7599914566942722UL;7881312237060096UL;7881376659472386UL;7881466853785602UL;7881436789014530UL;7881303645028354UL;7881380954439682UL;7881368069537794UL;7881329414832130UL;7881359479603202UL;7881333709799426UL;7881316532158464UL;7881363774570498UL;7881372364505090UL;7881338004766722UL;7881350889668610UL;7881355184635906UL;7881449673916418UL;7881325119864834UL;7881320824897538UL;7881617179803649UL;7881389544374274UL;7881479738687490UL;8162782915723266UL;8162898879840258UL;8162873110036482UL;8162937534545922UL;8162997664088066UL;8162993369120770UL;8162877405003778UL;8162868815069186UL;8162989074153474UL;8162881699971074UL;8162903174807554UL;8162894584872962UL;8162885994938370UL;8162860225134594UL;8162984779186178UL;8444322316615682UL;8444253597138946UL;8444429690798082UL;8444300841779202UL;8444313726681090UL;8444339496484866UL;8444386741125122UL;8444262187073538UL;8444270777008130UL;8444318021648386UL;8444330906550274UL;8444266482040834UL;8444283661910018UL;8444416805896194UL;8444309431713794UL;8444326611582978UL;8444279366942722UL;8444287956877314UL;8444275071975426UL;8444305136746498UL;8444399626027010UL;8725737164832770UL;8725762934636546UL;8725788704440322UL;8725775819538434UL;8725784409473026UL;8725741459800066UL;8725728574898178UL;8725797294374914UL;8725904668557314UL;8725758639669250UL;8725750052356096UL;8725745757323264UL;8725792999407618UL;8725861718884354UL;8725891783655426UL;8725754347388928UL;8725801589342210UL;8725780114505730UL;8725805884309506UL;8725874603786242UL;8725814474244098UL;8726037815296001UL;9007336694611970UL;9007255090233346UL;9007233615396866UL;9007276565069826UL;9007225025462274UL;9007229320429570UL;9007216435527682UL;9007272270102530UL;9007379644284930UL;9007267975135234UL;9007366759383042UL;9007237910364162UL;9007280860037122UL;9007263680167938UL;9007203550625794UL;9007220730494978UL;9007349579513858UL;9007250795266050UL;9007212140560386UL;9007259385200642UL;9007289449971714UL;9288785905319936UL;9570419792412673UL;9570243697573888UL;9570376841953281UL;9570269468033024UL;9570368253132800UL;9570295239278592UL;9570381138690049UL;9570432680787969UL;9570278058754048UL;9570247993458688UL;9570321008099328UL;9570312418295808UL;9570445561298945UL;9570256582541312UL;9570252289277952UL;9570235108425728UL;9570406906265601UL;9570260877639680UL;9570458446790657UL;9570363958231040UL;9570372548427776UL;9570385433133057UL;9570398318100481UL;9570415498690561UL;9570402611822593UL;9570411201626113UL;9570424090918913UL;9570273764835328UL;9570497102675969UL;9570325304311808UL;9570394023329793UL;9570359663656960UL;9570157798817792UL;9570389728755713UL;9851705792528386UL;9851761627103234UL;9851628483117058UL;9851641368018946UL;9851654252920834UL;9851804576776194UL;9851692907626498UL;9851774512005122UL;9851688612659202UL;9851701497561090UL;9851649957953538UL;9851680022724610UL;9851645662986242UL;9851662842855426UL;9851714382462978UL;9851697202593794UL;9851791691874306UL;9851658547888130UL;9851675727757314UL;9851637073051650UL;9851684317691906UL;10133468528771075UL;10414638564376578UL;10414625679474690UL;10414604204638210UL;10414612794572802UL;10414608502947840UL;10414595614703618UL;10414741643591682UL;10414599909670914UL;10414629974441986UL;10414711578820610UL;10414655744245762UL;10414642859343874UL;10414724463722498UL;10414587024769026UL;10414591319736322UL;10414651449278466UL;10414647154311170UL;10414754528493570UL;10414578434834434UL;10414634269409282UL;10414664334180354UL;10696401305206785UL;10696405602271233UL;10696263866318848UL;10977674419109890UL;10977575634862082UL;10977588519763970UL;10977691598979074UL;10977549865058306UL;10977554160025602UL;10977584224796674UL;10977605699633154UL;10977562749960194UL;10977661534208002UL;10977541275123714UL;10977601404665858UL;10977579929829378UL;10977592814731266UL;10977528390221826UL;10977614289567746UL;10977536980156418UL;10977704483880962UL;10977545570091010UL;10977558454992898UL;10977597109698562UL;11259132212477954UL;11259110737641474UL;11259037723197442UL;11259136507445250UL;11540718860304385UL;11540783283765249UL;11540688795205632UL;11540581419515904UL;11540723155075073UL;11540697385402368UL;11540637255270400UL;11540693090107392UL;11540559945400320UL;11540568534548480UL;11540482635792384UL;11540577126252544UL;11540572830433280UL;11540727453253633UL;11540701678927873UL;11540714565730305UL;11540710270107649UL;11540684500631552UL;11822112234995714UL;11822043515518978UL;11822056400420866UL;11822047810486274UL;11822052105453570UL;11822095055126530UL;11822133709832194UL;11822318393425922UL;11822077875257346UL;11822163774603266UL;11822073580290050UL;11822172364537858UL;11822120824930306UL;11822116529963010UL;11822125119897602UL;11822146594734082UL;11822060695388162UL;11822069285322754UL;11822168069570562UL;11822159479635970UL;11822107940028418UL;11821957616173058UL;11822034925584386UL;12103561442623488UL;12103557146279938UL;12385036414484482UL;12385032119517186UL;12384937630236674UL;12666511391129602UL;12666507096162306UL;12666412606881794UL;12666515691077632UL;12947982077919232UL;13229542951747586UL;13229538656780290UL;13229422692663298UL;13229409807761410UL;13229487117172738UL;13229426987630594UL;13229547246714882UL;13229418397696002UL;13229431282597890UL;13229332498350082UL;13229534361812994UL;13511022222966786UL;13510901963882498UL;13511009338064898UL;13510906258849794UL;13510807474601986UL;13510893373947906UL;13511017927999490UL;13510884784013314UL;13510897668915202UL;13511013633032194UL;13510962093424642UL;13792492904841218UL;13792497199808514UL;13792376940724226UL;13792488609873922UL;13792282451443714UL;13792484314906626UL;13792372645756930UL;13792368350789634UL;13792437070266370UL;13792359760855042UL;13792381235691522UL;14073967881486338UL;14073963586519042UL;14073856212336642UL;14073959291551746UL;14073912046911490UL;14073834737500162UL;14073757428088834UL;14073851917369346UL;14073972176453634UL;14073847622402050UL;14073843327434754UL;14355434268524546UL;14355322599374850UL;14355309714472962UL;14355438563491842UL;14355447153426434UL;14355331189309442UL;14355232405061634UL;14355318304407554UL;14355326894342146UL;14355442858459138UL;14355387023884290UL;14636862000529410UL;14636793281052674UL;14636806165954562UL;14636913540136962UL;14636922130071554UL;14636909245169666UL;14636797576019970UL;14636707381706754UL;14636917835104258UL;14636801870987266UL;14636784691118082UL;14918268257697794UL;14918384221814786UL;14918281142599682UL;14918397106716674UL;14918392811749378UL;14918388516782082UL;14918336977174530UL;14918182358351874UL;14918259667763202UL;14918272552665090UL;14918276847632386UL;15199811952508928UL;15199957981003777UL;15199747527671808UL;15199902146035713UL;15199872082640896UL;15199863492444160UL;15199756116754432UL;15199734642638848UL;15199906445721601UL;15199897852313601UL;15199889262968833UL;15199893557542913UL;15199884967346177UL;15199859197870080UL;15199876376166401UL;15199867787345920UL;15199743231787008UL;15199751823491072UL;15199657333030912UL;15481231096217602UL;15481209621381122UL;15481347060334594UL;15481342765367298UL;15481226801250306UL;15481222506283010UL;15481338470400002UL;15481132311969794UL;15481334175432706UL;15481286930792450UL;15481218211315714UL;15762809151291392UL;15762761905930240UL;15762706070175744UL;15762813445865472UL;15762607286452224UL;15762834920767489UL;15762826329587713UL;15762822036062208UL;15762839216390145UL;15762701776912384UL;15762693185208320UL;15762843510964225UL;15762697481093120UL;15762684596060160UL;15762817740767232UL;15762907934425089UL;15762847809273857UL;16044082267881472UL;16325720449155072UL;16325647434514432UL;16325819233468417UL;16325759104712704UL;16325724745367552UL;16325806347321345UL;16325557239873536UL;16325771989483520UL;16325823532630017UL;16325767694188544UL;16325776283009025UL;16325814939746305UL;16325857887846401UL;16325711859351552UL;16325845002354689UL;16325793464385537UL;16325763399286784UL;16325673205891072UL;16325643138629632UL;16325651730333696UL;16325802052878337UL;16325780579745793UL;16325677499809792UL;16325789169811457UL;16325896543731713UL;16325810642681857UL;16325660318695424UL;16325797759156225UL;16325784874188801UL;16325694680334336UL;16325634549481472UL;16325656023597056UL;16325668909088768UL;16607204015603714UL;16607096641421314UL;16607100936388610UL;16607191130701826UL;16607079461552130UL;16607105231355906UL;16607045101813762UL;16607057986715650UL;16607027921944578UL;16607173950832642UL;16607040806846466UL;16607049396781058UL;16607113821290498UL;16607036511879170UL;16607083756519426UL;16607088051486722UL;16607075166584834UL;16607161065930754UL;16607092346454018UL;16607062281682946UL;16607053691748354UL;16888597387935744UL;16888709058134016UL;16888794955776001UL;16888752006299649UL;16888593092050944UL;16888644633755648UL;16888670402576384UL;16888846497153025UL;16888584502902784UL;16888618862510080UL;16888717647609856UL;16888743417806849UL;16888807841267713UL;16888661812772864UL;16888674698788864UL;16888739123232769UL;16888760596103169UL;16888713352708096UL;16888756300742657UL;16888769186889729UL;16888601683755008UL;16888773486116865UL;16888730533167105UL;16888726236430337UL;16888734827610113UL;16888721942904832UL;16888747712577537UL;16888627453231104UL;16888610272116736UL;16888764893167617UL;16888507193294848UL;16888605977018368UL;16888623159312384UL;17170012239691776UL;17451616065486848UL;17733292904546306UL;17733082451148802UL;18014669093732353UL;18014544540598272UL;18014501590597632UL;18014673392238593UL;18014523066155008UL;18014613259550720UL;18014497294778368UL;18014746403995649UL;18014694862618625UL;18014639030075393UL;18014626143272961UL;18014634734452737UL;18014621849747456UL;18014617554452480UL;18014656207585281UL;18014574605631488UL;18014484409745408UL;18014643324649473UL;18014527360073728UL;18014608964976640UL;18014566013730818UL;18014561719615488UL;18014492998893568UL;18014630440009729UL;18014651913142273UL;18014664800010241UL;18014647619420161UL;18014681983090689UL;18014510178959360UL;18014518769352704UL;18014759292567553UL;18014660502945793UL;18014707748110337UL;18014407100137472UL;18014505883860992UL;18014570309419008UL;18295972272472066UL;18295882078158850UL;18296036696981506UL;18296092531556354UL;18295967977504770UL;18296088236589058UL;18295976567439362UL;18296096826523650UL;18295980862406658UL;18295959387570178UL;18296083941621762UL;18577442952314880UL;18577657701531649UL;18577571803168768UL;18577357053558784UL;18577584687874049UL;18577455837282304UL;18577588983496705UL;18577567507873792UL;18577576096694273UL;18577593281937409UL;18577447248199680UL;18577451544018944UL;18577511673036800UL;18577434363166720UL;18577563212972032UL;18577558918397952UL;18858926520926210UL;18858832031645698UL;18859046780010498UL;18858922225958914UL;18859033895108610UL;18859042485043202UL;18858917930991618UL;18859038190075906UL;18858930815893506UL;18858909341057026UL;18858986650468354UL;19140405792210946UL;19140401497243650UL;19140397202276354UL;19140508871426050UL;19140521756327938UL;19140517461360642UL;19140461626785794UL;19140307007963138UL;19140513166393346UL;19140392907309058UL;19140384317374466UL;19421996733104130UL;19421880768987138UL;19421983848202242UL;19421876474019842UL;19421936603561986UL;19421992438136834UL;19421872179052546UL;19421781984739330UL;19421867884085250UL;19421859294150658UL;19421988143169538UL;19703342860861442UL;19703463119945730UL;19703355745763330UL;19703471709880322UL;19703411580338178UL;19703467414913026UL;19703334270926850UL;19703458824978434UL;19703256961515522UL;19703351450796034UL;19703347155828738UL;19984938096525312UL;19984809246720000UL;19984963870588929UL;19984946686722048UL;19984886556590080UL;19984959571427329UL;19984950980247553UL;19984822131752960UL;19984830720835584UL;19984942391427072UL;19984731937112064UL;19984933801951232UL;19984817835868160UL;19985032585084929UL;19984826427572224UL;20266550513369089UL;20266486092005377UL;20266413074481152UL;20266554808270849UL;20547823629828096UL;20829285721702400UL;20829315784179714UL;20829298604310530UL;21110730627678208UL;21110631843954688UL;21110859482726401UL;21110833708793856UL;21110709153562624UL;21110717742710784UL;21110726334414848UL;21110786463432704UL;21110850887090177UL;21110838003367936UL;21110846593564672UL;21110842298269696UL;21110932491927553UL;21110722038595584UL;21392136891006976UL;21673740712804354UL;21673586093981698UL;21673598978883586UL;21673654814769152UL;21673650518491138UL;21673629043654658UL;21673723532935170UL;21673577504047106UL;21673633338621954UL;21673603273850882UL;21673641928556546UL;21673624748687362UL;21673607568818178UL;21673753597706242UL;21673637633589250UL;21673594683916290UL;21673710648033282UL;21673646223523842UL;21673611863785474UL;21673663403393026UL;21673590388948994UL;21955335952596993UL;21955404668534785UL;21955400373633025UL;21955262934745088UL;22236643420012544UL;22236871058915329UL;22236647716814848UL;22236652010733568UL;22518273021313025UL;22518230067380225UL;22518109806329856UL;22518238657445889UL;22518084037115904UL;22518221477117952UL;22518006727507968UL;22518303086018561UL;22518255834955777UL;22518264427380737UL;22518118396723200UL;22518096922148864UL;22518247246790657UL;22518105511231488UL;22518092626264064UL;22518152762294272UL;22518346031366145UL;22518234361823233UL;22518169936789504UL;22518126987444224UL;22518242952019969UL;22518174233001984UL;22518268721102849UL;22518122693525504UL;22518260130316289UL;22518101217968128UL;22518294489989121UL;22518144167968768UL;22518212886921216UL;22518251540512769UL;22518307375480833UL;22518225770643457UL;22518217181822976UL;22518161346985984UL;22518208592347136UL;22799653504679938UL;22799537540562946UL;22799498885857282UL;22799546130497538UL;22799494590889986UL;22799533245595650UL;22799550425661440UL;22799541835530242UL;22799528950628354UL;22799554720432130UL;22799524655661058UL;22799640619778050UL;22799477411020802UL;22799563310366722UL;22799610555006978UL;22799623439908866UL;22799486000955394UL;22799511770759170UL;22799503180824578UL;22799507475791874UL;22799490295922690UL;23080999632109570UL;23080952387469314UL;23080965274533888UL;23081265922179073UL;23081003927076866UL;23081016811978754UL;23081038286815234UL;23080973862305794UL;23081025401913346UL;23081085531455490UL;23081012517011458UL;23081098416357378UL;23080960979435520UL;23081128481128450UL;23081021106946050UL;23081008222044162UL;23080978157273090UL;23080982452240386UL;23080986747207682UL;23081115596226562UL;23080969567338498UL;23081029696880642UL;23362435952607234UL;23362448837509122UL;23362603456331778UL;23362457427443714UL;23362491787182082UL;23362590571429890UL;23362496082149378UL;23362504672083970UL;23362440247574530UL;23362427362672642UL;23362560506658818UL;23362487492214786UL;23362461722411010UL;23362483197247490UL;23362500377116674UL;23362513262018562UL;23362478902280194UL;23362444542541826UL;23362474607312898UL;23362453132476418UL;23362573391560706UL;23644065554104320UL;23925540530880512UL;24207195891630081UL;24207092812283905UL;24207101400776705UL;24207105695219713UL;24207011207249920UL;24206933897379840UL;24206951078232064UL;24206959666593792UL;24206976847708160UL;24206856587771904UL;24207058452611072UL;24207097107054593UL;24207062747185152UL;24207067042086912UL;24207084222087169UL;24206942486528000UL;24207079932166145UL;24206972553789440UL;24207109990580225UL;24207157235744769UL;24206968256987136UL;24207075630907393UL;24207071337381888UL;24206955371495424UL;24206946782412800UL;24207088517709825UL;24488335859122178UL;24488378808795138UL;24488327269187586UL;24488413168533506UL;24488503362846722UL;24488395988664322UL;24488473298075650UL;24488383103762434UL;24488404578598914UL;24488460413173762UL;24488348744024066UL;24488490477944834UL;24488361628925954UL;24488387398729730UL;24488353038991362UL;24488391693697026UL;24488344449056770UL;24488357333958658UL;24488400283631618UL;24488340154089474UL;24488374513827842UL;24769965454852098UL;25051440437854208UL;25332838100238338UL;25332786560630786UL;25332752200892418UL;25332915409649666UL;25333061441224705UL;25332812330434562UL;25332777973317632UL;25332773678284800UL;25332885344878594UL;25332765085794306UL;25332799445532674UL;25332782265663490UL;25332808035467266UL;25332928294551554UL;25332825215336450UL;25332820920369154UL;25332760790827010UL;25332829510303746UL;25332898229780482UL;25332769383251968UL;25332816625401858UL;25332803740499970UL;25614235767209986UL;25614274421915650UL;25614300191719426UL;25614248652111874UL;25614287306817538UL;25614360321261570UL;25614261537013762UL;25614257245323264UL;25614373206163458UL;25614252947079170UL;25614227177275394UL;25614291601784834UL;25614390386032642UL;25614244357144578UL;25614304486686722UL;25614283011850242UL;25614240062177282UL;25614403270934530UL;25614278716882946UL;25614295896752130UL;25614313076621314UL;25895831008313344UL;26177254442401794UL;26177190017892354UL;26177250147434498UL;26177241557499906UL;26177232967565314UL;26177202902794242UL;26177353226649602UL;26177207197761538UL;26177245852467202UL;26177323161878530UL;26177198607826946UL;26177211492728834UL;26177340341747714UL;26177310276976642UL;26177263032336386UL;26177194312859650UL;26177228672598018UL;26177237262532610UL;26177185722925058UL;26177224377630722UL;26177177132990466UL;26458914101329921UL;26458901214461953UL;26458759480279040UL;26458918395052033UL;26458944163938305UL;26458905508904961UL;26458888331395073UL;26458931285655553UL;26458884035772417UL;26458776661393408UL;26458922693558273UL;26458772367474688UL;26458750891917312UL;26458909804265473UL;26458858266296320UL;26458768070672384UL;26458995705315329UL;26458866855772160UL;26458823906951168UL;26458793841917952UL;26458892625969153UL;26458656401457152UL;26458879741329409UL;26458811020935168UL;26458733711065088UL;26458819610738688UL;26458755185180672UL;26458957049430017UL;26458896920739841UL;26458871151067136UL;26458746596098048UL;26458862560870400UL;26458742300213248UL;26458875444592641UL;26740148558823426UL;26740182918561794UL;26740174328627202UL;26740161443725314UL;26740260227973122UL;26740290292744194UL;26740152853790722UL;26740195803463682UL;26740157148758018UL;26740144263856130UL;26740139968888834UL;26740303177646082UL;26740212983332866UL;26740191508496386UL;26740187213529090UL;26740200098430978UL;26740204393398274UL;26740178623594498UL;26740273112875010UL;26740127083986946UL;26740135673921538UL;27021696549519360UL;27021945658736641UL;27021846874161153UL;27021726614814720UL;27021859757686785UL;27021851167883265UL;27021606354878464UL;27021829699534849UL;27021683664486400UL;27021808219717632UL;27021842579390465UL;27021907002851329UL;27021825398013953UL;27021722320896000UL;27021709433700352UL;27021855462326273UL;27021833989193729UL;27021718024093696UL;27021838284816385UL;27021812514291712UL;27021692253634560UL;27021705138601984UL;27021821104488448UL;27021760974356480UL;27021700845338624UL;27021816809193472UL;27303205888589826UL;27584680861958146UL;27584685156925442UL;27584586372677634UL;27866026992467970UL;27866173021356034UL;27866061352206338UL;27866095711944706UL;27866048467304450UL;27866044172337154UL;27866057057239042UL;27866190201225218UL;27866052762271746UL;27866039877369858UL;27866082827042818UL;27866160136454146UL;27866074237108226UL;27866104301879298UL;27866035582402562UL;27866078532075522UL;27866203086127106UL;27866087122010114UL;27866091416977410UL;27866100006912002UL;27866112891813890UL;28147549214736386UL;28147574984540162UL;28147514854998018UL;28147587869442050UL;28147566394605570UL;28147562099638274UL;28147523444932610UL;28147579279507458UL;28147553509703682UL;28147532034867202UL;28147510560030722UL;28147665178853378UL;28147501970096130UL;28147678063755266UL;28147570689572866UL;28147519149965314UL;28147527739899906UL;28147536329834498UL;28147557804670978UL;28147647998984194UL;28147635114082306UL;28429075728891904UL;28429281886404609UL;28429226051436545UL;28429135857909760UL;28429092907646976UL;28429118678892544UL;28429303361765377UL;28429299072434177UL;28429316245815297UL;28428981238431744UL;28429213168369665UL;28429200281567233UL;28429084317253632UL;28429071433072640UL;28429234641240065UL;28429264706994177UL;28429067137187840UL;28429191692746752UL;28429080022155264UL;28429269000912897UL;28429247525945345UL;28429157332221952UL;28429238938304513UL;28429217462943745UL;28429230345879553UL;28429170217451520UL;28429187397844992UL;28429243232026625UL;28429320542289921UL;28429208872747009UL;28429311951306753UL;28429097204449280UL;28429221757714433UL;28429058548039680UL;28429183103270912UL;28429144447713280UL;28429195988041728UL;28429148743925760UL;28429101498368000UL;28429204578304001UL;28710610834620416UL;28710722509733889UL;28710554998865920UL;28710688145080321UL;28710542113898496UL;28710593655603200UL;28710675258277889UL;28710748279406593UL;28710743977623553UL;28710662374555648UL;28710623720636416UL;28710679555014657UL;28710576475078656UL;28710658079981568UL;28710713915015169UL;28710666669457408UL;28710533524750336UL;28710670964752384UL;28710701028147201UL;28710709617950721UL;28710619424423936UL;28710572181159936UL;28710718208737281UL;28710546409783296UL;28710602250584064UL;28710795519000577UL;28710550705602560UL;28710756863115265UL;28710705322590209UL;28710683849457665UL;28710696734425089UL;28710559293964288UL;28710567884357632UL;28710456215142400UL;28710692439654401UL;28992184594661377UL;28992051451789312UL;28992145941463040UL;28992034270674944UL;28992270495711233UL;28992193185447937UL;28992137351266304UL;28992029975576576UL;28992047157870592UL;28992218954334209UL;28992068632313856UL;28992163121790977UL;28992017090609152UL;28992154531725313UL;28992158826168321UL;28992025682313216UL;28992042861068288UL;28992094401134592UL;28992133056692224UL;28992197486444545UL;28992231839825921UL;28992077227294720UL;28992085811331072UL;28992180299300865UL;28991931191853056UL;28992171711135745UL;28992098697347072UL;28992188891725825UL;28992150234988545UL;28992008501460992UL;28992223256313857UL;28992176004857857UL;28992021386493952UL;28992167416365057UL;28992141646168064UL;29273577974005760UL;29554911209979906UL;29554885440176130UL;29554949864685570UL;29554928389849090UL;29555052943900674UL;29554902620045314UL;29554932684816386UL;29554941274750978UL;29554945569718274UL;29555009994227714UL;29555022879129602UL;29554962749587458UL;29555040058998786UL;29554924094881794UL;29554906915012610UL;29554889735143426UL;29554954159652866UL;29554898325078018UL;29554936979783682UL;29554876850241538UL;29554894030110722UL;29836656769957889UL;29836472088002560UL;29836433431592960UL;29836510741463040UL;29836562281398272UL;29836575165120513UL;29836523627479040UL;29836459200806912UL;29836476381921280UL;29836557986824192UL;29836454905708544UL;29836493562445824UL;29836566576300032UL;29836467791200256UL;29836570871595008UL;29836643884466177UL;29836588051922945UL;29836600934989825UL;29836609524793345UL;29836442020741120UL;29836613821857793UL;29836622415790081UL;29836695425843201UL;29836579461857281UL;29836446316625920UL;29836652481544193UL;29836618115579905UL;29836519331266560UL;29836502156771328UL;29836605229432833UL;29836596641267713UL;29836450612445184UL;29836583756300289UL;29836356121985024UL;29836592346497025UL;30117972835696642UL;30117990015565826UL;30399366207700994UL;30399314668093442UL;30399327552995330UL;30399374797635586UL;30399387682537474UL;30399464991948802UL;30399353322799106UL;30399310373126146UL;30399323258028034UL;30399336142929922UL;30399331847962626UL;30399370502668290UL;30399379092602882UL;30399301783191554UL;30399318963060738UL;30399477876850690UL;30399447812079618UL;30399434927177730UL;30399361912733698UL;30399357617766402UL;30399349027831810UL;30680931382853632UL;30962436424400896UL;31243907099328512UL;31244018768019457UL;31243932870377472UL;31243958639853569UL;31244061718413313UL;31243954345410561UL;31243980112986113UL;31243984408346625UL;31243967230050305UL;31243885625016320UL;31243950048673793UL;31243898511032320UL;31243816904294400UL;31243808315146240UL;31243842674753536UL;31244031653511169UL;31243971524820993UL;31243868445999104UL;31244066012921857UL;31243975818543105UL;31243731005538304UL;31243821200179200UL;31243825495998464UL;31243846971555840UL;31243894214819840UL;31244053128871937UL;31243988705411073UL;31243851265474560UL;31243919984558080UL;31243997293051905UL;31243834084360192UL;31243829789261824UL;31243962935476225UL;31244048840130561UL;31243937164951552UL;31243992999133185UL;31244014474100737UL;31244070309396481UL;31243945755148288UL;31243941459853312UL;31525201694359552UL;31806771156811778UL;31806891415896066UL;31806779746746370UL;31806784041713666UL;31806831286353922UL;31806839876288514UL;31806818401452034UL;31806775451779074UL;31806887120928770UL;31806792631648258UL;31806758271909890UL;31806796926615554UL;31806844171255810UL;31806869941059586UL;31806882825961474UL;31807041739751426UL;31806848466223106UL;31806680962498562UL;31806835581321218UL;31806857056157698UL;31806801221582850UL;31806766861844482UL;31806895710863362UL;32088233245278208UL;32088387865608193UL;32088405043118081UL;32088310555148288UL;32088259014492160UL;32088456583643137UL;32088276195606528UL;32088495239528449UL;32088374978805761UL;32088379281113089UL;32088383569985537UL;32088246130311168UL;32088396454952961UL;32088241834426368UL;32088409338478593UL;32088357800509440UL;32088392160182273UL;32088362095083520UL;32088254719393792UL;32088400748675073UL;32088155935670272UL;32088250426130432UL;32088370685280256UL;32088271901687808UL;32088366389985280UL;32088267604885504UL;32369802713563138UL;32369699634348034UL;32369682454478850UL;32369678159511554UL;32369686749446146UL;32369691044413442UL;32369648094740482UL;32369673864544258UL;32369643799773186UL;32369759763890178UL;32369652389707778UL;32369703929315330UL;32369789828661250UL;32369635209838594UL;32369639504805890UL;32369712519249922UL;32369656684675074UL;32369695339380738UL;32369626619904002UL;32369772648792066UL;32369660979642370UL;32651157431975938UL;32651153137008642UL;32651118777270274UL;32651114482302978UL;32651161726943234UL;32651187496747010UL;32651101597401090UL;32651148842041346UL;32651135957139458UL;32651127367204866UL;32651178906812418UL;32651123072237570UL;32651170316877826UL;32651277691060226UL;32651110187335682UL;32651131662172162UL;32651264806158338UL;32651174611845122UL;32651234741387266UL;32651166021910530UL;32651247626289154UL;32932696831819776UL;32932838565675009UL;32932748371296256UL;32932782730641408UL;32932787025215488UL;32932812795740161UL;32932804205674497UL;32932817090314241UL;32932834268610561UL;32932842859397121UL;32932795615412224UL;32932791320117248UL;32932872930787329UL;32932679649525760UL;32932829973250049UL;32932671060443136UL;32932735485280256UL;32932825678807041UL;32932692535017472UL;32932881513775105UL;32932658175410176UL;32932868628283393UL;32932701125738496UL;32932675356262400UL;32932847160393729UL;32932718306263040UL;32932726901243904UL;32932666764558336UL;32932808500117505UL;32932920169660417UL;32932683944624128UL;32932821385084929UL;32932744075083776UL;32932580865802240UL;32932799908937729UL;33214206173642752UL;33495633901846530UL;33495651081715714UL;33495629606879234UL;33495706916290562UL;33495530822631426UL;33495719801192450UL;33495891599884290UL;33495741276028930UL;33495745570996226UL;33495685441454082UL;33495621016944642UL;33495642491781122UL;33495646786748418UL;33495689736421378UL;33495711211257858UL;33495698326355970UL;33495736981061634UL;33495732686094338UL;33495608132042754UL;33495668261584898UL;33495625311911938UL;33495681146486786UL;33495694031388674UL;33495616721977346UL;33777031568359426UL;33777027273392130UL;33777022978424834UL;33777018683457538UL;33777001503588354UL;33777053043195906UL;33777164712345602UL;33777074518032386UL;33777057338163202UL;33777177597247490UL;33777048748228610UL;33777065928097794UL;33777134647574530UL;33777147532476418UL;33777010093522946UL;33777035863326722UL;33777078812999682UL;33777061633130498UL;33777014388490242UL;33777087402934274UL;33777070223065090UL;34058639690039298UL;34058592445399042UL;34058669754810370UL;34058682639712258UL;34058570970562562UL;34058566675595266UL;34058656869908482UL;34058695524614146UL;34058643985006594UL;34058575265529858UL;34058583855464450UL;34058579560497154UL;34058480776249346UL;34058841553502210UL;34058631100104706UL;34058648279973890UL;34058596740366338UL;34058691229646850UL;34058601035333634UL;34058686934679554UL;34058618215202818UL;34058558085660674UL;34058635395072002UL;34340041652174850UL;34340131846488066UL;34340033062240258UL;34340114666618882UL;34340136141455362UL;34340045947142146UL;34340058832044034UL;34340123256553474UL;34340050242109442UL;34340054537076738UL;34340093191782402UL;34340071716945922UL;34340316530081794UL;34340110371651586UL;34340144731389954UL;34340118961586178UL;34340067421978626UL;34340170501193730UL;34340161911259138UL;34340166206226434UL;34340157616291842UL;34340106076684290UL;34340076011913218UL;34339955752828930UL; |];


//Enum for return values 
type FLTypeDUnion = | Enumvariant_5 of float | Enumvariant_34 of lltype | Enumvariant_20 of (lltype*string) list | Enumvariant_21 of LBox<expr> list | Enumvariant_1 of unit | Enumvariant_28 of String | Enumvariant_39 of LBox<expr> list option | Enumvariant_2 of int*int | Enumvariant_0 of expr | Enumvariant_3 of string | Enumvariant_36 of (lltype*string) | Enumvariant_4 of int ;;

let _rrsemaction_0_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLint 

let _rrsemaction_1_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLstring 

let _rrsemaction_2_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLfloat 

let _rrsemaction_3_(parser:RTParser<FLTypeDUnion,unit>, v:string) =  (LLunknown, v) 

let _rrsemaction_4_(parser:RTParser<FLTypeDUnion,unit>, x:(lltype*string)) =  x 

let _rrsemaction_5_(parser:RTParser<FLTypeDUnion,unit>, v:string, _item1_:expr, t:lltype) =  (t,v) 

let _rrsemaction_6_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_7_(parser:RTParser<FLTypeDUnion,unit>, x:string) =  Var(x) 

let _rrsemaction_8_(parser:RTParser<FLTypeDUnion,unit>) =  None 

let _rrsemaction_9_(parser:RTParser<FLTypeDUnion,unit>, _item0_:LBox<expr> list) =  Some(_item0_) 

let _rrsemaction_10_(parser:RTParser<FLTypeDUnion,unit>, x:string, _item1_:expr, l:LBox<expr> list option, _item3_:expr) = Apply(x, l)

let _rrsemaction_11_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:string, _item2_:expr) =  Strlit(x) 

let _rrsemaction_12_(parser:RTParser<FLTypeDUnion,unit>, x:int) =  Integer(x) 

let _rrsemaction_13_(parser:RTParser<FLTypeDUnion,unit>, x:float) =  Floatpt(x) 

let _rrsemaction_14_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  Nil 

let _rrsemaction_15_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_16_(parser:RTParser<FLTypeDUnion,unit>, e:String, x:expr) =  Uniop(e,x) 

let _rrsemaction_17_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "not" 

let _rrsemaction_18_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "~" 

let _rrsemaction_19_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "car" 

let _rrsemaction_20_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cdr" 

let _rrsemaction_21_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "display" 

let _rrsemaction_22_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_23_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("^",x,y) 

let _rrsemaction_24_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_25_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_26_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "*" 

let _rrsemaction_27_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "/" 

let _rrsemaction_28_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "%" 

let _rrsemaction_29_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_30_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_31_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "+" 

let _rrsemaction_32_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "-" 

let _rrsemaction_33_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_34_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("and" ,x,y) 

let _rrsemaction_35_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_36_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("or",x,y) 

let _rrsemaction_37_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_38_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_39_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "=" 

let _rrsemaction_40_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "neq" 

let _rrsemaction_41_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "eq" 

let _rrsemaction_42_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<=" 

let _rrsemaction_43_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">=" 

let _rrsemaction_44_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<" 

let _rrsemaction_45_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">" 

let _rrsemaction_46_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cons" 

let _rrsemaction_47_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_48_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, v:(lltype*string) list, _item2_:expr, x:LBox<expr>) =  TypedLambda(v,LLunknown,x) 

let _rrsemaction_49_(parser:RTParser<FLTypeDUnion,unit>, t:lltype, _item1_:expr, v:(lltype*string) list, _item3_:expr, x:LBox<expr>) =  TypedLambda(v,t,x) 

let _rrsemaction_50_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_51_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr, _item4_:expr, y:LBox<expr>) = TypedLet(d,x,y)

let _rrsemaction_52_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_53_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr) = TypedDefine(d,x)

let _rrsemaction_54_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_55_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_56_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string), _item1_:expr, seq:(lltype*string) list) =  e::seq 

let _rrsemaction_57_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string)) =  [e] 

let _rrsemaction_58_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, _item1_:expr, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_59_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_60_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:LBox<expr> list, _item2_:expr) =  ListLiteral(x) 

let _rrsemaction_61_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_62_(parser:RTParser<FLTypeDUnion,unit>, x:expr) = x

let _rrsemaction_63_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) = x

let _rrsemaction_64_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_65_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:expr, _item3_:expr, x:expr) =  Whileloop(p,x) 

let _rrsemaction_66_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:expr, _item3_:expr, x:expr, _item5_:expr, y:expr) =  Ifelse(p,x,y)

let _rrsemaction_67_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) =  x 

let _rrsemaction_68_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_69_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_70_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_71_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_72_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<expr> list) =  CodeBlock(x) 

let _rrsemaction_73_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =   Unchecked.defaultof<unit>

let make_parser() : RTParser<FLTypeDUnion,unit> =
  let parser1 = skeleton_parser(Unchecked.defaultof<unit>,74,123)
  let mutable rule = skeleton_production("")
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_34(_rrsemaction_0_(parser,_item0_)));
  parser1.Rules.[0] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_34(_rrsemaction_1_(parser,_item0_)));
  parser1.Rules.[1] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_34(_rrsemaction_2_(parser,_item0_)));
  parser1.Rules.[2] <- rule;
  rule <- skeleton_production("UNTYPED_PREFIX")
  rule.action <- fun parser ->
    (let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_3(_rr_3) ->  _rr_3 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_36(_rrsemaction_3_(parser,v)));
  parser1.Rules.[3] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_36(_rr_36) ->  _rr_36 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_36(_rrsemaction_4_(parser,x)));
  parser1.Rules.[4] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_34(_rr_34) ->  _rr_34 | _ -> Unchecked.defaultof<lltype>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_3(_rr_3) ->  _rr_3 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_36(_rrsemaction_5_(parser,v,_item1_,t)));
  parser1.Rules.[5] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_6_(parser,_item0_,x,_item2_)));
  parser1.Rules.[6] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_3(_rr_3) ->  _rr_3 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_7_(parser,x)));
  parser1.Rules.[7] <- rule;
  rule <- skeleton_production("NEWRENT_8_0")
  rule.action <- fun parser ->
    ( FLTypeDUnion.Enumvariant_39(_rrsemaction_8_(parser)));
  parser1.Rules.[8] <- rule;
  rule <- skeleton_production("NEWRENT_8_0")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<LBox<expr> list>) in  FLTypeDUnion.Enumvariant_39(_rrsemaction_9_(parser,_item0_)));
  parser1.Rules.[9] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let l = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_39(_rr_39) ->  _rr_39 | _ -> Unchecked.defaultof<LBox<expr> list option>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_3(_rr_3) ->  _rr_3 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_10_(parser,x,_item1_,l,_item3_)));
  parser1.Rules.[10] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_3(_rr_3) ->  _rr_3 | _ -> Unchecked.defaultof<string>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_11_(parser,_item0_,x,_item2_)));
  parser1.Rules.[11] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_4(_rr_4) ->  _rr_4 | _ -> Unchecked.defaultof<int>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_12_(parser,x)));
  parser1.Rules.[12] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_5(_rr_5) ->  _rr_5 | _ -> Unchecked.defaultof<float>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_13_(parser,x)));
  parser1.Rules.[13] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_14_(parser,_item0_)));
  parser1.Rules.[14] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_15_(parser,x)));
  parser1.Rules.[15] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_28(_rr_28) ->  _rr_28 | _ -> Unchecked.defaultof<String>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_16_(parser,e,x)));
  parser1.Rules.[16] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_17_(parser,_item0_)));
  parser1.Rules.[17] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_18_(parser,_item0_)));
  parser1.Rules.[18] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_19_(parser,_item0_)));
  parser1.Rules.[19] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_20_(parser,_item0_)));
  parser1.Rules.[20] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_21_(parser,_item0_)));
  parser1.Rules.[21] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_22_(parser,x)));
  parser1.Rules.[22] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_23_(parser,x,_item1_,y)));
  parser1.Rules.[23] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_24_(parser,x)));
  parser1.Rules.[24] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_28(_rr_28) ->  _rr_28 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_25_(parser,x,e,y)));
  parser1.Rules.[25] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_26_(parser,_item0_)));
  parser1.Rules.[26] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_27_(parser,_item0_)));
  parser1.Rules.[27] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_28_(parser,_item0_)));
  parser1.Rules.[28] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_29_(parser,x)));
  parser1.Rules.[29] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_28(_rr_28) ->  _rr_28 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_30_(parser,x,e,y)));
  parser1.Rules.[30] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_31_(parser,_item0_)));
  parser1.Rules.[31] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_32_(parser,_item0_)));
  parser1.Rules.[32] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_33_(parser,x)));
  parser1.Rules.[33] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_34_(parser,x,_item1_,y)));
  parser1.Rules.[34] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_35_(parser,x)));
  parser1.Rules.[35] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_36_(parser,x,_item1_,y)));
  parser1.Rules.[36] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_37_(parser,x)));
  parser1.Rules.[37] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_28(_rr_28) ->  _rr_28 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_38_(parser,x,e,y)));
  parser1.Rules.[38] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_39_(parser,_item0_)));
  parser1.Rules.[39] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_40_(parser,_item0_)));
  parser1.Rules.[40] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_41_(parser,_item0_)));
  parser1.Rules.[41] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_42_(parser,_item0_)));
  parser1.Rules.[42] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_43_(parser,_item0_)));
  parser1.Rules.[43] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_44_(parser,_item0_)));
  parser1.Rules.[44] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_45_(parser,_item0_)));
  parser1.Rules.[45] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_28(_rrsemaction_46_(parser,_item0_)));
  parser1.Rules.[46] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_47_(parser,x)));
  parser1.Rules.[47] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_20(_rr_20) ->  _rr_20 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_48_(parser,_item0_,v,_item2_,x)));
  parser1.Rules.[48] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_20(_rr_20) ->  _rr_20 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_34(_rr_34) ->  _rr_34 | _ -> Unchecked.defaultof<lltype>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_49_(parser,t,_item1_,v,_item3_,x)));
  parser1.Rules.[49] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_50_(parser,x)));
  parser1.Rules.[50] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let y_sitem = parser.Pop() in let y_val = (match y_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let y = lbox(y_val,y_sitem.line,y_sitem.column) in let _item4_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_36(_rr_36) ->  _rr_36 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_51_(parser,_item0_,d,_item2_,x,_item4_,y)));
  parser1.Rules.[51] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_52_(parser,x)));
  parser1.Rules.[52] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_36(_rr_36) ->  _rr_36 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_53_(parser,_item0_,d,_item2_,x)));
  parser1.Rules.[53] <- rule;
  rule <- skeleton_production("EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_54_(parser,x)));
  parser1.Rules.[54] <- rule;
  rule <- skeleton_production("EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_55_(parser,x)));
  parser1.Rules.[55] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_20(_rr_20) ->  _rr_20 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_36(_rr_36) ->  _rr_36 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_20(_rrsemaction_56_(parser,e,_item1_,seq)));
  parser1.Rules.[56] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_36(_rr_36) ->  _rr_36 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_20(_rrsemaction_57_(parser,e)));
  parser1.Rules.[57] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_58_(parser,e,_item1_,seq)));
  parser1.Rules.[58] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_59_(parser,e)));
  parser1.Rules.[59] <- rule;
  rule <- skeleton_production("LIST_LITERAL")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_60_(parser,_item0_,x,_item2_)));
  parser1.Rules.[60] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_61_(parser,_item0_,x,_item2_)));
  parser1.Rules.[61] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_62_(parser,x)));
  parser1.Rules.[62] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_63_(parser,x,_item1_)));
  parser1.Rules.[63] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_64_(parser,_item0_,x,_item2_)));
  parser1.Rules.[64] <- rule;
  rule <- skeleton_production("LOOP_STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_65_(parser,_item0_,_item1_,p,_item3_,x)));
  parser1.Rules.[65] <- rule;
  rule <- skeleton_production("SELECT_STATEMENT")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item5_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_66_(parser,_item0_,_item1_,p,_item3_,x,_item5_,y)));
  parser1.Rules.[66] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_67_(parser,x,_item1_)));
  parser1.Rules.[67] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_68_(parser,x)));
  parser1.Rules.[68] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_69_(parser,x)));
  parser1.Rules.[69] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<LBox<expr> list>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_70_(parser,e,seq)));
  parser1.Rules.[70] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_71_(parser,e)));
  parser1.Rules.[71] <- rule;
  rule <- skeleton_production("PROGRAM")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<LBox<expr> list>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_72_(parser,x)));
  parser1.Rules.[72] <- rule;
  rule <- skeleton_production("START")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_1(_rrsemaction_73_(parser,_item0_)));
  parser1.Rules.[73] <- rule;

  for i in 0..1904 do
    let (sti,symi,action) = decode_action(TABLE.[i])
    parser1.RSM.[sti].Add(SYMBOLS.[symi],action)
  for s in SYMBOLS do ignore (parser1.Symset.Add(s));
  parser1;;

let convert_token (lt:RawToken) =
  if lt=null then None
  else
    let (uval,utype) = 
      match lt.token_name with
        | "Alphanum" -> (FLTypeDUnion.Enumvariant_3((fun x-> x)(lt.token_text)),"VAR")
        | "Num" -> (FLTypeDUnion.Enumvariant_4(int(lt.token_text)),"INTEGER_LITERAL")
        | "Float" -> (FLTypeDUnion.Enumvariant_5(float(lt.token_text)),"FLOAT_LITERAL")
        | "float" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FLOAT")
        | "/" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DIVIDE")
        | "%" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MODULO")
        | "=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQUALS")
        | "eq" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQ")
        | "||" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"OR")
        | "<" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LT")
        | ":" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COLON")
        | "}" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RCURLY")
        | ")" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RPAREN")
        | "in" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IN")
        | "else" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"ELSE")
        | "^" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EXPONENT")
        | "not" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOT")
        | ">" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GT")
        | "(" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LPAREN")
        | "-" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUS")
        | "<=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LTE")
        | "," -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COMMA")
        | "define" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DEFINE")
        | "lambda" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LAMBDA")
        | "while" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"WHILE")
        | "~" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TILDA")
        | "&&" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"AND")
        | "cons" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CONS")
        | "]" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RBRACKET")
        | "+" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUS")
        | "cdr" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CDR")
        | "car" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CAR")
        | "if" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IF")
        | "{" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LCURLY")
        | "boolean" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"BOOLEAN")
        | "neq" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOTEQ")
        | "true" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TRUE")
        | "." -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DOT")
        | ">=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GTE")
        | "display" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DISPLAY")
        | "nil" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NIL")
        | "[" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LBRACKET")
        | "--" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUSMINUS")
        | "for" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FOR")
        | "*" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TIMES")
        | "++" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUSPLUS")
        | "int" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"INT")
        | "let" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LET")
        | "String" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"STRING")
        | "false" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FALSE")
        | ";" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),";")
        | "'" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"'")
        | "EOF" -> (FLTypeDUnion.Enumvariant_1(Unchecked.defaultof<unit>),"EOF")
        | x -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"Error:"+x)
    Some({TerminalToken.sym=utype; svalue=uval; line=lt.line; column=lt.column;});;

let parse_with(parser:RTParser<FLTypeDUnion,unit>, lexer:AbstractLexer<unit>) : expr option  =
  lexer.set_shared(parser.exstate)
  parser.NextToken <- fun () -> convert_token(lexer.next_lt())
  match parser.parse_core() with
    | Some(FLTypeDUnion.Enumvariant_0(_yyxres_)) -> Some(_yyxres_)
    | _ -> None;;

