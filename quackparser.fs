//F# Parser generated by Rustlr for grammar quack
    
module Quack
open System;
open System.Collections.Generic;
open Fussless;
open Fussless.RuntimeParser;
//AST modifications
// 1. Sequences are now Applys
// 2. Code blocks are now a thing
// 3. BeginSeq's are ListLiterals and have different syntax
// 4. Vars are now  be LBox'ed
// 5. While/If Conditions are now LBox'ed
type expr =
  |Integer of int
  | Floatpt of float
  | Strlit of string
  | Var of LBox<string>
  | Nil
  | Binop of string*expr*expr
  | Uniop of string*expr
  | Ifelse of LBox<expr>*expr*expr
  | Whileloop of LBox<expr>*expr
  | Define of LBox<string>*expr
  | TypedDefine of LBox<lltype*string>*expr
  | Lambda of (string list)*expr
  | TypedLambda of ((lltype*string) list)*lltype*LBox<expr>
  | Let of LBox<string>*expr*LBox<expr>
  | TypedLet of LBox<lltype*string>*expr*LBox<expr>
  | Quote of expr
  | Setq of LBox<string>*expr
  | Apply of LBox<string> * LBox<expr> list
  | ListLiteral of LBox<expr> list
  | CodeBlock of LBox<expr> list
  // type expressions
  | TypeExpr of lltype
  | TypedVal of (lltype*expr) 
  | Label of string   // not a proper expression - just a temporary
  | Error
 and lltype =  // abstract syntax for type expressions
  | LLint | LLfloat | LLstring
  | LList of lltype | LLtuple of lltype list
  | LLfun of (lltype list)*lltype
  | LLunknown | LLuntypable | LLvar of string | LLunit
//-------------------------------------------------------
//LEX TERMINALS
//-------------------------------------------------------
//Math Operators
//Comparison Operators
//Logic Operators
//Misc Operators
//Primitive Types
//Syntax Components
//Grouping Symbols
//Declaration Symbols
//Loops and Decision Statements
//Value Literals
//Imports
//lexterminal YOINK yoink
//-------------------------------------------------------
//VALUE TERMINALS
//-------------------------------------------------------
//-------------------------------------------------------
//PRODUCTION DECLARATIONS
//-------------------------------------------------------
//Expressions
// Sequences
//Operators
//Statement Types
//Types
//-------------------------------------------------------
//GRAMMAR PRODUCTION RULES
//-------------------------------------------------------
//UNIT_EXPR --> LBRACKET EXPR_SEQ:x RBRACKET {}
//UNIT_EXPR --> TRUE { True }
//UNIT_EXPR --> FALSE { False }
//THIS IS A TEMPORARY INJECTION FOR A LIST LITERAL- THIS NEEDS TO CHANGE
//EXPR_SEQ --> EXPR:[e] ;  EXPR_SEQ:seq  { e:: seq }
//EXPR_SEQ --> EXPR:[e] ;  { [e] } 
//EXPR_STATEMENT --> EXPR_SEQ:e { CodeBlock(e) } 

let private SYMBOLS = [|"_WILDCARD_TOKEN_";";";"'";"PLUS";"MINUS";"TIMES";"DIVIDE";"MODULO";"EXPONENT";"EQUALS";"PLUSPLUS";"MINUSMINUS";"LT";"GT";"LTE";"GTE";"EQ";"NOTEQ";"OR";"AND";"NOT";"CONS";"CAR";"CDR";"TILDA";"DISPLAY";"LAMBDA";"BOOLEAN";"INT";"STRING";"FLOAT";"DOT";"COMMA";"COLON";"LBRACKET";"RBRACKET";"LCURLY";"RCURLY";"LPAREN";"RPAREN";"LET";"DEFINE";"IN";"IF";"ELSE";"FOR";"WHILE";"TRUE";"FALSE";"NIL";"VAR";"INTEGER_LITERAL";"FLOAT_LITERAL";"STRING_LITERAL";"UNIT_EXPR";"LAMBDA_EXPR";"UNARY_OPERATOR_EXPR";"EXPONENT_OPER";"BINOP_MULTIPLICATION_EXPR";"BINOP_ADDITION_EXPR";"AND_EXPR";"OR_EXPR";"BINOP_EQUALITY_EXPR";"DEFINE_EXPR";"LET_EXPR";"EXPR";"EXPR_SEQ";"LIST_SEQ";"VAR_SEQ";"STATEMENT_SEQ";"LIST_LITERAL";"CODE_BLOCK";"LAMBDA_BLOCK";"UNIOP";"BINOP_MULT_OPER";"BINOP_PLUS_OPER";"BINOP_EQUAL_OPER";"PROGRAM";"STATEMENT";"EXPR_STATEMENT";"LOOP_STATEMENT";"SELECT_STATEMENT";"UNIT_TYPE";"UNTYPED_PREFIX";"TYPE_PREFIX";"START";"EOF"|];

let private TABLE:uint64 [] = [|128851116032UL;124555362304UL;231928954881UL;270585167873UL;343599153153UL;94491836416UL;274878955521UL;184684052480UL;335008301057UL;300647776257UL;266288889857UL;146029871104UL;296354906113UL;253403725825UL;107374968832UL;210454642688UL;219044970496UL;347892940801UL;98786541568UL;171800592384UL;214749937664UL;257698234369UL;197570330624UL;227634970624UL;163209150464UL;111670657024UL;279173201921UL;352189284353UL;244813266945UL;223339413504UL;236225822721UL;249108627457UL;313534971905UL;330713858049UL;176094838784UL;120261509120UL;240520658945UL;103079477248UL;261995036673UL;85900787712UL;281479275151362UL;281492160053250UL;281487865085954UL;281642483908610UL;281552289595394UL;281496455020546UL;281625304039426UL;281612419137538UL;281500749987842UL;281565174497282UL;281535109726210UL;281526519791618UL;281543699660802UL;281513634889730UL;281505044955138UL;281530814758914UL;281547994628098UL;281556584562690UL;281539404693506UL;281655368810498UL;281509339922434UL;563100278718466UL;562962839764994UL;563040149176322UL;562975724666882UL;563031559241730UL;563010084405250UL;563022969307138UL;563001494470658UL;562967134732290UL;563117458587650UL;563018674339842UL;562954249830402UL;563087393816578UL;562988609568770UL;563005789437954UL;562980019634178UL;562971429699586UL;563027264274434UL;563130343489538UL;562984315846656UL;563014379372546UL;844459292033026UL;844592436019202UL;844480766869506UL;844454997065730UL;844437817196546UL;844575256150018UL;844429227261954UL;844605320921090UL;844489356804098UL;844493651771394UL;844562371248130UL;844446407131138UL;844442112163842UL;844450702098434UL;844506537263104UL;844515126607874UL;844497946738690UL;844485061836802UL;844502241705986UL;844476471902210UL;844463587000322UL;1125998692139010UL;1126118951223298UL;1126127541157890UL;1126114656256002UL;1126028756910082UL;1125994397171714UL;1126020166975490UL;1126007282073602UL;1126002987106306UL;1126011577040898UL;1126024461942786UL;1126063116648450UL;1126110361288706UL;1125985807237122UL;1126123246190594UL;1407379181338624UL;1689064610201600UL;1689090380922881UL;1689034544316416UL;1689197753204737UL;1689047430594560UL;1688970121773056UL;1689124739219457UL;1689111855300609UL;1689021660856320UL;1689129033465857UL;1689073199677440UL;1689107558498305UL;1688995890135040UL;1689163395235841UL;1688935761051648UL;1689081789218817UL;1689068905234432UL;1689077495234560UL;1689103263989761UL;1689150508040193UL;1688961530920960UL;1689086086086657UL;1688974415626240UL;1689013069414400UL;1689193459417089UL;1688944352100352UL;1689060314906624UL;1689116149153793UL;1689098968891393UL;1689184870596609UL;1689202049548289UL;1688952939741184UL;1688948646805504UL;1689094673530881UL;1688978711379968UL;1689120445431809UL;1689025955102720UL;1688957235232768UL;1970488048680960UL;2251812700356610UL;2251816995323906UL;2251937254408194UL;2251825586569216UL;2251868534931458UL;2251838470160386UL;2251864239964162UL;2251980204081154UL;2251851355062274UL;2251804110422018UL;2251821291667456UL;2251890009767938UL;2251834175193090UL;2251872829898754UL;2251950139310082UL;2251855650029570UL;2251829881470976UL;2251881419833346UL;2251967319179266UL;2252117644476417UL;2251877124866050UL;2251859944996866UL;2533403643871234UL;2533360694198274UL;2533399348903938UL;2533438003609602UL;2533382169034754UL;2533446593544194UL;2533450888511490UL;2533498133151746UL;2533377874067458UL;2533442298576898UL;2533373579100162UL;2533472363347970UL;2533489543217154UL;2533420823740418UL;2533369284132866UL;2533395053936642UL;2533493838184450UL;2533644162039810UL;2533386464002050UL;2533433708642306UL;2533485248249858UL;2533459478446082UL;2533502428119042UL;2814827078549506UL;2814805603713026UL;2814839963451394UL;2814788423843842UL;2814818488614914UL;2814930157764610UL;2815071892996097UL;2814831373516802UL;2814801308745730UL;2814809898680322UL;2814766950252544UL;2814754064105474UL;2814762655416320UL;2814814193647618UL;2814887208091650UL;2814822783582210UL;2814900092993538UL;2814784128876546UL;2814771243974658UL;2814779833909250UL;2814775538941954UL;2814917272862722UL;3096314938982402UL;3096229039636482UL;3096241924538370UL;3096259104407554UL;3096306349047810UL;3096297759113218UL;3096392248393730UL;3096280579244034UL;3096293464145922UL;3096284874211330UL;3096250514472962UL;3096375068524546UL;3096302054080514UL;3096405133295618UL;3096254809440258UL;3096362183622658UL;3096237629571074UL;3096246219505666UL;3096263399374850UL;3096289169178626UL;3096276284276738UL;3377923060072450UL;3377862930530306UL;3377807095955458UL;3377785621118978UL;3377811390922754UL;3377828570791938UL;3377914470137858UL;3377798506020866UL;3377824275824642UL;3377910175170562UL;3377819980857346UL;3377794211053570UL;3377927355039746UL;3377802800988162UL;3377918765105154UL;3659419510505473UL;3659449576194049UL;3659393742209024UL;3659299252600832UL;3659453870440449UL;3659436692275201UL;3659440986128385UL;3659333615616002UL;3659350792077312UL;3659402332209152UL;3659471053455361UL;3659385151881216UL;3659359381291008UL;3659286367895552UL;3659294958747648UL;3659303548354560UL;3659445282406401UL;3659269189074944UL;3659544069013506UL;3659518296391681UL;3659522590179329UL;3659488232210433UL;3659410923061249UL;3659423805865985UL;3659509705539585UL;3659415217897473UL;3659260598026240UL;3659526886522881UL;3659389447176192UL;3659432395472897UL;3659406626193409UL;3659282072207360UL;3659277776715776UL;3659346497830912UL;3659398036652032UL;3659320727109632UL;3659372267569152UL;3659428100964353UL;3659273483780096UL;3659475345014785UL;3659337906388992UL;3940731281276930UL;3940653971865602UL;3940666856767490UL;3940800000753666UL;3940709807554560UL;3940684036636674UL;3940688332652544UL;3940726986309634UL;3940976095264769UL;3940718397030400UL;3940817180622850UL;3940705512390656UL;3940679741669378UL;3940675446702082UL;3940671151734786UL;3940830065524738UL;3940739871801344UL;3940722692063232UL;3940714102194176UL;3940701217488896UL;3940787115851778UL;3940662561800194UL;4222386645696513UL;4222296451252224UL;4222395235827713UL;4222356579614721UL;4222399529615361UL;4222253501775872UL;4222339400597504UL;4222287859810304UL;4222438185631745UL;4222378054385665UL;4222412417662977UL;4222335105302528UL;4222360876482561UL;4222227730137088UL;4222300745498624UL;4222373759287297UL;4222390939549697UL;4222347990073344UL;4222369463926785UL;4222365171318785UL;4222425298436097UL;4222219142496256UL;4222236321316864UL;4222352285630464UL;4222403827662849UL;4222476839944193UL;4222274978316290UL;4222382348894209UL;4222232025628672UL;4222270680530944UL;4222223437201408UL;4222343695630336UL;4222244912168960UL;4222210551447552UL;4222249206022144UL;4503633990385666UL;4503664055156738UL;4503616810516482UL;4503621105483778UL;4503681235025922UL;4503767134371842UL;4503737069600770UL;4503612515549186UL;4503780019273730UL;4503676940058626UL;4503651170254850UL;4503638285352962UL;4503625400451074UL;4503668350124034UL;4503749954502658UL;4503655465222146UL;4503672645091330UL;4503689824960514UL;4503603925614594UL;4503629695418370UL;4503659760189442UL;4785143324278786UL;4785126144409602UL;4785104669573122UL;4785113259507714UL;4785224928657410UL;4785254993428482UL;4785151914213378UL;4785147619246082UL;4785100374605826UL;4785108964540418UL;4785096079638530UL;4785156209180674UL;4785091784671234UL;4785212043755522UL;4785134734344194UL;4785078899769346UL;4785139029311490UL;4785164799115266UL;4785242108526594UL;4785130439376898UL;4785087489703938UL;5066910362304513UL;5066764333481984UL;5066906067468289UL;5348097572732930UL;5348101867700226UL;5348088982798338UL;5348076097896450UL;5348028853256194UL;5348204946915330UL;5348114752602114UL;5348084687831042UL;5348192062013442UL;5348041738158082UL;5348037443190786UL;5348161997242370UL;5348050328092674UL;5348080392863746UL;5348174882144258UL;5348054623059970UL;5348063212994562UL;5348058918027266UL;5348093277765634UL;5348106162667522UL;5348046033125378UL;5629611203428354UL;5629636973232130UL;5629632678264834UL;5629538188984322UL;5911343878111235UL;6192552567832578UL;6192548272865282UL;6192569747701762UL;6192612697374722UL;6192659942014978UL;6192677121884162UL;6192664236982274UL;6192561157767170UL;6192672826916866UL;6192574042669058UL;6192543977897986UL;6192535387963394UL;6192668531949570UL;6192556862799874UL;6192578337636354UL;6474139217035264UL;6474280951021569UL;6474285246054401UL;6474216526643201UL;6755412326416386UL;6755425211318274UL;6755420916350978UL;6755481045893122UL;6755536880467970UL;6755403736481794UL;6755566945239042UL;6755549765369858UL;6755455276089346UL;6755468160991234UL;6755416621383682UL;6755472455958530UL;6755579830140930UL;6755476750925826UL;6755459571056642UL;6755463866023938UL;6755433801252866UL;6755562654400512UL;6755489635827714UL;6755429506285570UL;6755438096220162UL;6755450981122050UL;7036891598290946UL;7036878713389058UL;7037041922146306UL;7036943137898498UL;7036895893258242UL;7036904483192834UL;7036887303323650UL;7036964612734978UL;7036951727833090UL;7036956022800386UL;7036908778160130UL;7037011857375234UL;7036913073127426UL;7036930252996610UL;7036947432865794UL;7036934547963906UL;7037054807048194UL;7037024742277122UL;7036938842931202UL;7036900188225538UL;7036925958029314UL;7318353690034178UL;7318422409510914UL;7318370869903362UL;7318400934674434UL;7318366574936066UL;7318529783693314UL;7318426704478210UL;7318362279968770UL;7318516898791426UL;7318413819576322UL;7318379459837954UL;7318499718922242UL;7318486834020354UL;7318418114543618UL;7318405229641730UL;7318409524609026UL;7318430999445506UL;7318439589380098UL;7318383754805250UL;7318388049772546UL;7318375164870658UL;7599970404466690UL;7600009059172354UL;7599987584335874UL;7599931749761026UL;7600000469237762UL;7599910274924546UL;7600039123943426UL;7599996174270466UL;7600021944074242UL;7599953224597506UL;7600034828976130UL;7599936044728322UL;7600193742766082UL;7599944634662914UL;7600043418910722UL;7599983289368578UL;7600052008845314UL;7599927454793730UL;7599991879303170UL;7599948929630210UL;7599918864859138UL;7600047713878018UL;7599923159826434UL;7881462561308672UL;8162989077299200UL;8163130811285505UL;8163135106580481UL;8444360975253504UL;8725758640062466UL;8725741460193282UL;8725801592291328UL;8725750050127874UL;8725737165225986UL;8725784409866242UL;8725874604179458UL;8725814474637314UL;8725797294768130UL;8725904668950530UL;8725788704833538UL;8725780114898946UL;8725775819931650UL;8725805884702722UL;8725762935029762UL;8725891784048642UL;8725745755160578UL;8725861719277570UL;8725728575291394UL;8725754345095170UL;8725792999800834UL;9007237909577730UL;9007310924021762UL;9007336693825538UL;9007332398858242UL;9288833149894658UL;9289043603292162UL;9570329600196610UL;9570226520981506UL;9570222226014210UL;9570153506537474UL;9570200751177730UL;9570170686406658UL;9570205046145026UL;9570179276341250UL;9570213636079618UL;9570183571308546UL;9570187866275842UL;9570239405883394UL;9570174981373954UL;9570209341112322UL;9570166391439362UL;9570286650523650UL;9570316715294722UL;9570162096472066UL;9570299535425538UL;9570217931046914UL;9570230815948802UL;9851722970300418UL;9851735855202306UL;9851718675333122UL;9851838934417410UL;9851843229384706UL;9851748740104194UL;9851710085398530UL;9851744445136898UL;9851834639450114UL;9851753035071490UL;9851731560235010UL;9851847524352002UL;9851787394809858UL;9851727265267714UL;9851851819319298UL;10133197948125184UL;10133202241060864UL;10133339682242561UL;10133326796554240UL;10133356859817985UL;10133322500997120UL;10133451350867969UL;10133343974850561UL;10133348270211073UL;10133228012699648UL;10133210832240640UL;10133206536552448UL;10133412696555521UL;10133193653420032UL;10133331090538497UL;10133313911521280UL;10133219423092736UL;10133335389700097UL;10133262370734080UL;10133352565309441UL;10133309616226304UL;10133361156620289UL;10133223716945920UL;10133185062371328UL;10133318206554112UL;10133365450473473UL;10414707282280450UL;10414685807443970UL;10414711577247746UL;10414612792999938UL;10696070591152130UL;10696109245857794UL;10696066296184834UL;10696126425726978UL;10696074886119426UL;10696113540825090UL;10696186555269122UL;10696122130759682UL;10696216620040194UL;10696117835792386UL;10696079181086722UL;10696229504942082UL;10696062001217538UL;10696083476054018UL;10696130720694274UL;10696139310628866UL;10696100655923202UL;10696087771021314UL;10696199440171010UL;10696104950890498UL;10696053411282946UL;10977751726096386UL;10977747431129090UL;10977609992175618UL;10977622877077506UL;10977652941848578UL;10977618582110210UL;10977644351913986UL;10977743136161794UL;10977734546227202UL;10977687301586946UL;10977635761979394UL;10977627172044802UL;10977631467012098UL;10977648646881282UL;10977738841194498UL;11259011956473858UL;11259024841375746UL;11259080675950594UL;11259149395427330UL;11259033431310338UL;11259072086016002UL;11259059201114114UL;11259016251441154UL;11259020546408450UL;11259029136343042UL;11259054906146818UL;11259037726277634UL;11259076380983298UL;11259089265885186UL;11259050611179522UL;11259067791048706UL;11259003366539266UL;11259166575296514UL;11259179460198402UL;11259063496081410UL;11259136510525442UL;11540693090107392UL;11540688795074560UL;11540577124614144UL;11540787580108801UL;11540697384550400UL;11540705974091777UL;11540684499779584UL;11540637254287360UL;11540581420105728UL;11540559945924608UL;11540701680107520UL;11540714568286209UL;11540568536973312UL;11540572831678464UL;11822052101324800UL;11822168066818048UL;11822180950802433UL;11822047808389120UL;11822172361261056UL;11822056396816384UL;11822043513683968UL;11822034922635264UL;11822163771785216UL;11822198130475009UL;11822189542506497UL;11822262556819457UL;11822176656818176UL;11822112230998016UL;11822193835114497UL;11822159476490240UL;11822202429964289UL;12103527082098690UL;12103621571379202UL;12103643046215682UL;12103595801575426UL;12103518492164098UL;12103600096542722UL;12103608686477314UL;12103638751248386UL;12103548556935170UL;12103582916673538UL;12103535672033282UL;12103522787131394UL;12103647341182978UL;12103544261967874UL;12103509902229506UL;12103651636150274UL;12103591506608130UL;12103570031771650UL;12103587211640834UL;12103531377065986UL;12103634456281090UL;12103552851902466UL;12103793370071042UL;12385066484105216UL;12666653130031105UL;12666640240869377UL;12666687486951425UL;12666605880934401UL;12666610177802241UL;12666472738521088UL;12666623060606977UL;12666537161129984UL;12666648830935041UL;12666592996950016UL;12666601586950144UL;12666468443815936UL;12666459852767232UL;12666550046818304UL;12666519981850624UL;12666481326948352UL;12666584406622208UL;12666494213488640UL;12666485622636544UL;12666477031456768UL;12666631650213889UL;12666502803095552UL;12666627355705345UL;12666545752571904UL;12666588701917184UL;12666597291393024UL;12666614472638465UL;12666618765246465UL;12666674599755777UL;12666644537147393UL;12666635947016193UL;12666726141263873UL;12666498507341824UL;12948063678758914UL;12948072268693506UL;12947943419674626UL;12947952009609218UL;12947934829740034UL;12947956304576514UL;12948012139151362UL;12948059383791618UL;12947947714641922UL;12948067973726210UL;12948076563660802UL;13229547245338626UL;13229487115796482UL;13229542950371330UL;13229418396319746UL;13229551540305922UL;13229426986254338UL;13229409806385154UL;13229538655404034UL;13229534360436738UL;13229422691287042UL;13229431281221634UL;13511013632049154UL;13511017927016450UL;13510906257866754UL;13511022221983746UL;13511009337081858UL;13510897667932162UL;13510901962899458UL;13510884783030274UL;13510893372964866UL;13510962092441602UL;13511026516951042UL;13792376938299392UL;13792488608759808UL;13792492903792640UL;13792437067972608UL;13792372645363712UL;13792514379481089UL;13792381233790976UL;13792501493792768UL;13792359759609856UL;13792484313464832UL;13792368350658560UL;13792587393794049UL;13792505787777025UL;13792497198235648UL;13792518677200897UL;14073972175798274UL;14073847621746690UL;14073959290896386UL;14073851916713986UL;14073834736844802UL;14073976470765570UL;14073963585863682UL;14073967880830978UL;14073856211681282UL;14073843326779394UL;14073912046256130UL;14355438562181120UL;14355318304079872UL;14355451447214080UL;14355472925655041UL;14355442857213952UL;14355322598785024UL;14355537347215361UL;14355326891720704UL;14355455741198337UL;14355447151656960UL;14355309713031168UL;14355387021393920UL;14355331187212288UL;14355464332902401UL;14355434266886144UL;14355468625510401UL;14636909244252162UL;14636861999611906UL;14636784690200578UL;14636917834186754UL;14636926424121346UL;14636806165037058UL;14636801870069762UL;14636797575102466UL;14636793280135170UL;14636922129154050UL;14636913539219458UL;14918543137374210UL;14918332683976706UL;15199872083558402UL;15199811954016258UL;15199859198656514UL;15199751824474114UL;15199743234539522UL;15199734644604930UL;15199747529506818UL;15199863493623810UL;15199876378525698UL;15199756119441410UL;15199867788591106UL;15481218210922498UL;15481286930399234UL;15481351354908674UL;15481209620987906UL;15481334175039490UL;15481226800857090UL;15481231095824386UL;15481347059941378UL;15481338470006786UL;15481342764974082UL;15481222505889794UL;15762697482534914UL;15762684597633026UL;15762706072469506UL;15762813446651906UL;15762817741619202UL;15762701777502210UL;15762761907044354UL;15762809151684610UL;15762693187567618UL;15762826331553794UL;15762822036586498UL;16044284128591874UL;16044297013493762UL;16044236883951618UL;16044181049376770UL;16044159574540290UL;16044172459442178UL;16044176754409474UL;16044168164474882UL;16044301308461058UL;16044288423559170UL;16044292718526466UL;16325656024186880UL;16325793462484993UL;16325767694188544UL;16325780578172929UL;16325802052943873UL;16325634550005760UL;16325789169876993UL;16325862184189953UL;16325643141054464UL;16325763399155712UL;16325759103860736UL;16325771988631552UL;16325806347452417UL;16325651728695296UL;16325647435759616UL;16325810647597057UL;16325797757845505UL;16325711858368512UL;16325776284188672UL;16607242672078850UL;16607238377111554UL;16607109528092674UL;16607122412994562UL;16607246967046146UL;16607186837504002UL;16607118118027266UL;16607131002929154UL;16607234082144258UL;16607126707961858UL;16607251262013442UL;16888721943691266UL;16888713353756674UL;16888726238658562UL;16888601684606978UL;16888709058789378UL;16888717648723970UL;16888661814149122UL;16888597389639682UL;16888584504737794UL;16888593094672386UL;16888605979574274UL;17170188330139650UL;17170136790532098UL;17170184035172354UL;17170059481120770UL;17170196920074242UL;17170080955957250UL;17170072366022658UL;17170192625106946UL;17170068071055362UL;17170076660989954UL;17170201215041538UL;17451555932864514UL;17451676191948802UL;17451667602014210UL;17451671896981506UL;17451659012079618UL;17451611767439362UL;17451551637897218UL;17451663307046914UL;17451547342929922UL;17451543047962626UL;17451534458028034UL;17733073860362242UL;17733060977164288UL;17733091040231426UL;18014548838842368UL;18295912146468864UL;18577485902053378UL;18577490202460160UL;18577387117805570UL;18577481607086082UL;18858956583862274UL;18858960878829570UL;18858862094581762UL;19140435860979712UL;19140431563915266UL;19421906542788608UL;19703523248701441UL;19703411578896384UL;19703501773471745UL;19703506067980289UL;19703493183012865UL;19703415877271554UL;19703372925108224UL;19703467414716416UL;19703360040402944UL;19703420170338304UL;19703394399617024UL;19703536138387457UL;19703368631255040UL;19703347156287488UL;19703514658635777UL;19703424464584704UL;19703484595568641UL;19703480298700801UL;19703351449223168UL;19703527546748929UL;19703334270533632UL;19703342861582336UL;19703377220861952UL;19703476004716544UL;19703458824388608UL;19703497478373377UL;19703355744714752UL;19703549017522177UL;19703463119683584UL;19703488890404865UL;19703471709159424UL;19703600559030273UL;19703561904717825UL;19703518954913793UL;19703510364782593UL;19984989635346433UL;19984830721425408UL;19985075535740929UL;19984817838292992UL;19984976750182401UL;19985023994232833UL;19984835017113600UL;19984959572279297UL;19984993931624449UL;19984972455084033UL;19984899441295360UL;19984998225412097UL;19984852197572608UL;19985036881428481UL;19984942391427072UL;19984963867115521UL;19984955275411457UL;19984933801099264UL;19984822132998144UL;19984826425933824UL;19984869376327680UL;19984809247244288UL;19984946685870080UL;19984968159723521UL;19984847901818880UL;19984895147048960UL;19984985341493249UL;19984950981427200UL;19984843607965696UL;19984886555607040UL;19984938096394240UL;19985002525229057UL;19984981044690945UL;20266236983836672UL;20547965363683329UL;20548029786554369UL;20548034081587201UL;20547888052568064UL;20829242768424960UL;20829397385216001UL;20829380205543425UL;20829363026526208UL;20829358731231232UL;20829401680314369UL;20829251356065792UL;20829367321559040UL;20829255651557376UL;20829371616002048UL;20829311485739008UL;20829405980721153UL;20829247063130112UL;20829393089855489UL;20829388797247489UL;20829461811560449UL;20829375911559168UL;20829234177376256UL;21110803642843138UL;21110696268660738UL;21110644729053186UL;21110627549184002UL;21110760693170178UL;21110790757941250UL;21110704858595330UL;21110661908922370UL;21110653318987778UL;21110713448529922UL;21110691973693442UL;21110657613955074UL;21110687678726146UL;21110700563628034UL;21110683383758850UL;21110773578072066UL;21110636139118594UL;21110649024020482UL;21110640434085890UL;21110679088791554UL;21110674793824258UL;21392158360928258UL;21392124001189890UL;21392166950862850UL;21392111116288002UL;21392128296157186UL;21392132591124482UL;21392171245830146UL;21392102526353410UL;21392235670339586UL;21392175540797442UL;21392115411255298UL;21392179835764738UL;21392188425699330UL;21392149770993666UL;21392162655895554UL;21392119706222594UL;21392265735110658UL;21392136886091778UL;21392278620012546UL;21392248555241474UL;21392154065960962UL;21673646223261698UL;21673594683654146UL;21673895332610049UL;21673598978621442UL;21673586095030272UL;21673611863523330UL;21673629043392514UL;21673654813196290UL;21673641928294402UL;21673607568556034UL;21673663403130882UL;21673753597444098UL;21673637633327106UL;21673603273588738UL;21673577503784962UL;21673624748425218UL;21673633338359810UL;21673650518228994UL;21673740712542210UL;21673710647771138UL;21673590389866496UL;21673723532673026UL;21955082543562754UL;21955052478791682UL;21955116903301122UL;21955104018399234UL;21955138378137602UL;21955108313366530UL;21955086838530050UL;21955065363693570UL;21955078248595458UL;21955121198268418UL;21955061068726274UL;21955099723431938UL;21955198507679746UL;21955185622777858UL;21955112608333826UL;21955125493235714UL;21955073953628162UL;21955129788203010UL;21955215687548930UL;21955069658660866UL;21955228572450818UL;22236690670026752UL;22518079742738434UL;22518088332673026UL;22518015318228994UL;22518028203130882UL;22518066857836546UL;22518062562869250UL;22518019613196290UL;22518032499277824UL;22518049677967362UL;22518036793065474UL;22518011023261698UL;22518002433327106UL;22518135577313282UL;22518148462215170UL;22518178526986242UL;22518071152803842UL;22518058267901954UL;22518075447771138UL;22518165642084354UL;22518053972934658UL;22518023908163586UL;22799563309711362UL;22799494591545344UL;22799541834874882UL;22799477410365442UL;22799610554351618UL;22799640619122690UL;22799546129842178UL;22799490295267330UL;22799653504024578UL;22799790944354305UL;22799537539907586UL;22799498886447104UL;22799486000300034UL;22799550424809474UL;22799533244940290UL;22799554719776770UL;22799503181348864UL;22799528949972994UL;22799507475136514UL;22799524655005698UL;22799623439253506UL;22799511770103810UL;23081128481259522UL;23081012517142530UL;23081008222175234UL;23080978157404162UL;23081115596357634UL;23080960977534978UL;23081021107077122UL;23081085531586562UL;23081029697011714UL;23081016812109826UL;23080999632240642UL;23081003927207938UL;23081038286946306UL;23081098416488450UL;23081025404534784UL;23080986747338754UL;23080965272502274UL;23080982452371458UL;23080969567469570UL;23080952387600386UL;23080973862436866UL;23362676470710273UL;23362702243987457UL;23362689355874305UL;23362685062021121UL;23362697945939969UL;23362659292807169UL;23362637816922112UL;23362646406397952UL;23362642111954944UL;23362551918100480UL;23362534737641472UL;23362723714760705UL;23362633521627136UL;23362526146461696UL;23362672175611905UL;23362543328493568UL;23362680765218817UL;23362586276134912UL;23362508967772160UL;23362650701955072UL;23362594867576832UL;23362667880251393UL;23362530441953280UL;23362573394640898UL;23362590574510082UL;23362654995939329UL;23362517558820864UL;23362736601956353UL;23362521853526016UL;23362775256268801UL;23362547622346752UL;23362569096855552UL;23362599161823232UL;23362693652152321UL;23362663587643393UL;23362710836019201UL;23643979651940354UL;23643936702267394UL;23643966767038466UL;23643949587169282UL;23643988241874946UL;23643975356973058UL;23643953882136578UL;23644048371417090UL;23643932407300098UL;23644065551286274UL;23643919522398210UL;23643910932463618UL;23643902342529026UL;23643958177103874UL;23643923817365506UL;23643962472071170UL;23643915227430914UL;23644078436188162UL;23643971062005762UL;23643928112332802UL;23644035486515202UL;23925622129033217UL;23925604949360641UL;23925626424131585UL;23925467512242176UL;23925635015442433UL;23925630718640129UL;23925493281914880UL;23925536229556224UL;23925583475048448UL;23925596359819264UL;23925725209690113UL;23925497575768064UL;23925471806947328UL;23925458921193472UL;23925600655376384UL;23925587770343424UL;23925476099883008UL;23925484691062784UL;23925686555377665UL;23925609249898497UL;23925613541064705UL;23925639309295617UL;23925501871521792UL;23925617833672705UL;23925480395374592UL;23925592065376256UL;24206972552478720UL;24206976848232448UL;24206968258625536UL;24207200190791681UL;24488679460503553UL;24488537726517248UL;24488683755536385UL;24488615038025729UL;24770034176360449UL;24770012700475392UL;24769969751130112UL;24769896737079296UL;24769909621194752UL;24770107194671105UL;24770150139822081UL;24770047059165185UL;24769974045376512UL;24769892442374144UL;24770059945574401UL;24769922505900032UL;24769883851325440UL;24770042763804673UL;24770098598313985UL;24770077130031105UL;24769926801653760UL;24770051354263553UL;24770068535705601UL;24770008405180416UL;24769918212046848UL;24769905325506560UL;24770021289951232UL;24769952575913984UL;24770064239427585UL;24769943980408832UL;24769961159688192UL;24770025585508352UL;24770111485509633UL;24770055648772097UL;24770016995508224UL;24770029879492609UL;24770072829493249UL;24769901030014976UL;24770038471196673UL;25051440437657600UL;25332915414433792UL;25614386089820160UL;25614454809624577UL;25614484875706369UL;25614489169559553UL;25614433335312384UL;25614575069954049UL;25614480578904065UL;25614446220083200UL;25614459110686721UL;25614343142178816UL;25614321667211264UL;25614334551326720UL;25614347436032000UL;25614351731785728UL;25614317372506112UL;25614437630607360UL;25614467693936641UL;25614463401328641UL;25614471989297153UL;25614330255638528UL;25614325960146944UL;25614536415641601UL;25614441925640192UL;25614450515640320UL;25614476284395521UL;25614308781457408UL;25895831008247808UL;26177263030632450UL;26177310275272706UL;26177323160174594UL;26177190016188418UL;26177245850763266UL;26177224375926786UL;26177177131286530UL;26177250145730562UL;26177237260828674UL;26177228670894082UL;26177202901090306UL;26177353224945666UL;26177207196057602UL;26177185721221122UL;26177194311155714UL;26177340340043778UL;26177254441222144UL;26177241555795970UL;26177232965861378UL;26177211491024898UL;26177198606123010UL;26459000000086017UL;26458811019952128UL;26458862560739328UL;26458793840672768UL;26458768072310784UL;26458926990753793UL;26458892624068609UL;26458759481458688UL;26458802436571136UL;26458896919429121UL;26458952760492033UL;26458901214527489UL;26458750890278912UL;26458905509036033UL;26458772366163968UL;26458746597343232UL;26458884036624385UL;26458823905640448UL;26458948458577921UL;26458819611394048UL;26458776661917696UL;26458733711589376UL;26458866855772160UL;26458961345773569UL;26458909805838337UL;26458879739756545UL;26458755185770496UL;26458914099691521UL;26458875445772288UL;26458742302638080UL;26458888331460609UL;26458922689757185UL;26458918395969537UL;26458858265444352UL;26458871150215168UL;26740273115037698UL;26740290294906882UL;27021748091420674UL;27021778156191746UL;27021649307172866UL;27021623537369090UL;27021662192074754UL;27021632127303682UL;27021675076976642UL;27021765271289858UL;27021679371943938UL;27021614947434498UL;27021653602140162UL;27021636422270978UL;27021687961878530UL;27021735206518786UL;27021627832336386UL;27021666487042050UL;27021610652467202UL;27021670782009346UL;27021619242401794UL;27021657897107458UL;27021602062532610UL;27303205885247490UL;27303111395966978UL;27303210180214786UL;27584680865169410UL;27866074236977154UL;27866057057107970UL;27866173021224962UL;27866160136323074UL;27866104301748226UL;27866100006780930UL;27866203085996034UL;27866061352075266UL;27866035582271490UL;27866044172206082UL;27866190201094146UL;27866052762140674UL;27866087121879042UL;27866095711813634UL;27866026992336898UL;27866091416846338UL;27866082826911746UL;27866078531944450UL;27866112891682818UL;27866048467173378UL;27866039877238786UL;28147583571853312UL;28147673765904384UL;28147841270218753UL;28147682355118080UL;28147776844267521UL;28147592162902016UL;28147716716036096UL;28147845564006401UL;28147609341722624UL;28147729600020481UL;28147763959955457UL;28147626522181632UL;28147596457607168UL;28147768256233473UL;28147733896888321UL;28147751074791425UL;28147811206037505UL;28147617932574720UL;28147742484332545UL;28147669471657984UL;28147798318841857UL;28147695241396224UL;28147712421003264UL;28147794025971713UL;28147660880216064UL;28147746779693057UL;28147772550021121UL;28147605046034432UL;28147828390690817UL;28147759666102273UL;28147725306036224UL;28147849860349953UL;28147832679366657UL;28147622226427904UL;28147755369299969UL;28147600750542848UL;28147643700936704UL;28147708125708288UL;28147738191724545UL;28147721010479104UL;28429045666217986UL;28429062846087170UL;28429024191381506UL;28429153040400386UL;28429037076283394UL;28429041371250690UL;28428994126610434UL;28428998421577730UL;28429011306479618UL;28429049961185282UL;28428989831643138UL;28429054256152578UL;28429032781316098UL;28429002716545026UL;28429122975629314UL;28429110090727426UL;28429140155498498UL;28428985536675842UL;28429007011512322UL;28429028486348802UL;28428976946741250UL;28710503459586050UL;28710473394814978UL;28710529229389826UL;28710628013637634UL;28710524934422530UL;28710477689782274UL;28710451919978498UL;28710512049520642UL;28710481984749570UL;28710460509913090UL;28710486279716866UL;28710469099847682UL;28710597948866562UL;28710499164618754UL;28710516344487938UL;28710464804880386UL;28710585063964674UL;28710520639455234UL;28710537819324418UL;28710615128735746UL;28710507754553346UL;28992068631068672UL;28992137351135232UL;28992197480153089UL;28992176004923393UL;28992150236168192UL;28992193186365441UL;28992145940611072UL;28992133055840256UL;28992227551084545UL;28992223248973825UL;28992158827020289UL;28992184596234241UL;28992017093033984UL;28992029976166400UL;28992236136169473UL;28992201781149697UL;28992171709825025UL;28992042862706688UL;28992021387739136UL;28992180299431937UL;28992154530152449UL;28992188890087425UL;28992008501985280UL;28992098696036352UL;28992051452313600UL;28992034271854592UL;28992085810348032UL;28992047156559872UL;28992141646168064UL;28992094401789952UL;28992025680674816UL;28992077226967040UL;28992163121856513UL;28992274790481921UL;28992167414464513UL;29273577973809152UL;29555091599589376UL;29555001405734912UL;29555018584489984UL;29555048649457664UL;29554979929587712UL;29554992816128000UL;29555113075277825UL;29555095894032384UL;29554967046455296UL;29554975634096128UL;29555121663246337UL;29554984225275904UL;29555173202395137UL;29555181799604225UL;29555125958344705UL;29555143139786753UL;29555186089590785UL;29555151734112257UL;29555104483573761UL;29555083009261568UL;29555134549655553UL;29555044355211264UL;29555035763769344UL;29555147433574401UL;29555224743903233UL;29555117367885825UL;29555130252853249UL;29554997109981184UL;29555100189589504UL;29555027179995136UL;29555138843508737UL;29554958455406592UL;29555087304556544UL;29554971341160448UL;29555108780441601UL;29836510740480000UL;29836605229563905UL;29836613820219393UL;29836592344596481UL;29836450610806784UL;29836661066301441UL;29836519331921920UL;29836695424270337UL;29836493561200640UL;29836476382445568UL;29836562281267200UL;29836678251216897UL;29836459201986560UL;29836699720613889UL;29836600935055361UL;29836609526366209UL;29836596639956993UL;29836682539630593UL;29836583757152257UL;29836622410285057UL;29836575166300160UL;29836618116497409UL;29836566576300032UL;29836626704531457UL;29836648179105793UL;29836557985972224UL;29836523626168320UL;29836472086691840UL;29836545101660160UL;29836588051988481UL;29836570870743040UL;29836433432117248UL;29836442023165952UL;29836446317871104UL;29836691130482689UL;29836467792838656UL;29836454906298368UL;29836643886235649UL;29836579460284417UL;29836532215382016UL;30118011494072320UL;30399301787254784UL;30680931382853632UL;30962367701450754UL;30962333341712386UL;30962350521581570UL;30962414946091010UL;30962410651123714UL;30962470780665858UL;30962406356156418UL;30962445010862082UL;30962393471254530UL;30962346226614274UL;30962462190731266UL;30962354816548866UL;30962457895763970UL;30962432125960194UL;30962475075633154UL;30962423536025602UL;30962616809553922UL;30962466485698562UL;30962376291385346UL;30962359111516162UL;30962371996418050UL;30962419241058306UL;30962341931646978UL;31243958645751809UL;31243821201424384UL;31243829789851648UL;31243975818608641UL;31243842676391936UL;31243885624033280UL;31243941459853312UL;31243825494360064UL;31243954343837697UL;31243846970245120UL;31243937164820480UL;31244035949854721UL;31243851265998848UL;31243834085539840UL;31243988703772673UL;31243932869525504UL;31243980113117185UL;31243967228149761UL;31243971523510273UL;31243816906719232UL;31244074604167169UL;31243984409919489UL;31243962935541761UL;31243808315670528UL;31243950049853440UL;31243945754296320UL;31525236049379330UL;31525218869510146UL;31525227459444738UL;31525231754412034UL;31525210279575554UL;31525253229248514UL;31525248934281218UL;31525270409117698UL;31525364898398210UL;31525214574542850UL;31525377783300098UL;31525223164477442UL;31525257524215810UL;31525274704084994UL;31525266114150402UL;31525201689640962UL;31525287588986882UL;31525347718529026UL;31525261819183106UL;31525334833627138UL;31525278999052290UL;31806831289827328UL;32088310554165248UL;32088276196130816UL;32088301970784256UL;32088233245802496UL;32088254719983616UL;32088319145607168UL;32088267606523904UL;32088447992791041UL;32088417930182657UL;32088362094952448UL;32088405043249153UL;32088374979985408UL;32088370684428288UL;32088409340051457UL;32088383570837505UL;32088426524966913UL;32088499534299137UL;32088241836851200UL;32088366389985280UL;32088357799657472UL;32088379273969665UL;32088396453642241UL;32088452295491585UL;32088250424492032UL;32088422223970305UL;32088460879986689UL;32088413633904641UL;32088259015671808UL;32088271900377088UL;32088246131556352UL;32088392158281729UL;32088323439853568UL;32088293374885888UL;32088400748740609UL;32088387865673729UL;32369768354676738UL;32369807009382402UL;32369794124480514UL;32369789829513218UL;32369832779186178UL;32369819894284290UL;32369781239578626UL;32369837074153474UL;32369798419447810UL;32369742584872962UL;32369716815069186UL;32369733994938370UL;32369708225134594UL;32369751174807554UL;32369845664088066UL;32369841369120770UL;32369721110036482UL;32369991692976130UL;32369849959055362UL;32369725405003778UL;32369811304349698UL;32369746879840258UL;32369729699971074UL;32369785534545922UL;32651123072172034UL;32651178906746882UL;32651153136943106UL;32651187496681474UL;32651118777204738UL;32651114482237442UL;32651131662106626UL;32651135957073922UL;32651161726877698UL;32651157431910402UL;32651264806092802UL;32651127367139330UL;32651234741321730UL;32651166021844994UL;32651247626223618UL;32651110187270146UL;32651170316812290UL;32651174611779586UL;32651148841975810UL;32651277690994690UL;32651101597335554UL;32932632407900162UL;32932593753194498UL;32932739782082562UL;32932722602213378UL;32932752666984450UL;32932662472671234UL;32932576573325314UL;32932585163259906UL;32932640997834754UL;32932653882736642UL;32932623817965570UL;32932645292802050UL;32932610933063682UL;32932589458227202UL;32932709717311490UL;32932636702867458UL;32932628112932866UL;32932649587769346UL;32932598048161794UL;32932602343129090UL;32932606638096386UL;33214231939579906UL;33214223349645314UL;33214257709383682UL;33214210464743426UL;33214150335201282UL;33214141745266690UL;33214214759710722UL;33214244824481794UL;33214158925135874UL;33214236234547202UL;33214274889252866UL;33214167515070466UL;33214219054678018UL;33214154630168578UL;33214416623173634UL;33214176105005058UL;33214206169776130UL;33214171810037762UL;33214270594285570UL;33214146040233986UL;33214266299318274UL;33214133155332098UL;33214262004350978UL;33214193284874242UL;33495651081846786UL;33495719801323522UL;33495741276160002UL;33495629607010306UL;33495685441585154UL;33495646786879490UL;33495706916421634UL;33495625312043010UL;33495689736552450UL;33495642491912194UL;33495616722108418UL;33495633901977602UL;33495736981192706UL;33495681146617858UL;33495608132173826UL;33495749866094594UL;33495732686225410UL;33495698326487042UL;33495668261715970UL;33495694031519746UL;33495745571127298UL;33495621017075714UL;33495891600015362UL; |];


//Enum for return values 
type FLTypeDUnion = | Enumvariant_4 of int | Enumvariant_21 of (lltype*string) list | Enumvariant_2 of int*int | Enumvariant_0 of expr | Enumvariant_6 of string | Enumvariant_29 of String | Enumvariant_37 of (lltype*string) | Enumvariant_35 of lltype | Enumvariant_22 of LBox<expr> list | Enumvariant_5 of float | Enumvariant_1 of unit ;;

let _rrsemaction_0_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLint 

let _rrsemaction_1_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLstring 

let _rrsemaction_2_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLfloat 

let _rrsemaction_3_(parser:RTParser<FLTypeDUnion,unit>, v:string) =  (LLunknown, v) 

let _rrsemaction_4_(parser:RTParser<FLTypeDUnion,unit>, x:(lltype*string)) =  x 

let _rrsemaction_5_(parser:RTParser<FLTypeDUnion,unit>, v:string, _item1_:expr, t:lltype) =  (t,v) 

let _rrsemaction_6_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_7_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<string>) =  Var(x) 

let _rrsemaction_8_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<string>, _item1_:expr, l:LBox<expr> list, _item3_:expr) = Apply(x, l)

let _rrsemaction_9_(parser:RTParser<FLTypeDUnion,unit>, x:string) =  Strlit(x) 

let _rrsemaction_10_(parser:RTParser<FLTypeDUnion,unit>, x:int) =  Integer(x) 

let _rrsemaction_11_(parser:RTParser<FLTypeDUnion,unit>, x:float) =  Floatpt(x) 

let _rrsemaction_12_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  Nil 

let _rrsemaction_13_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_14_(parser:RTParser<FLTypeDUnion,unit>, e:String, x:expr) =  Uniop(e,x) 

let _rrsemaction_15_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "not" 

let _rrsemaction_16_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "~" 

let _rrsemaction_17_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "car" 

let _rrsemaction_18_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cdr" 

let _rrsemaction_19_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "display" 

let _rrsemaction_20_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_21_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("^",x,y) 

let _rrsemaction_22_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_23_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_24_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "*" 

let _rrsemaction_25_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "/" 

let _rrsemaction_26_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "%" 

let _rrsemaction_27_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_28_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_29_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "+" 

let _rrsemaction_30_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "-" 

let _rrsemaction_31_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_32_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("and" ,x,y) 

let _rrsemaction_33_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_34_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("or",x,y) 

let _rrsemaction_35_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_36_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_37_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "=" 

let _rrsemaction_38_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "neq" 

let _rrsemaction_39_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "eq" 

let _rrsemaction_40_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<=" 

let _rrsemaction_41_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">=" 

let _rrsemaction_42_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<" 

let _rrsemaction_43_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">" 

let _rrsemaction_44_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cons" 

let _rrsemaction_45_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_46_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, v:(lltype*string) list, _item2_:expr, x:LBox<expr>) =  TypedLambda(v,LLunknown,x) 

let _rrsemaction_47_(parser:RTParser<FLTypeDUnion,unit>, t:lltype, _item1_:expr, v:(lltype*string) list, _item3_:expr, x:LBox<expr>) =  TypedLambda(v,t,x) 

let _rrsemaction_48_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_49_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr, _item4_:expr, y:LBox<expr>) = TypedLet(d,x,y)

let _rrsemaction_50_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_51_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr) = TypedDefine(d,x)

let _rrsemaction_52_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_53_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_54_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string), _item1_:expr, seq:(lltype*string) list) =  e::seq 

let _rrsemaction_55_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string)) =  [e] 

let _rrsemaction_56_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, _item1_:expr, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_57_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_58_(parser:RTParser<FLTypeDUnion,unit>) =  [] 

let _rrsemaction_59_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:LBox<expr> list, _item2_:expr) =  ListLiteral(x) 

let _rrsemaction_60_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_61_(parser:RTParser<FLTypeDUnion,unit>, x:expr) = x

let _rrsemaction_62_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) = x

let _rrsemaction_63_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_64_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:LBox<expr>, _item3_:expr, x:expr) =  Whileloop(p,x) 

let _rrsemaction_65_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:LBox<expr>, _item3_:expr, x:expr, _item5_:expr, y:expr) =  Ifelse(p,x,y)

let _rrsemaction_66_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) =  x 

let _rrsemaction_67_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_68_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_69_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_70_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_71_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<expr> list) =  CodeBlock(x) 

let _rrsemaction_72_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =   Unchecked.defaultof<unit>

let make_parser() : RTParser<FLTypeDUnion,unit> =
  let parser1 = skeleton_parser(Unchecked.defaultof<unit>,73,120)
  let mutable rule = skeleton_production("")
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_35(_rrsemaction_0_(parser,_item0_)));
  parser1.Rules.[0] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_35(_rrsemaction_1_(parser,_item0_)));
  parser1.Rules.[1] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_35(_rrsemaction_2_(parser,_item0_)));
  parser1.Rules.[2] <- rule;
  rule <- skeleton_production("UNTYPED_PREFIX")
  rule.action <- fun parser ->
    (let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_37(_rrsemaction_3_(parser,v)));
  parser1.Rules.[3] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_37(_rrsemaction_4_(parser,x)));
  parser1.Rules.[4] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_35(_rr_35) ->  _rr_35 | _ -> Unchecked.defaultof<lltype>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_37(_rrsemaction_5_(parser,v,_item1_,t)));
  parser1.Rules.[5] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_6_(parser,_item0_,x,_item2_)));
  parser1.Rules.[6] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_7_(parser,x)));
  parser1.Rules.[7] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let l = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_8_(parser,x,_item1_,l,_item3_)));
  parser1.Rules.[8] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_9_(parser,x)));
  parser1.Rules.[9] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_4(_rr_4) ->  _rr_4 | _ -> Unchecked.defaultof<int>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_10_(parser,x)));
  parser1.Rules.[10] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_5(_rr_5) ->  _rr_5 | _ -> Unchecked.defaultof<float>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_11_(parser,x)));
  parser1.Rules.[11] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_12_(parser,_item0_)));
  parser1.Rules.[12] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_13_(parser,x)));
  parser1.Rules.[13] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_14_(parser,e,x)));
  parser1.Rules.[14] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_15_(parser,_item0_)));
  parser1.Rules.[15] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_16_(parser,_item0_)));
  parser1.Rules.[16] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_17_(parser,_item0_)));
  parser1.Rules.[17] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_18_(parser,_item0_)));
  parser1.Rules.[18] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_19_(parser,_item0_)));
  parser1.Rules.[19] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_20_(parser,x)));
  parser1.Rules.[20] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_21_(parser,x,_item1_,y)));
  parser1.Rules.[21] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_22_(parser,x)));
  parser1.Rules.[22] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_23_(parser,x,e,y)));
  parser1.Rules.[23] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_24_(parser,_item0_)));
  parser1.Rules.[24] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_25_(parser,_item0_)));
  parser1.Rules.[25] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_26_(parser,_item0_)));
  parser1.Rules.[26] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_27_(parser,x)));
  parser1.Rules.[27] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_28_(parser,x,e,y)));
  parser1.Rules.[28] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_29_(parser,_item0_)));
  parser1.Rules.[29] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_30_(parser,_item0_)));
  parser1.Rules.[30] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_31_(parser,x)));
  parser1.Rules.[31] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_32_(parser,x,_item1_,y)));
  parser1.Rules.[32] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_33_(parser,x)));
  parser1.Rules.[33] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_34_(parser,x,_item1_,y)));
  parser1.Rules.[34] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_35_(parser,x)));
  parser1.Rules.[35] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_36_(parser,x,e,y)));
  parser1.Rules.[36] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_37_(parser,_item0_)));
  parser1.Rules.[37] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_38_(parser,_item0_)));
  parser1.Rules.[38] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_39_(parser,_item0_)));
  parser1.Rules.[39] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_40_(parser,_item0_)));
  parser1.Rules.[40] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_41_(parser,_item0_)));
  parser1.Rules.[41] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_42_(parser,_item0_)));
  parser1.Rules.[42] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_43_(parser,_item0_)));
  parser1.Rules.[43] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_44_(parser,_item0_)));
  parser1.Rules.[44] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_45_(parser,x)));
  parser1.Rules.[45] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_46_(parser,_item0_,v,_item2_,x)));
  parser1.Rules.[46] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_35(_rr_35) ->  _rr_35 | _ -> Unchecked.defaultof<lltype>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_47_(parser,t,_item1_,v,_item3_,x)));
  parser1.Rules.[47] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_48_(parser,x)));
  parser1.Rules.[48] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let y_sitem = parser.Pop() in let y_val = (match y_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let y = lbox(y_val,y_sitem.line,y_sitem.column) in let _item4_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_49_(parser,_item0_,d,_item2_,x,_item4_,y)));
  parser1.Rules.[49] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_50_(parser,x)));
  parser1.Rules.[50] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_51_(parser,_item0_,d,_item2_,x)));
  parser1.Rules.[51] <- rule;
  rule <- skeleton_production("EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_52_(parser,x)));
  parser1.Rules.[52] <- rule;
  rule <- skeleton_production("EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_53_(parser,x)));
  parser1.Rules.[53] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_54_(parser,e,_item1_,seq)));
  parser1.Rules.[54] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_55_(parser,e)));
  parser1.Rules.[55] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_56_(parser,e,_item1_,seq)));
  parser1.Rules.[56] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_57_(parser,e)));
  parser1.Rules.[57] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    ( FLTypeDUnion.Enumvariant_22(_rrsemaction_58_(parser)));
  parser1.Rules.[58] <- rule;
  rule <- skeleton_production("LIST_LITERAL")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_59_(parser,_item0_,x,_item2_)));
  parser1.Rules.[59] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_60_(parser,_item0_,x,_item2_)));
  parser1.Rules.[60] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_61_(parser,x)));
  parser1.Rules.[61] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_62_(parser,x,_item1_)));
  parser1.Rules.[62] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_63_(parser,_item0_,x,_item2_)));
  parser1.Rules.[63] <- rule;
  rule <- skeleton_production("LOOP_STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p_sitem = parser.Pop() in let p_val = (match p_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = lbox(p_val,p_sitem.line,p_sitem.column) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_64_(parser,_item0_,_item1_,p,_item3_,x)));
  parser1.Rules.[64] <- rule;
  rule <- skeleton_production("SELECT_STATEMENT")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item5_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p_sitem = parser.Pop() in let p_val = (match p_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = lbox(p_val,p_sitem.line,p_sitem.column) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_65_(parser,_item0_,_item1_,p,_item3_,x,_item5_,y)));
  parser1.Rules.[65] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_66_(parser,x,_item1_)));
  parser1.Rules.[66] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_67_(parser,x)));
  parser1.Rules.[67] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_68_(parser,x)));
  parser1.Rules.[68] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_69_(parser,e,seq)));
  parser1.Rules.[69] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_70_(parser,e)));
  parser1.Rules.[70] <- rule;
  rule <- skeleton_production("PROGRAM")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_71_(parser,x)));
  parser1.Rules.[71] <- rule;
  rule <- skeleton_production("START")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_1(_rrsemaction_72_(parser,_item0_)));
  parser1.Rules.[72] <- rule;

  for i in 0..1903 do
    let (sti,symi,action) = decode_action(TABLE.[i])
    parser1.RSM.[sti].Add(SYMBOLS.[symi],action)
  for s in SYMBOLS do ignore (parser1.Symset.Add(s));
  parser1;;

let convert_token (lt:RawToken) =
  if lt=null then None
  else
    let (uval,utype) = 
      match lt.token_name with
        | "Alphanum" -> (FLTypeDUnion.Enumvariant_6((fun x-> x)(lt.token_text)),"VAR")
        | "Num" -> (FLTypeDUnion.Enumvariant_4(int(lt.token_text)),"INTEGER_LITERAL")
        | "Float" -> (FLTypeDUnion.Enumvariant_5(float(lt.token_text)),"FLOAT_LITERAL")
        | "StrLit" -> (FLTypeDUnion.Enumvariant_6((fun x -> x)(lt.token_text)),"STRING_LITERAL")
        | ":" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COLON")
        | "^" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EXPONENT")
        | "cons" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CONS")
        | "lambda" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LAMBDA")
        | "cdr" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CDR")
        | "for" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FOR")
        | "false" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FALSE")
        | "nil" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NIL")
        | "[" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LBRACKET")
        | ">" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GT")
        | "in" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IN")
        | "/" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DIVIDE")
        | "car" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CAR")
        | "*" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TIMES")
        | ">=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GTE")
        | "." -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DOT")
        | "int" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"INT")
        | "}" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RCURLY")
        | "," -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COMMA")
        | "++" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUSPLUS")
        | "<=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LTE")
        | "||" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"OR")
        | "~" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TILDA")
        | "(" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LPAREN")
        | "let" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LET")
        | "if" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IF")
        | "else" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"ELSE")
        | "true" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TRUE")
        | "display" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DISPLAY")
        | "String" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"STRING")
        | "float" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FLOAT")
        | "&&" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"AND")
        | "]" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RBRACKET")
        | "-" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUS")
        | "=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQUALS")
        | "define" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DEFINE")
        | "{" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LCURLY")
        | "<" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LT")
        | "%" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MODULO")
        | "eq" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQ")
        | "while" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"WHILE")
        | "boolean" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"BOOLEAN")
        | ")" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RPAREN")
        | "not" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOT")
        | "--" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUSMINUS")
        | "+" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUS")
        | "neq" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOTEQ")
        | ";" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),";")
        | "'" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"'")
        | "EOF" -> (FLTypeDUnion.Enumvariant_1(Unchecked.defaultof<unit>),"EOF")
        | x -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"Error:"+x)
    Some({TerminalToken.sym=utype; svalue=uval; line=lt.line; column=lt.column;});;

let parse_with(parser:RTParser<FLTypeDUnion,unit>, lexer:AbstractLexer<unit>) : expr option  =
  lexer.set_shared(parser.exstate)
  parser.NextToken <- fun () -> convert_token(lexer.next_lt())
  match parser.parse_core() with
    | Some(FLTypeDUnion.Enumvariant_0(_yyxres_)) -> Some(_yyxres_)
    | _ -> None;;

