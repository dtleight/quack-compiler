//F# Parser generated by Rustlr for grammar quack
    
module Quack
open System;
open System.Collections.Generic;
open Fussless;
open Fussless.RuntimeParser;
//AST modifications
// 1. Sequences are now Applys
// 2. Code blocks are now a thing
// 3. BeginSeq's are ListLiterals and have different syntax
// 4. Vars are now  be LBox'ed
// 5. While/If Conditions are now LBox'ed
type expr =
  |Integer of int
  | Floatpt of float
  | Strlit of string
  | Var of LBox<string>
  | Nil
  | Binop of string*expr*expr
  | Uniop of string*expr
  | Ifelse of LBox<expr>*expr*expr
  | Whileloop of LBox<expr>*expr
  | Define of LBox<string>*expr
  | TypedDefine of LBox<lltype*string>*expr
  | Lambda of (string list)*expr
  | TypedLambda of ((lltype*string) list)*lltype*LBox<expr>
  | Let of LBox<string>*expr*LBox<expr>
  | TypedLet of LBox<lltype*string>*expr*LBox<expr>
  | Quote of expr
  | Setq of LBox<string>*expr
  | Apply of LBox<string> * LBox<expr> list
  | ListLiteral of LBox<expr> list
  | CodeBlock of LBox<expr> list
  // type expressions
  | TypeExpr of lltype
  | TypedVal of (lltype*expr) 
  | Label of string   // not a proper expression - just a temporary
  | Error
 and lltype =  // abstract syntax for type expressions
  | LLint | LLfloat | LLstring
  | LList of lltype | LLtuple of lltype list
  | LLfun of (lltype list)*lltype
  | LLunknown | LLuntypable | LLvar of string | LLunit
//-------------------------------------------------------
//LEX TERMINALS
//-------------------------------------------------------
//Math Operators
//Comparison Operators
//Logic Operators
//Misc Operators
//Primitive Types
//Syntax Components
//Grouping Symbols
//Declaration Symbols
//Loops and Decision Statements
//Value Literals
//Imports
//lexterminal YOINK yoink
//-------------------------------------------------------
//VALUE TERMINALS
//-------------------------------------------------------
//-------------------------------------------------------
//PRODUCTION DECLARATIONS
//-------------------------------------------------------
//Expressions
// Sequences
//Operators
//Statement Types
//Types
//-------------------------------------------------------
//GRAMMAR PRODUCTION RULES
//-------------------------------------------------------
//UNIT_EXPR --> LBRACKET EXPR_SEQ:x RBRACKET {}
//UNIT_EXPR --> TRUE { True }
//UNIT_EXPR --> FALSE { False }
//THIS IS A TEMPORARY INJECTION FOR A LIST LITERAL- THIS NEEDS TO CHANGE
//EXPR_SEQ --> EXPR:[e] ;  EXPR_SEQ:seq  { e:: seq }
//EXPR_SEQ --> EXPR:[e] ;  { [e] } 
//EXPR_STATEMENT --> EXPR_SEQ:e { CodeBlock(e) } 

let private SYMBOLS = [|"_WILDCARD_TOKEN_";";";"'";"PLUS";"MINUS";"TIMES";"DIVIDE";"MODULO";"EXPONENT";"EQUALS";"PLUSPLUS";"MINUSMINUS";"LT";"GT";"LTE";"GTE";"EQ";"NOTEQ";"OR";"AND";"NOT";"CONS";"CAR";"CDR";"TILDA";"PRINT";"LAMBDA";"BOOLEAN";"INT";"STRING";"FLOAT";"DOT";"COMMA";"COLON";"LBRACKET";"RBRACKET";"LCURLY";"RCURLY";"LPAREN";"RPAREN";"LET";"DEFINE";"IN";"IF";"ELSE";"FOR";"WHILE";"TRUE";"FALSE";"NIL";"VAR";"INTEGER_LITERAL";"FLOAT_LITERAL";"STRING_LITERAL";"UNIT_EXPR";"LAMBDA_EXPR";"UNARY_OPERATOR_EXPR";"EXPONENT_OPER";"BINOP_MULTIPLICATION_EXPR";"BINOP_ADDITION_EXPR";"AND_EXPR";"OR_EXPR";"BINOP_EQUALITY_EXPR";"DEFINE_EXPR";"LET_EXPR";"EXPR";"EXPR_SEQ";"LIST_SEQ";"VAR_SEQ";"STATEMENT_SEQ";"LIST_LITERAL";"CODE_BLOCK";"LAMBDA_BLOCK";"UNIOP";"BINOP_MULT_OPER";"BINOP_PLUS_OPER";"BINOP_EQUAL_OPER";"PROGRAM";"STATEMENT";"EXPR_STATEMENT";"LOOP_STATEMENT";"SELECT_STATEMENT";"UNIT_TYPE";"UNTYPED_PREFIX";"TYPE_PREFIX";"START";"EOF"|];

let private TABLE:uint64 [] = [|227635494912UL;103080525824UL;249108430849UL;257699741697UL;240520200193UL;214748823552UL;253403267073UL;236224774145UL;85900328960UL;111669805056UL;107375230976UL;266290593793UL;244813856769UL;171799937024UL;274880200705UL;197569937408UL;335009349633UL;223338561536UL;261993857025UL;343597514753UL;231930593281UL;128850526208UL;124555165696UL;270584709121UL;184683986944UL;94491836416UL;120260263936UL;300648300545UL;146031050752UL;347894841345UL;176095035392UL;279174840321UL;219044118528UL;163211182080UL;98784772096UL;352188956673UL;313533530113UL;296354840577UL;210453463040UL;330714316801UL;281552286908418UL;281655366123522UL;281547991941122UL;281496452333570UL;281487862398978UL;281500747300866UL;281625301352450UL;281505042268162UL;281539402006530UL;281509337235458UL;281535107039234UL;281492157366274UL;281642481221634UL;281612416450562UL;281530812071938UL;281556581875714UL;281543696973826UL;281565171810306UL;281526517104642UL;281479272464386UL;281513632202754UL;563113166569474UL;563074511863810UL;563169001144322UL;563108871602178UL;563070216896514UL;563319324999682UL;563126051471362UL;563057331994626UL;563164706177026UL;563048742060034UL;563053037027330UL;563177591078914UL;563044447092738UL;563134641405954UL;563095986700290UL;563078806831106UL;563121756504066UL;563160411209730UL;563173296111618UL;563147526307842UL;563061626961922UL;563035857158146UL;563117461536770UL;844489357918208UL;844480767459328UL;844493652688896UL;844437817982976UL;844751350464513UL;844450701967362UL;844463587721216UL;844506536542210UL;844476473147392UL;844747055693825UL;844459291901954UL;844605320790018UL;844442113146880UL;844454996934658UL;844502241574914UL;844497947262976UL;844575256018946UL;844485062885376UL;844562371117058UL;844515127787520UL;844429227130882UL;844446407000066UL;844592435888130UL;1126037346516994UL;1125981511942146UL;1125912792465410UL;1125990101876738UL;1125917087432706UL;1125938562269186UL;1125964332072962UL;1125921382400002UL;1125904202530818UL;1125925677367298UL;1125955742138370UL;1126080296189954UL;1125934267301890UL;1125972922007554UL;1125951447171074UL;1125960037105666UL;1126050231418882UL;1125929972334594UL;1126067411288066UL;1125977216974850UL;1125968627040258UL;1407447899766786UL;1407525209178114UL;1407435014864898UL;1407452194734082UL;1407542389047298UL;1407439309832194UL;1407387770224642UL;1407379180290050UL;1407392065191938UL;1407400656896000UL;1407692714737665UL;1407404951797760UL;1407409245061122UL;1407456489701378UL;1407512324276226UL;1407396362059776UL;1407443604799490UL;1407465079635970UL;1407413540028418UL;1407555273949186UL;1407426424930306UL;1407430719897602UL;1689013072756736UL;1970380672008194UL;1970505226059778UL;1970393556910082UL;1970346312269826UL;1970329132400642UL;1970342017302530UL;1970402146844674UL;1970359197171714UL;1970350607237122UL;1970406441811970UL;1970415031746562UL;1970337722335234UL;1970488049532928UL;1970475161288706UL;1970492341157890UL;1970397851877378UL;1970376377040898UL;1970462276386818UL;1970363492139010UL;1970384966975490UL;1970389261942786UL;1970354902204418UL;2251898599112706UL;2252018858196994UL;2251885714210818UL;2252027448131586UL;2251894304145410UL;2251907189047298UL;2251928663883778UL;2251924368916482UL;2251963023622146UL;2252014563229698UL;2252010268262402UL;2251911484014594UL;2251920073949186UL;2251902894080002UL;2252023153164290UL;2533287678771202UL;2533352103280642UL;2533330628444162UL;2533425117724674UL;2533304858640386UL;2533300563673090UL;2533339218378754UL;2533356398247938UL;2533334923411458UL;2533455182495746UL;2533343513346050UL;2533442297593858UL;2533313448574978UL;2533412232822786UL;2533309153607682UL;2533279088836610UL;2533347808313346UL;2533291973738498UL;2533296268705794UL;2533364988182530UL;2533326333476866UL;2814964519337984UL;2815041828945921UL;2815106253389825UL;2815110548291585UL;3096280579833858UL;3096375069114370UL;3096314939572226UL;3096263399964674UL;3096392248983554UL;3096405133885442UL;3096229040226306UL;3096254810030082UL;3096246220095490UL;3096362184212482UL;3096250515062786UL;3096297759703042UL;3096259107684352UL;3096276284866562UL;3096302054670338UL;3096306349637634UL;3096237630160898UL;3096241925128194UL;3096293464735746UL;3096284874801154UL;3096289169768450UL;3377777030594562UL;3377764145692674UL;3377850045038594UL;3377729785954306UL;3377867224907778UL;3377768440659970UL;3377751260790786UL;3377716901052418UL;3377755555758082UL;3377734080921602UL;3377789915496450UL;3377781325561858UL;3377772735627266UL;3377880109809666UL;3377721196019714UL;3377704016150530UL;3377725490987010UL;3377837160136706UL;3377759850725378UL;3377712606085122UL;3377738375888898UL;3659342203912194UL;3659325024043010UL;3659243419664386UL;3659312139141122UL;3659213354893314UL;3659230534762498UL;3659252010844160UL;3659247714631682UL;3659204764958722UL;3659209059926018UL;3659226239795202UL;3659196175024130UL;3659239124697090UL;3659264894500866UL;3659187585089538UL;3659234829729794UL;3659178995154946UL;3659256304566274UL;3659200469991426UL;3659355088814082UL;3659191880056834UL;3940744165785600UL;3940864422772736UL;3940774229114880UL;3940812885131264UL;3940881604542465UL;3940873012510720UL;3940778524475392UL;3940890194149377UL;3940915964542977UL;3940748458721280UL;3940757049180160UL;3940907373690881UL;3940911667806209UL;3940860127412224UL;3940735574278144UL;3940868718067712UL;3940877309444096UL;3940752754475008UL;3940885901410305UL;3940894487805953UL;3940769934213120UL;3941001862905857UL;3940903077216257UL;3940898782380033UL;3940761343754240UL;3940963207479297UL;4222343694974978UL;4222210550988802UL;4222236320792578UL;4222287860400130UL;4222352284909570UL;4222253500661762UL;4222347989942274UL;4222339400007682UL;4222249205694466UL;4222244910727170UL;4222223435890690UL;4222219140923394UL;4222232025825282UL;4222335105040386UL;4222227730857986UL;4503698412863490UL;4503719887699970UL;4503685527961602UL;4503728477634562UL;4503694117896194UL;4503762837372930UL;4503814376980482UL;4503822966915074UL;4503724182667266UL;4503702707830786UL;4503818671947778UL;4503707002798082UL;4503827261882370UL;4503810082013186UL;4503711297765378UL;4785207748132866UL;4785186273296386UL;4785212043100162UL;4785113258852354UL;5066661249941506UL;5066588235497474UL;5066687019745282UL;5066682724777986UL;5348385339080705UL;5348239309733888UL;5348381043785729UL;5629628384280578UL;5629624089313282UL;5629722873561090UL;5629727168528386UL;5629662744018946UL;5629598319509506UL;5629714283626498UL;5629611204411394UL;5629585434607618UL;5629594024542210UL;5629606909444098UL;5629718578593794UL;5629709988659202UL;5629619794345986UL;5629602614476802UL;5911189263155200UL;5911330997207041UL;5911335292567553UL;6192612700848128UL;6474057608462338UL;6474036133625858UL;6473963119181826UL;6474061903429634UL;6755459573743618UL;6755472458645506UL;6755468163678210UL;6755579832827906UL;6755481048580098UL;6755416624070658UL;6755455278776322UL;6755549768056834UL;6755489638514690UL;6755420919037954UL;6755429508972546UL;6755566947926018UL;6755450983809026UL;6755433803939842UL;6755463868710914UL;6755425214005250UL;6755403739168770UL;6755536883154946UL;6755412329103362UL;6755476753612802UL;6755438098907138UL;7036986091438080UL;7318375167098882UL;7318383757033474UL;7318426706706434UL;7318370872131586UL;7318499721150466UL;7318422411739138UL;7318388052000770UL;7318486836248578UL;7318379462066178UL;7318405231869954UL;7318366577164290UL;7318516901019650UL;7318400936902658UL;7318439591608322UL;7318418116771842UL;7318413821804546UL;7318362282196994UL;7318529785921538UL;7318409526837250UL;7318353692262402UL;7318431003443200UL;7599897389039618UL;7599828669562882UL;7599863029301250UL;7599841554464770UL;7599914568908802UL;7599875914203138UL;7599905978974210UL;7599901684006914UL;7599854439366658UL;7599893094072322UL;7599888799105026UL;7599850144399362UL;7600004763222018UL;7599884504137730UL;7599845849432066UL;7599991878320130UL;7599880209170434UL;7599858734333954UL;7599961813549058UL;7599974698450946UL;7599837259497474UL;7881668715085827UL;8162950419644416UL;8162898879774720UL;8162894584872960UL;8162989073432576UL;8163014844809217UL;8162873109381120UL;8162881699840000UL;8162984778072064UL;8163126513565697UL;8163122219450369UL;8163049204809729UL;8162868816445440UL;8163044909318145UL;8163032024350721UL;8162937535791104UL;8162997663170560UL;8162860224937984UL;8163109333958657UL;8163019138465793UL;8162933242986498UL;8162946124546048UL;8162993368727552UL;8162877405134848UL;8162959008595968UL;8163023433039873UL;8163074972909569UL;8163001960103936UL;8162885994414080UL;8163070682005505UL;8163010549383169UL;8163117922123777UL;8162920355659776UL;8163027727876097UL;8163036318466049UL;8163040615202817UL;8163053499449345UL;8163087858139137UL;8162971894546432UL;8163006255202305UL;8162903175135232UL;8163143696384002UL;8444253601005568UL;8725814473654274UL;8725904667967490UL;8725775818948610UL;8725745754177538UL;8725874603196418UL;8725741459210242UL;8725737164242946UL;8725801588752386UL;8725758639079426UL;8725784408883202UL;8725754344112130UL;8725861718294530UL;8725891783065602UL;8725788703850498UL;8725780113915906UL;8725728574308354UL;8725805883719682UL;8725750049144834UL;8725797293785090UL;8725792998817794UL;8725762934046722UL;9007358173184002UL;9007568626581506UL;9288850326487040UL;9288798786617344UL;9288949111652353UL;9288820262502400UL;9288919045308417UL;9288768723288064UL;9288901866946560UL;9288888980275200UL;9289026420408321UL;9288837442633728UL;9288785901256704UL;9288931931193345UL;9288893275570176UL;9288760131780608UL;9288923339882497UL;9288803081977856UL;9288846031388672UL;9288884684914688UL;9288906162044929UL;9288777311977472UL;9288936225308673UL;9288824559108098UL;9288927634718721UL;9288910456225793UL;9288914751651841UL;9288974879752193UL;9288781606682624UL;9288794491715584UL;9288940522045441UL;9288961999110145UL;9288953409110017UL;9288773016223744UL;9288944816160769UL;9288897570013184UL;9288987764981761UL;9570316712476674UL;9570299532607490UL;9570183568490498UL;9570187863457794UL;9570239403065346UL;9570226518163458UL;9570200748359682UL;9570213633261570UL;9570209338294274UL;9570230813130754UL;9570174978555906UL;9570222223196162UL;9570162093654018UL;9570153503719426UL;9570179273523202UL;9570166388621314UL;9570170683588610UL;9570286647705602UL;9570217928228866UL;9570205043326978UL;9570329597378562UL;9851761627103234UL;9851680022724610UL;9851688612659202UL;9851701497561090UL;9851684317691906UL;9851675727757314UL;9851628483117058UL;9851641368018946UL;9851654252920834UL;9851658547888130UL;9851804576776194UL;9851705792528386UL;9851774512005122UL;9851697202593794UL;9851662842855426UL;9851714382462978UL;9851637073051650UL;9851692907626498UL;9851791691874306UL;9851645662986242UL;9851649957953538UL;10133172176879618UL;10133180766814210UL;10133154997010434UL;10133133522173954UL;10133167881912322UL;10133189356748802UL;10133249486290946UL;10133266666160130UL;10133120637272066UL;10133116342304770UL;10133124932239362UL;10133159291977730UL;10133163586945026UL;10133103457402882UL;10133236601389058UL;10133112047337474UL;10133150702043138UL;10133137817141250UL;10133176471846914UL;10133129227206658UL;10133279551062018UL;10414668630130688UL;10414771708231680UL;10414853313134593UL;10414685808099328UL;10414681513525248UL;10414702988820480UL;10414810363068417UL;10414788887117824UL;10414840428888065UL;10414801773789184UL;10414677218820096UL;10414926327250945UL;10414818952151041UL;10414849018494977UL;10414836132151297UL;10414831838035969UL;10414917735809025UL;10414660038623232UL;10414823246725121UL;10414909150658561UL;10414814658494465UL;10414758822281216UL;10414698693459968UL;10414750233329664UL;10414745938231296UL;10414874786594817UL;10414922033135617UL;10414797476855808UL;10414827541561345UL;10414806068887553UL;10414887671824385UL;10414784591757312UL;10414694398558208UL;10414793182412800UL;10414720169345024UL;10414844723003393UL;10414737349476352UL;10414672923066368UL;10696246687956994UL;10696220918153218UL;10696225213120514UL;10696259572858882UL;10696173673512962UL;10696160788611074UL;10696208033251330UL;10696263867826178UL;10696276752728066UL;10696268162793474UL;10696152198676482UL;10696135018807298UL;10696216623185922UL;10696195148349442UL;10696156493643778UL;10696212328218626UL;10696147903709186UL;10696233803055106UL;10696169378545666UL;10696177968480258UL;10696143608741890UL;10696418486648834UL;10696272457760770UL;10977631467012098UL;10977609992175618UL;10977751726096386UL;10977743136161794UL;10977652941848578UL;10977618582110210UL;10977644351913986UL;10977687301586946UL;10977738841194498UL;10977627172044802UL;10977635761979394UL;10977747431129090UL;10977622877077506UL;10977648646881282UL;10977734546227202UL;11259011956015106UL;11259020545949698UL;11259016250982402UL;11259050610720770UL;11259054905688066UL;11259003366080514UL;11259029135884290UL;11259149394968578UL;11259080675491842UL;11259179459739650UL;11259033430851586UL;11259076380524546UL;11259089265426434UL;11259166574837762UL;11259067790589954UL;11259072085557250UL;11259059200655362UL;11259136510066690UL;11259024840916994UL;11259037725818882UL;11259063495622658UL;11540572831612930UL;11540559946711042UL;11540577126580226UL;11540697385664514UL;11540637256122370UL;11540568536645634UL;11540693090697218UL;11540701680631810UL;11540581421547522UL;11540684500762626UL;11540688795729922UL;11822047808651266UL;11822159477800962UL;11822172362702850UL;11822034923749378UL;11822176657670146UL;11822112233160706UL;11822043513683970UL;11822052103618562UL;11822168067735554UL;11822163772768258UL;11822056398585858UL;12103668812414977UL;12103634452021248UL;12103673106989057UL;12103655929151489UL;12103531373789184UL;12103647337119744UL;12103638747381760UL;12103527079084032UL;12103690291511297UL;12103737532088321UL;12103509898887168UL;12103522783330304UL;12103587209740288UL;12103518490394624UL;12103664518758401UL;12103643042676736UL;12103677401825281UL;12103651634053120UL;12385109430829058UL;12385118020763650UL;12384997761679362UL;12385002056646658UL;12385126610698242UL;12385113725796354UL;12385122315730946UL;12385062186188802UL;12384993466712066UL;12384984876777474UL;12385006351613954UL;12666459853225986UL;12666584407277570UL;12666592997212162UL;12666477033095170UL;12666588702244866UL;12666537162637314UL;12666481328062466UL;12666468443160578UL;12666472738127874UL;12666601587146754UL;12666597292179458UL;12948076564185088UL;12948080859283457UL;12947934829019136UL;12948093742546945UL;12948098041839617UL;12947956303921152UL;12947952009216000UL;12948162462220289UL;12948059382153216UL;12948089448890369UL;12948072267251712UL;12948012139872256UL;12947947713462272UL;12948063677513728UL;12947943420526592UL;12948067972808704UL;13229534361092098UL;13229551540961282UL;13229409807040514UL;13229431281876994UL;13229418396975106UL;13229487116451842UL;13229426986909698UL;13229547245993986UL;13229542951026690UL;13229422691942402UL;13229538656059394UL;13510884783423490UL;13510893373358082UL;13510897668325378UL;13511009337475074UL;13510906258259970UL;13511026517344258UL;13511022222376962UL;13510901963292674UL;13511017927409666UL;13510962092834818UL;13511013632442370UL;13792501494448130UL;13792497199480834UL;13792492904513538UL;13792437069938690UL;13792359760527362UL;13792372645429250UL;13792381235363842UL;13792368350461954UL;13792488609546242UL;13792484314578946UL;13792376940396546UL;14073856212140034UL;14073959291355138UL;14073843327238146UL;14073834737303554UL;14073976471224322UL;14073972176257026UL;14073963586322434UL;14073912046714882UL;14073847622205442UL;14073851917172738UL;14073967881289730UL;14355387023622146UL;14355326894080002UL;14355434268262402UL;14355331189047298UL;14355442858196994UL;14355438563229698UL;14355451448131586UL;14355322599112706UL;14355309714210818UL;14355318304145410UL;14355447153164290UL;14636909244841986UL;14636806165626882UL;14636797575692290UL;14636793280724994UL;14636784690790402UL;14636922129743874UL;14636862000201730UL;14636913539809282UL;14636917834776578UL;14636926424711170UL;14636801870659586UL;14918268256649218UL;14918336976125954UL;14918259666714626UL;14918401400635394UL;14918276846583810UL;14918384220766210UL;14918397105668098UL;14918272551616514UL;14918388515733506UL;14918281141551106UL;14918392810700802UL;15199747528261634UL;15199751823228930UL;15199743233294338UL;15199734643359746UL;15199867787345922UL;15199872082313218UL;15199811952771074UL;15199876377280514UL;15199859197411330UL;15199756118196226UL;15199863492378626UL;15481351354580992UL;15481222503858176UL;15481355649679361UL;15481226799611904UL;15481218210922496UL;15481342763204608UL;15481338467909632UL;15481286930268160UL;15481231094317056UL;15481437252616193UL;15481334172549120UL;15481347057647616UL;15481209619415040UL;15481368537333761UL;15481364239286273UL;15762813445734402UL;15762822035668994UL;15762684596715522UL;15762809150767106UL;15762693186650114UL;15762826330636290UL;15762701776584706UL;15762817740701698UL;15762706071552002UL;15762697481617410UL;15762761906126850UL;16044185342312448UL;16044159572836352UL;16044339963101185UL;16044193932771328UL;16044297011068928UL;16044387206037505UL;16044331372249089UL;16044219703558144UL;16044314192707585UL;16044202523033600UL;16044309897281537UL;16044318486364161UL;16044327075774465UL;16044168164343808UL;16044284125970432UL;16044352850558977UL;16044181047738368UL;16044425861464065UL;16044301308002304UL;16044236883689472UL;16044249767542784UL;16044288421330944UL;16044292716625920UL;16044245472444416UL;16044344257216513UL;16044176753033216UL;16044335666364417UL;16044305603100673UL;16044322780938241UL;16044172457279488UL;16044374320807937UL;16044198227673088UL;16044348552708097UL;16325763398041600UL;16325673204383744UL;16325793463074817UL;16325656024449024UL;16325849297518593UL;16325823529418753UL;16325784873992193UL;16325660319023104UL;16325634549547008UL;16325819233927169UL;16325862182748161UL;16325724744253440UL;16325802052485121UL;16325677499744256UL;16325771987779584UL;16325716156743682UL;16325643141054464UL;16325900838174721UL;16325810643075073UL;16325776284712960UL;16325767693336576UL;16325759102681088UL;16325780579811329UL;16325789169418241UL;16325694680268800UL;16325668909481984UL;16325651729743872UL;16325814939811841UL;16325797757648897UL;16325647433990144UL;16325806348959745UL;16325827826876417UL;16325836417269761UL;16325720449155072UL;16325711860400128UL;16607156770111490UL;16607062280830978UL;16607165365157888UL;16607161065078786UL;16888631750230018UL;16888636046966784UL;17170106723598338UL;17170111018565634UL;17170012234317826UL;17451581705486336UL;17733151168266240UL;17733155463364609UL;17733146871332864UL;17733018024607744UL;17733030908002304UL;17733133986234368UL;17733026613297152UL;17733138281594880UL;17733022317543424UL;17733164056444929UL;17733009433100288UL;17733086743953408UL;17733142576889856UL;17733237066301441UL;18014561720664064UL;18014651912749057UL;18014621848043520UL;18014505884712960UL;18014484409810944UL;18014664800075777UL;18014712043012097UL;18014497294254080UL;18014617553600512UL;18014608962945024UL;18014630440075265UL;18014639029682177UL;18014656213090305UL;18014501590007808UL;18014613258305536UL;18014626144976896UL;18014643323338753UL;18014647617912833UL;18014493001318400UL;18296023810965506UL;18295894961946626UL;18296053875736578UL;18295942206586882UL;18296040990834690UL;18295950796521474UL;18295899256913922UL;18296010926063618UL;18295963681423362UL;18295877782077442UL;18295886372012034UL;18295955091488770UL;18295933616652290UL;18295912141815810UL;18295890666979330UL;18295907846848514UL;18295929321684994UL;18295925026717698UL;18295903551881218UL;18295937911619586UL;18295946501554178UL;18577387123245056UL;18858862100021248UL;19140573296525313UL;19140543230181377UL;19140547524755457UL;19140564706918401UL;19140397201096704UL;19140530346917889UL;19140650605281281UL;19140556116066305UL;19140560410181633UL;19140513165148160UL;19140427266850816UL;19140470216261632UL;19140508869787648UL;19140611949854721UL;19140401496850432UL;19140538936524801UL;19140577594966017UL;19140392908161024UL;19140422971490304UL;19140534641098753UL;19140526051819520UL;19140405791555584UL;19140599064625153UL;19140461627506688UL;19140474511360000UL;19140384316653568UL;19140418676588544UL;19140410086129664UL;19140521754886144UL;19140551819591681UL;19140517460443136UL;19140444447375360UL;19140569001033729UL;19422065456644097UL;19421988145266688UL;19422129879318529UL;19422134174220289UL;19703467413864448UL;19703347154518016UL;19703488889946113UL;19703501773012993UL;19703480300339201UL;19703411580928000UL;19703561903276033UL;19703342861582336UL;19703334270074880UL;19703493183602689UL;19703355744976896UL;19703471708307456UL;19703351450271744UL;19703514663616513UL;19703458823208960UL;19703463118569472UL;19703497478176769UL;19703476005240832UL;19984882264768514UL;19985092718166018UL;20266361536249858UL;20266413075857410UL;20266421665792002UL;20266292816773122UL;20266305701675010UL;20266374421151746UL;20266297111740418UL;20266327176511490UL;20266309996642306UL;20266383011086338UL;20266301406707714UL;20266284226838530UL;20266417370824706UL;20266365831217154UL;20266318586576898UL;20266425960759298UL;20266357241282562UL;20266567694680066UL;20266395895988226UL;20266322881544194UL;20266370126184450UL;20266344356380674UL;20266408780890114UL;20547810744795136UL;20547840807337986UL;20547823627468802UL;20829298606473216UL;21110790763118592UL;21392162656616450UL;21392166951583746UL;21392248555962370UL;21392115411976194UL;21392111117008898UL;21392102527074306UL;21392188426420226UL;21392235671060482UL;21392136886812674UL;21392278620733442UL;21392265735831554UL;21392154066681858UL;21392158361649154UL;21392175541518338UL;21392128296878082UL;21392124001910786UL;21392171246551042UL;21392119706943490UL;21392149771714562UL;21392179836485634UL;21392132591845378UL;21673637633064962UL;21673590388424706UL;21673650517966850UL;21673598980063232UL;21673577503522818UL;21673641928032258UL;21673586093457410UL;21673654812934146UL;21673624748163074UL;21673633338097666UL;21673723532410882UL;21673611863261186UL;21673740712280066UL;21673663402868738UL;21673646222999554UL;21673603274964992UL;21673594685227008UL;21673710647508994UL;21673607568293890UL;21673753597181954UL;21673891037904897UL;21673629043130370UL;21955125494349826UL;21955138379251714UL;21955198508793858UL;21955185623891970UL;21955065364807682UL;21955129789317122UL;21955228573564930UL;21955082547298304UL;21955069659774978UL;21955104019513346UL;21955099724546050UL;21955052479905794UL;21955116904415234UL;21955078249709570UL;21955073954742274UL;21955121199382530UL;21955061069840386UL;21955215688663042UL;21955112609447938UL;21955086839644162UL;21955108314480642UL;22236690670026752UL;22518165646802944UL;22799825307172865UL;22799593373827072UL;22799601964089344UL;22799597668728832UL;23081162842505216UL;23081308871458817UL;23081240154406913UL;23081304576557057UL;23362697947185153UL;23362689357578241UL;23362702246346753UL;23362663587184641UL;23362642111102976UL;23362547622150144UL;23362693651693569UL;23362685060841473UL;23362672175415297UL;23362526147510272UL;23362650702479360UL;23362599162019840UL;23362775255941121UL;23362676470251521UL;23362667880841217UL;23362723715284993UL;23362577692360704UL;23362551917510656UL;23362680766726145UL;23362508967313408UL;23362543327248384UL;23362594866921472UL;23362569098035200UL;23362633520447488UL;23362530442215424UL;23362732311052289UL;23362534736789504UL;23362654997577729UL;23362736600514561UL;23362637815808000UL;23362521851756544UL;23362586278166528UL;23362659291758593UL;23362646405545984UL;23362517558820864UL;23644035484024834UL;23644048368926722UL;23643979649449986UL;23643966764548098UL;23643975354482690UL;23644065548795906UL;23643923814875138UL;23643962469580802UL;23643902340038658UL;23643988239384578UL;23643928109842434UL;23643953879646210UL;23643936699777026UL;23643949584678914UL;23643915224940546UL;23643910929973250UL;23643932404809730UL;23644078433697794UL;23643919519907842UL;23643958174613506UL;23643971059515394UL;23925433152831490UL;23925450332700674UL;23925441742766082UL;23925428857864194UL;23925463217602562UL;23925403088060418UL;23925377318256642UL;23925385908191234UL;23925510462242818UL;23925390203158530UL;23925553411915778UL;23925407383027714UL;23925411677995010UL;23925523347144706UL;23925540527013890UL;23925446037733378UL;23925398793093122UL;23925394498125826UL;23925437447798786UL;23925454629371904UL;23925424562896898UL;24207084226936833UL;24207071335677952UL;24207079927709697UL;24207088517316609UL;24206955372347392UL;24207105696858113UL;24207097105547265UL;24206933897445376UL;24207075632611328UL;24207200186073089UL;24206946781888512UL;24207161530646529UL;24207092810973185UL;24206968257380352UL;24207101400383489UL;24206976847642624UL;24207114287710209UL;24206959666921472UL;24206942488952832UL;24207109990973441UL;24206951077642240UL;24207058450579456UL;24207062745939968UL;24206972552282112UL;24207011208298496UL;24207067041234944UL;24488589264420865UL;24488584967684097UL;24488567787683841UL;24488675162783745UL;24488426054352896UL;24488417465663488UL;24488486185009152UL;24488443234091008UL;24488576377094145UL;24488421758599168UL;24488542017945600UL;24488550609321984UL;24488408874156032UL;24488572082257921UL;24488563494027265UL;24488430349058048UL;24488554904420353UL;24488546312388608UL;24488434643632128UL;24488580673568769UL;24488451824353280UL;24488559203713025UL;24488537722650624UL;24488447528992768UL;24488533427290112UL;24488636507357185UL;24769965461012480UL;25051406078050304UL;25332928295337986UL;25332808036253698UL;25332829511090178UL;25332838101024770UL;25332782266449922UL;25332777971482626UL;25332760791613442UL;25332898230566914UL;25332799446319106UL;25332915410436098UL;25332885345665026UL;25332812331220994UL;25332820921155586UL;25332803741286402UL;25332786561417218UL;25332773676515330UL;25332769381548034UL;25332825216122882UL;25332752201678850UL;25332816626188290UL;25332765086580738UL;25614471989100545UL;25614463400869889UL;25614308780998656UL;25614330255900672UL;25614394680606720UL;25614373208326146UL;25614343140933632UL;25614575069626369UL;25614441924788224UL;25614502058328065UL;25614493465378817UL;25614536414199809UL;25614489171263489UL;25614325961195520UL;25614467694526465UL;25614459105443841UL;25614390388195330UL;25614454811262977UL;25614523528970241UL;25614398975705088UL;25614386091851776UL;25614437629493248UL;25614334550474752UL;25614446219231232UL;25614497760870401UL;25614433334132736UL;25614347435835392UL;25614450516164608UL;25614476283936769UL;25614351731195904UL;25614484874526721UL;25614368911720448UL;25614317372506112UL;25614510650359809UL;25614480580411393UL;25614321665441792UL;25895710746148866UL;25895736515952642UL;25895727926018050UL;25895702156214274UL;25895865364971522UL;25895878249873410UL;25895719336083458UL;25895762285756418UL;25895757990789122UL;25895715041116162UL;25895835300200450UL;25895788055560194UL;25895770875691010UL;25895848185102338UL;25895779465625602UL;25895766580723714UL;25895753695821826UL;25895749400854530UL;25895732220985346UL;25895723631050754UL;25895775170658306UL;26177254438862850UL;26177232964026370UL;26177241553960962UL;26177224374091778UL;26177340338208770UL;26177211489189890UL;26177250143895554UL;26177177129451522UL;26177263028797442UL;26177198604288002UL;26177185719386114UL;26177194309320706UL;26177237258993666UL;26177202899255298UL;26177323158339586UL;26177245848928258UL;26177228669059074UL;26177353223110658UL;26177190014353410UL;26177310273437698UL;26177207194222594UL;26458802436571136UL;26458905510543361UL;26458952760557569UL;26458901214068737UL;26458999999758337UL;26458746595573760UL;26458793841852416UL;26458755186032640UL;26458888331001857UL;26458948459102209UL;26458742302638080UL;26458909804658689UL;26458914101395457UL;26458819610738688UL;26458862559625216UL;26458918395510785UL;26458772365967360UL;26458871149363200UL;26458768071065600UL;26458776661327872UL;26458892624658433UL;26458879741394945UL;26458733711130624UL;26458759480606720UL;26458884035575809UL;26458858264264704UL;26458811021983744UL;26458823905837056UL;26458896919232513UL;26458866854920192UL;26458875446296576UL;26458926990688257UL;26458922691002369UL;26458961344331777UL;26458750891327488UL;26740204392415234UL;26740290291761154UL;26740139967905794UL;26740161442742274UL;26740303176663042UL;26740187212546050UL;26740174327644162UL;26740144262873090UL;26740182917578754UL;26740152852807682UL;26740195802480642UL;26740273111891970UL;26740178622611458UL;26740191507513346UL;26740127083003906UL;26740200097447938UL;26740135672938498UL;26740157147774978UL;26740148557840386UL;26740212982349826UL;26740260226990082UL;27021730908536834UL;27021735203504130UL;27021636419256322UL;27303205888458754UL;27584560605560834UL;27584616440135682UL;27584603555233794UL;27584637914972162UL;27584569195495426UL;27584625030070274UL;27584573490462722UL;27584599260266498UL;27584629325037570UL;27584698044514306UL;27584586375364610UL;27584552015626242UL;27584715224383490UL;27584620735102978UL;27584577785430018UL;27584607850201090UL;27584612145168386UL;27584685159612418UL;27584582080397314UL;27584728109285378UL;27584564900528130UL;27866039878221826UL;27866160137306114UL;27866104302731266UL;27866095712796674UL;27866057058091010UL;27866100007763970UL;27866203086979074UL;27866035583254530UL;27866173022208002UL;27866048468156418UL;27866074237960194UL;27866052763123714UL;27866026993319938UL;27866112892665858UL;27866190202077186UL;27866082827894786UL;27866087122862082UL;27866078532927490UL;27866061353058306UL;27866044173189122UL;27866091417829378UL;28147742484922369UL;28147849860022273UL;28147811204595713UL;28147794025906177UL;28147669471002624UL;28147592162902016UL;28147609340870656UL;28147828390690817UL;28147841268580353UL;28147729601658881UL;28147712419889152UL;28147617931329536UL;28147768255774721UL;28147759664922625UL;28147751074332673UL;28147832680415233UL;28147776845905921UL;28147622226231296UL;28147763961659393UL;28147721009627136UL;28147673766100992UL;28147682355052544UL;28147626521591808UL;28147660882247680UL;28147725306560512UL;28147605046296576UL;28147733895839745UL;28147695241003008UL;28147596455837696UL;28147716715184128UL;28147600751591424UL;28147708124528640UL;28147772551266305UL;28147583571394560UL;28147738191265793UL;28147798319366145UL;28147643702116352UL;28147755370807297UL;28147845565906945UL;28147746779496449UL;28429153043611648UL;28710499167436802UL;28710451922796546UL;28710460512731138UL;28710537822142466UL;28710615131553794UL;28710597951684610UL;28710481987567618UL;28710520642273282UL;28710507757371394UL;28710477692600322UL;28710469102665730UL;28710473397633026UL;28710503462404098UL;28710529232207874UL;28710524937240578UL;28710628016455682UL;28710464807698434UL;28710486282534914UL;28710512052338690UL;28710516347305986UL;28710585066782722UL;28992034271002624UL;28992068632248320UL;28992193185906689UL;28992167415054337UL;28992021385969664UL;28992197481398273UL;28992085812379648UL;28992017093033984UL;28992158825971713UL;28992163121397761UL;28992141645316096UL;28992077226967040UL;28992236134727681UL;28992188891791361UL;28992029976428544UL;28992025681723392UL;28992180300939265UL;28992184595054593UL;28992042861461504UL;28992154531790849UL;28992145939759104UL;28992051451723776UL;28992171709628417UL;28992274790154241UL;28992094401134592UL;28992176004464641UL;28992201781084161UL;28992137350021120UL;28992098696232960UL;28992227551150081UL;28992008501526528UL;28992223249498113UL;28992047156363264UL;28992150236692480UL;28992133054660608UL;29273526428434432UL;29273569377845248UL;29273500658434048UL;29273543608958976UL;29273663868502017UL;29273483478237184UL;29273646686339073UL;29273749766864897UL;29273517838172160UL;29273642391764993UL;29273522133073920UL;29273625213403136UL;29273698226208769UL;29273650981175297UL;29273672458108929UL;29273492069744640UL;29273668162617345UL;29273676757270529UL;29273629508501505UL;29273620916469760UL;29273504953139200UL;29273509247713280UL;29273608031371264UL;29273573672943616UL;29273655277649921UL;29273638098108417UL;29273616622026752UL;29273560789090304UL;29273552203284480UL;29273706822893569UL;29273711111438337UL;29273612326731776UL;29273659571765249UL;29273633802682369UL;29273496362680320UL;29555040062013442UL;29555022882144258UL;29836519331266560UL;29836609525186561UL;29836592345186305UL;29836596639760385UL;29836493562380288UL;29836618116038657UL;29836562280153088UL;29836691128844289UL;29836472086495232UL;29836605231071233UL;29836570869891072UL;29836459201134592UL;29836682540679169UL;29836588051529729UL;29836648179630081UL;29836643886170113UL;29836695426170881UL;29836523626364928UL;29836467791593472UL;29836442023165952UL;29836454906560512UL;29836600934596609UL;29836575166824448UL;29836476381855744UL;29836622411530241UL;29836557984792576UL;29836583756103681UL;29836661064859649UL;29836433431658496UL;29836510742511616UL;29836532215316480UL;29836699720286209UL;29836678251216897UL;29836566575448064UL;29836579461922817UL;29836450611855360UL;29836613821923329UL;29836626706169857UL;29836446316101632UL;29836545101266944UL;30117826810478592UL;30399486470848512UL;30680931382853632UL;30962560971702273UL;30962599627128833UL;30962483669041153UL;30962487958372353UL;30962371993337856UL;30962479368765441UL;30962457891635200UL;30962475073667072UL;30962333338501120UL;30962466482290688UL;30962354813403136UL;30962513728765953UL;30962367698436096UL;30962505137913857UL;30962350518697984UL;30962509432029185UL;30962341930008576UL;30962346222944256UL;30962500841439233UL;30962462186995712UL;30962410649354240UL;30962359107977216UL;30962470776733696UL;30962492252028929UL;30962496546603009UL;30962376288698368UL;31243919987572738UL;31243834088226818UL;31243907102670850UL;31244091786264578UL;31243816908357634UL;31243894217768962UL;31243937167441922UL;31243950052343810UL;31243868447965186UL;31243808318423042UL;31243941462409218UL;31243846973128706UL;31243945757376514UL;31243898512736258UL;31243889922801666UL;31243842678161410UL;31243821203324930UL;31243825498292226UL;31243881332867074UL;31243851268096002UL;31243829793259522UL;31243885627834370UL;31243932872474626UL;31525364898398210UL;31525347718529026UL;31525377783300098UL;31525236049379330UL;31525227459444738UL;31525210279575554UL;31525266114150402UL;31525261819183106UL;31525214574542850UL;31525274704084994UL;31525278999052290UL;31525248934281218UL;31525270409117698UL;31525334833627138UL;31525218869510146UL;31525201689640962UL;31525257524215810UL;31525287588986882UL;31525223164477442UL;31525253229248514UL;31525231754412034UL;31806831289827328UL;32088366392410114UL;32088271903129602UL;32088314852802562UL;32088259018227714UL;32088233248423938UL;32088267608162306UL;32088516716265474UL;32088246133325826UL;32088250428293122UL;32088241838358530UL;32088306262867970UL;32088344917573634UL;32088374982344706UL;32088332032671746UL;32088293377966082UL;32088362097442818UL;32088336327639042UL;32088357802475522UL;32088254723260418UL;32088370687377410UL;32088310557835266UL;32088323442737154UL;32088276198096898UL;32088319147769858UL;32369888612319233UL;32369721106497536UL;32369832775188480UL;32369794121662464UL;32369884315582465UL;32369725402251264UL;32369875724992513UL;32369733991530496UL;32369742581989376UL;32369845660286976UL;32369751172251648UL;32369862841925633UL;32369871430156289UL;32369858546499585UL;32369729696956416UL;32369974510682113UL;32369708222054400UL;32369798416760832UL;32369892906434561UL;32369785532907520UL;32369837070548992UL;32369746876891136UL;32369776947494912UL;32369854252318721UL;32369867135582209UL;32369716813561856UL;32369922970025985UL;32369849957220352UL;32369841365843968UL;32369768352776192UL;32369927272202241UL;32369901501612033UL;32369897201926145UL;32369935855255553UL;32369880021467137UL;32651277690994690UL;32651170316812290UL;32651114482237442UL;32651123072172034UL;32651135957073922UL;32651166021844994UL;32651247626223618UL;32651148841975810UL;32651187496681474UL;32651110187270146UL;32651161726877698UL;32651153136943106UL;32651118777204738UL;32651131662106626UL;32651127367139330UL;32651264806092802UL;32651234741321730UL;32651101597335554UL;32651157431910402UL;32651174611779586UL;32651178906746882UL;32932752666984450UL;32932709717311490UL;32932628112932866UL;32932602343129090UL;32932623817965570UL;32932645292802050UL;32932662472671234UL;32932640997834754UL;32932653882736642UL;32932576573325314UL;32932649587769346UL;32932589458227202UL;32932739782082562UL;32932606638096386UL;32932722602213378UL;32932636702867458UL;32932585163259906UL;32932610933063682UL;32932632407900162UL;32932598048161794UL;32932593753194498UL;33214206169776130UL;33214231939579906UL;33214274889252866UL;33214150335201282UL;33214266299318274UL;33214210464743426UL;33214219054678018UL;33214176105005058UL;33214262004350978UL;33214214759710722UL;33214236234547202UL;33214416623173634UL;33214223349645314UL;33214146040233986UL;33214158925135874UL;33214133155332098UL;33214244824481794UL;33214257709383682UL;33214171810037762UL;33214167515070466UL;33214154630168578UL;33214270594285570UL;33214141745266690UL;33214193284874242UL;33495633901977602UL;33495629607010306UL;33495646786879490UL;33495642491912194UL;33495651081846786UL;33495719801323522UL;33495745571127298UL;33495681146617858UL;33495689736552450UL;33495741276160002UL;33495625312043010UL;33495698326487042UL;33495608132173826UL;33495891600015362UL;33495668261715970UL;33495732686225410UL;33495616722108418UL;33495694031519746UL;33495621017075714UL;33495749866094594UL;33495685441585154UL;33495736981192706UL;33495706916421634UL; |];


//Enum for return values 
type FLTypeDUnion = | Enumvariant_37 of (lltype*string) | Enumvariant_22 of LBox<expr> list | Enumvariant_4 of int | Enumvariant_21 of (lltype*string) list | Enumvariant_6 of string | Enumvariant_2 of int*int | Enumvariant_5 of float | Enumvariant_29 of String | Enumvariant_35 of lltype | Enumvariant_0 of expr | Enumvariant_1 of unit ;;

let _rrsemaction_0_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLint 

let _rrsemaction_1_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLstring 

let _rrsemaction_2_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLfloat 

let _rrsemaction_3_(parser:RTParser<FLTypeDUnion,unit>, v:string) =  (LLunknown, v) 

let _rrsemaction_4_(parser:RTParser<FLTypeDUnion,unit>, x:(lltype*string)) =  x 

let _rrsemaction_5_(parser:RTParser<FLTypeDUnion,unit>, v:string, _item1_:expr, t:lltype) =  (t,v) 

let _rrsemaction_6_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_7_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<string>) =  Var(x) 

let _rrsemaction_8_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<string>, _item1_:expr, l:LBox<expr> list, _item3_:expr) = Apply(x, l)

let _rrsemaction_9_(parser:RTParser<FLTypeDUnion,unit>, x:string) =  Strlit(x) 

let _rrsemaction_10_(parser:RTParser<FLTypeDUnion,unit>, x:int) =  Integer(x) 

let _rrsemaction_11_(parser:RTParser<FLTypeDUnion,unit>, x:float) =  Floatpt(x) 

let _rrsemaction_12_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  Nil 

let _rrsemaction_13_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_14_(parser:RTParser<FLTypeDUnion,unit>, e:String, x:expr) =  Uniop(e,x) 

let _rrsemaction_15_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "not" 

let _rrsemaction_16_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "~" 

let _rrsemaction_17_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "car" 

let _rrsemaction_18_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cdr" 

let _rrsemaction_19_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "print" 

let _rrsemaction_20_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_21_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("^",x,y) 

let _rrsemaction_22_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_23_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_24_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "*" 

let _rrsemaction_25_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "/" 

let _rrsemaction_26_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "%" 

let _rrsemaction_27_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_28_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_29_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "+" 

let _rrsemaction_30_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "-" 

let _rrsemaction_31_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_32_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_33_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "=" 

let _rrsemaction_34_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "!=" 

let _rrsemaction_35_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "eq" 

let _rrsemaction_36_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<=" 

let _rrsemaction_37_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">=" 

let _rrsemaction_38_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<" 

let _rrsemaction_39_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">" 

let _rrsemaction_40_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cons" 

let _rrsemaction_41_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_42_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("and" ,x,y) 

let _rrsemaction_43_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_44_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("or",x,y) 

let _rrsemaction_45_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_46_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, v:(lltype*string) list, _item2_:expr, x:LBox<expr>) =  TypedLambda(v,LLunknown,x) 

let _rrsemaction_47_(parser:RTParser<FLTypeDUnion,unit>, t:lltype, _item1_:expr, v:(lltype*string) list, _item3_:expr, x:LBox<expr>) =  TypedLambda(v,t,x) 

let _rrsemaction_48_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_49_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr, _item4_:expr, y:LBox<expr>) = TypedLet(d,x,y)

let _rrsemaction_50_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_51_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr) = TypedDefine(d,x)

let _rrsemaction_52_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_53_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_54_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string), _item1_:expr, seq:(lltype*string) list) =  e::seq 

let _rrsemaction_55_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string)) =  [e] 

let _rrsemaction_56_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, _item1_:expr, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_57_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_58_(parser:RTParser<FLTypeDUnion,unit>) =  [] 

let _rrsemaction_59_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:LBox<expr> list, _item2_:expr) =  ListLiteral(x) 

let _rrsemaction_60_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_61_(parser:RTParser<FLTypeDUnion,unit>, x:expr) = x

let _rrsemaction_62_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) = x

let _rrsemaction_63_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_64_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:LBox<expr>, _item3_:expr, x:expr) =  Whileloop(p,x) 

let _rrsemaction_65_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:LBox<expr>, _item3_:expr, x:expr, _item5_:expr, y:expr) =  Ifelse(p,x,y)

let _rrsemaction_66_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) =  x 

let _rrsemaction_67_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_68_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_69_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_70_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_71_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<expr> list) =  CodeBlock(x) 

let _rrsemaction_72_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =   Unchecked.defaultof<unit>

let make_parser() : RTParser<FLTypeDUnion,unit> =
  let parser1 = skeleton_parser(Unchecked.defaultof<unit>,73,120)
  let mutable rule = skeleton_production("")
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_35(_rrsemaction_0_(parser,_item0_)));
  parser1.Rules.[0] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_35(_rrsemaction_1_(parser,_item0_)));
  parser1.Rules.[1] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_35(_rrsemaction_2_(parser,_item0_)));
  parser1.Rules.[2] <- rule;
  rule <- skeleton_production("UNTYPED_PREFIX")
  rule.action <- fun parser ->
    (let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_37(_rrsemaction_3_(parser,v)));
  parser1.Rules.[3] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_37(_rrsemaction_4_(parser,x)));
  parser1.Rules.[4] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_35(_rr_35) ->  _rr_35 | _ -> Unchecked.defaultof<lltype>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_37(_rrsemaction_5_(parser,v,_item1_,t)));
  parser1.Rules.[5] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_6_(parser,_item0_,x,_item2_)));
  parser1.Rules.[6] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_7_(parser,x)));
  parser1.Rules.[7] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let l = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_8_(parser,x,_item1_,l,_item3_)));
  parser1.Rules.[8] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_9_(parser,x)));
  parser1.Rules.[9] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_4(_rr_4) ->  _rr_4 | _ -> Unchecked.defaultof<int>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_10_(parser,x)));
  parser1.Rules.[10] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_5(_rr_5) ->  _rr_5 | _ -> Unchecked.defaultof<float>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_11_(parser,x)));
  parser1.Rules.[11] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_12_(parser,_item0_)));
  parser1.Rules.[12] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_13_(parser,x)));
  parser1.Rules.[13] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_14_(parser,e,x)));
  parser1.Rules.[14] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_15_(parser,_item0_)));
  parser1.Rules.[15] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_16_(parser,_item0_)));
  parser1.Rules.[16] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_17_(parser,_item0_)));
  parser1.Rules.[17] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_18_(parser,_item0_)));
  parser1.Rules.[18] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_19_(parser,_item0_)));
  parser1.Rules.[19] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_20_(parser,x)));
  parser1.Rules.[20] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_21_(parser,x,_item1_,y)));
  parser1.Rules.[21] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_22_(parser,x)));
  parser1.Rules.[22] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_23_(parser,x,e,y)));
  parser1.Rules.[23] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_24_(parser,_item0_)));
  parser1.Rules.[24] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_25_(parser,_item0_)));
  parser1.Rules.[25] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_26_(parser,_item0_)));
  parser1.Rules.[26] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_27_(parser,x)));
  parser1.Rules.[27] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_28_(parser,x,e,y)));
  parser1.Rules.[28] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_29_(parser,_item0_)));
  parser1.Rules.[29] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_30_(parser,_item0_)));
  parser1.Rules.[30] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_31_(parser,x)));
  parser1.Rules.[31] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_32_(parser,x,e,y)));
  parser1.Rules.[32] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_33_(parser,_item0_)));
  parser1.Rules.[33] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_34_(parser,_item0_)));
  parser1.Rules.[34] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_35_(parser,_item0_)));
  parser1.Rules.[35] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_36_(parser,_item0_)));
  parser1.Rules.[36] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_37_(parser,_item0_)));
  parser1.Rules.[37] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_38_(parser,_item0_)));
  parser1.Rules.[38] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_39_(parser,_item0_)));
  parser1.Rules.[39] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_40_(parser,_item0_)));
  parser1.Rules.[40] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_41_(parser,x)));
  parser1.Rules.[41] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_42_(parser,x,_item1_,y)));
  parser1.Rules.[42] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_43_(parser,x)));
  parser1.Rules.[43] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_44_(parser,x,_item1_,y)));
  parser1.Rules.[44] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_45_(parser,x)));
  parser1.Rules.[45] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_46_(parser,_item0_,v,_item2_,x)));
  parser1.Rules.[46] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_35(_rr_35) ->  _rr_35 | _ -> Unchecked.defaultof<lltype>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_47_(parser,t,_item1_,v,_item3_,x)));
  parser1.Rules.[47] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_48_(parser,x)));
  parser1.Rules.[48] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let y_sitem = parser.Pop() in let y_val = (match y_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let y = lbox(y_val,y_sitem.line,y_sitem.column) in let _item4_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_49_(parser,_item0_,d,_item2_,x,_item4_,y)));
  parser1.Rules.[49] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_50_(parser,x)));
  parser1.Rules.[50] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_51_(parser,_item0_,d,_item2_,x)));
  parser1.Rules.[51] <- rule;
  rule <- skeleton_production("EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_52_(parser,x)));
  parser1.Rules.[52] <- rule;
  rule <- skeleton_production("EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_53_(parser,x)));
  parser1.Rules.[53] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_54_(parser,e,_item1_,seq)));
  parser1.Rules.[54] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_55_(parser,e)));
  parser1.Rules.[55] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_56_(parser,e,_item1_,seq)));
  parser1.Rules.[56] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_57_(parser,e)));
  parser1.Rules.[57] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    ( FLTypeDUnion.Enumvariant_22(_rrsemaction_58_(parser)));
  parser1.Rules.[58] <- rule;
  rule <- skeleton_production("LIST_LITERAL")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_59_(parser,_item0_,x,_item2_)));
  parser1.Rules.[59] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_60_(parser,_item0_,x,_item2_)));
  parser1.Rules.[60] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_61_(parser,x)));
  parser1.Rules.[61] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_62_(parser,x,_item1_)));
  parser1.Rules.[62] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_63_(parser,_item0_,x,_item2_)));
  parser1.Rules.[63] <- rule;
  rule <- skeleton_production("LOOP_STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p_sitem = parser.Pop() in let p_val = (match p_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = lbox(p_val,p_sitem.line,p_sitem.column) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_64_(parser,_item0_,_item1_,p,_item3_,x)));
  parser1.Rules.[64] <- rule;
  rule <- skeleton_production("SELECT_STATEMENT")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item5_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p_sitem = parser.Pop() in let p_val = (match p_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = lbox(p_val,p_sitem.line,p_sitem.column) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_65_(parser,_item0_,_item1_,p,_item3_,x,_item5_,y)));
  parser1.Rules.[65] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_66_(parser,x,_item1_)));
  parser1.Rules.[66] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_67_(parser,x)));
  parser1.Rules.[67] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_68_(parser,x)));
  parser1.Rules.[68] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_69_(parser,e,seq)));
  parser1.Rules.[69] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_70_(parser,e)));
  parser1.Rules.[70] <- rule;
  rule <- skeleton_production("PROGRAM")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_71_(parser,x)));
  parser1.Rules.[71] <- rule;
  rule <- skeleton_production("START")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_1(_rrsemaction_72_(parser,_item0_)));
  parser1.Rules.[72] <- rule;

  for i in 0..1903 do
    let (sti,symi,action) = decode_action(TABLE.[i])
    parser1.RSM.[sti].Add(SYMBOLS.[symi],action)
  for s in SYMBOLS do ignore (parser1.Symset.Add(s));
  parser1;;

let convert_token (lt:RawToken) =
  if lt=null then None
  else
    let (uval,utype) = 
      match lt.token_name with
        | "Alphanum" -> (FLTypeDUnion.Enumvariant_6((fun x-> x)(lt.token_text)),"VAR")
        | "Num" -> (FLTypeDUnion.Enumvariant_4(int(lt.token_text)),"INTEGER_LITERAL")
        | "Float" -> (FLTypeDUnion.Enumvariant_5(float(lt.token_text)),"FLOAT_LITERAL")
        | "StrLit" -> (FLTypeDUnion.Enumvariant_6((fun x -> x)(lt.token_text)),"STRING_LITERAL")
        | "in" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IN")
        | "{" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LCURLY")
        | "]" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RBRACKET")
        | "eq" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQ")
        | "." -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DOT")
        | "for" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FOR")
        | "--" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUSMINUS")
        | "not" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOT")
        | "boolean" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"BOOLEAN")
        | "||" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"OR")
        | "=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQUALS")
        | "," -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COMMA")
        | "~" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TILDA")
        | ">" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GT")
        | "let" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LET")
        | "else" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"ELSE")
        | "-" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUS")
        | "+" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUS")
        | "/" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DIVIDE")
        | "^" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EXPONENT")
        | "cdr" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CDR")
        | "while" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"WHILE")
        | "(" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LPAREN")
        | "if" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IF")
        | "define" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DEFINE")
        | "false" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FALSE")
        | "%" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MODULO")
        | "true" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TRUE")
        | ")" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RPAREN")
        | "++" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUSPLUS")
        | "<=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LTE")
        | "print" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PRINT")
        | ":" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COLON")
        | "nil" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NIL")
        | "*" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TIMES")
        | ">=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GTE")
        | "<" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LT")
        | "!=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOTEQ")
        | "cons" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CONS")
        | "[" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LBRACKET")
        | "car" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CAR")
        | "int" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"INT")
        | "&&" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"AND")
        | "}" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RCURLY")
        | "String" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"STRING")
        | "lambda" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LAMBDA")
        | "float" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FLOAT")
        | ";" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),";")
        | "'" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"'")
        | "EOF" -> (FLTypeDUnion.Enumvariant_1(Unchecked.defaultof<unit>),"EOF")
        | x -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"Error:"+x)
    Some({TerminalToken.sym=utype; svalue=uval; line=lt.line; column=lt.column;});;

let parse_with(parser:RTParser<FLTypeDUnion,unit>, lexer:AbstractLexer<unit>) : expr option  =
  lexer.set_shared(parser.exstate)
  parser.NextToken <- fun () -> convert_token(lexer.next_lt())
  match parser.parse_core() with
    | Some(FLTypeDUnion.Enumvariant_0(_yyxres_)) -> Some(_yyxres_)
    | _ -> None;;

