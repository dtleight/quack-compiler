//F# Parser generated by Rustlr for grammar quack
    
module Quack
open System;
open System.Collections.Generic;
open Fussless;
open Fussless.RuntimeParser;
//AST modifications
// 1. Sequences are now Applys
// 2. Code blocks are now a thing
// 3. BeginSeq's are ListLiterals and have different syntax
// 4. Vars are now  be LBox'ed
// 5. While/If Conditions are now LBox'ed
// 6. Added LLpointer
type expr =
  |Integer of int
  | Floatpt of float
  | Strlit of string
  | Var of LBox<string>
  | Nil
  | Binop of string*expr*expr
  | Uniop of string*expr
  | Ifelse of LBox<expr>*expr*expr
  | Whileloop of LBox<expr>*expr
  | Define of LBox<string>*expr
  | TypedDefine of LBox<lltype*string>*expr
  | Lambda of (string list)*expr
  | TypedLambda of ((lltype*string) list)*lltype*LBox<expr>
  | Let of LBox<string>*expr*LBox<expr>
  | TypedLet of LBox<lltype*string>*expr*LBox<expr>
  | Quote of expr
  | Setq of LBox<string>*expr
  | Apply of LBox<string> * LBox<expr> list
  | ListLiteral of LBox<expr> list
  | CodeBlock of LBox<expr> list
  // type expressions
  | TypeExpr of lltype
  | TypedVal of (lltype*expr) 
  | Label of string   // not a proper expression - just a temporary
  | Error
 and lltype =  // abstract syntax for type expressions
  | LLint | LLfloat | LLstring
  | LList of lltype | LLtuple of lltype list
  | LLfun of (lltype list)*lltype
  | LLpointer of lltype
  | LLunknown | LLuntypable | LLvar of string | LLunit
//lexattribute line_comment #
//-------------------------------------------------------
//LEX TERMINALS
//-------------------------------------------------------
//Math Operators
//Comparison Operators
//Logic Operators
//Misc Operators
//Primitive Types
//Syntax Components
//Grouping Symbols
//Declaration Symbols
//Loops and Decision Statements
//Value Literals
//Imports
//lexterminal YOINK yoink
//-------------------------------------------------------
//VALUE TERMINALS
//-------------------------------------------------------
//-------------------------------------------------------
//PRODUCTION DECLARATIONS
//-------------------------------------------------------
//Expressions
// Sequences
//Operators
//Statement Types
//Types
//-------------------------------------------------------
//GRAMMAR PRODUCTION RULES
//-------------------------------------------------------
//UNIT_EXPR --> LBRACKET EXPR_SEQ:x RBRACKET {}
//UNIT_EXPR --> TRUE { True }
//UNIT_EXPR --> FALSE { False }
//THIS IS A TEMPORARY INJECTION FOR A LIST LITERAL- THIS NEEDS TO CHANGE
//EXPR_SEQ --> EXPR:[e] ;  EXPR_SEQ:seq  { e:: seq }
//EXPR_SEQ --> EXPR:[e] ;  { [e] } 
//EXPR_STATEMENT --> EXPR_SEQ:e { CodeBlock(e) } 

let private SYMBOLS = [|"_WILDCARD_TOKEN_";";";"'";"PLUS";"MINUS";"TIMES";"DIVIDE";"MODULO";"EXPONENT";"EQUALS";"PLUSPLUS";"MINUSMINUS";"LT";"GT";"LTE";"GTE";"EQ";"NOTEQ";"OR";"AND";"NOT";"CONS";"CAR";"CDR";"TILDA";"LAMBDA";"BOOLEAN";"INT";"STRING";"FLOAT";"DOT";"COMMA";"COLON";"LBRACKET";"RBRACKET";"LCURLY";"RCURLY";"LPAREN";"RPAREN";"LET";"DEFINE";"IN";"IF";"ELSE";"FOR";"WHILE";"TRUE";"FALSE";"NIL";"VAR";"INTEGER_LITERAL";"FLOAT_LITERAL";"STRING_LITERAL";"UNIT_EXPR";"LAMBDA_EXPR";"UNARY_OPERATOR_EXPR";"EXPONENT_OPER";"BINOP_MULTIPLICATION_EXPR";"BINOP_ADDITION_EXPR";"AND_EXPR";"OR_EXPR";"BINOP_EQUALITY_EXPR";"DEFINE_EXPR";"LET_EXPR";"EXPR";"EXPR_SEQ";"LIST_SEQ";"VAR_SEQ";"STATEMENT_SEQ";"LIST_LITERAL";"CODE_BLOCK";"LAMBDA_BLOCK";"UNIOP";"BINOP_MULT_OPER";"BINOP_PLUS_OPER";"BINOP_EQUAL_OPER";"PROGRAM";"STATEMENT";"EXPR_STATEMENT";"LOOP_STATEMENT";"SELECT_STATEMENT";"UNIT_TYPE";"UNTYPED_PREFIX";"TYPE_PREFIX";"START";"EOF"|];

let private TABLE:uint64 [] = [|94489608192UL;180389281792UL;107376214016UL;244814249985UL;158914969600UL;240519217153UL;103080853504UL;292059480065UL;193274445824UL;124554575872UL;210454380544UL;330713071617UL;326419939329UL;85901508608UL;120259346432UL;309239152641UL;249108299777UL;223338692608UL;214750134272UL;167504969728UL;171801051136UL;274878693377UL;141735886848UL;253403136001UL;266289872897UL;98784968704UL;339304710145UL;296354185217UL;231929610241UL;257699610625UL;115966345216UL;347894841345UL;206160527360UL;227635822593UL;261994840065UL;219044642816UL;343597514753UL;236223660033UL;270583791617UL;281535109005314UL;281621008351234UL;281492159332354UL;281487864365058UL;281513634168834UL;281509339201538UL;281547993907202UL;281496454299650UL;281552288874498UL;281543698939906UL;281608123449346UL;281651073122306UL;281505044234242UL;281526519070722UL;281479274430466UL;281556583710720UL;281539403972610UL;281638188220418UL;281565173776386UL;281530814038018UL;281500749266946UL;563117461536770UL;563113166569474UL;563121756504066UL;563164706177026UL;563143231340546UL;563044447092738UL;563173296111618UL;563091691732994UL;563070216896514UL;563065921929218UL;563169001144322UL;563104576634882UL;563156116242434UL;563035857158146UL;563053037027330UL;563057331994626UL;563074511863810UL;563048742060034UL;563160411209730UL;563108871602178UL;563315030032386UL;563130346438658UL;844742761119745UL;844493652819968UL;844480767852544UL;844515127459840UL;844437817786368UL;844506536476674UL;844558076084226UL;844446406934530UL;844502241509378UL;844601025757186UL;844454996869122UL;844459291836418UL;844442113343488UL;844463587917824UL;844497947852800UL;844485062492160UL;844570960986114UL;844747055562753UL;844588140855298UL;844450701901826UL;844476472426496UL;844429227065346UL;844489357590528UL;1126033050894338UL;1126028755927042UL;1126007281090562UL;1125938561613826UL;1407495143751682UL;1407460784013314UL;1407482258849794UL;1407593927999490UL;1407533798457346UL;1407477963882498UL;1407473668915202UL;1407469373947906UL;1407598222966786UL;1407490848784386UL;1407499438718978UL;1407585338064898UL;1407589633032194UL;1407581043097602UL;1688875630657538UL;1688983004839938UL;1688922875297794UL;1688905695428610UL;1688871335690242UL;1688862745755650UL;1688931465232386UL;1688854155821058UL;1689013069611010UL;1688909990395906UL;1688918580330498UL;1688914285363202UL;1688884220592130UL;1688940055166978UL;1689025954512898UL;1688888515559426UL;1688901400461314UL;1688879925624834UL;1688867040722946UL;1688995889741826UL;1688927170265090UL;1970457982205954UL;1970500931878914UL;1970376377827330UL;1970384967761922UL;1970363492925442UL;1970389262729218UL;1970488046977026UL;1970346313056258UL;1970329133187074UL;1970359197958146UL;1970337723121666UL;1970402147631106UL;1970380672794626UL;1970397852663810UL;1970354902990850UL;1970406442598402UL;1970350608023554UL;1970470867107842UL;1970342018088962UL;1970393557696514UL;1970415032532994UL;2251932957802498UL;2251838468521986UL;2251928662835202UL;2251907187998722UL;2533584029548545UL;2533480950923264UL;2533515309613057UL;2533614095106049UL;2533455179677696UL;2533511014055937UL;2533468064841728UL;2533390756741120UL;2533571144581121UL;2533523898695681UL;2533399344971776UL;2533622685237249UL;2533536785235969UL;2533360691904512UL;2533395049742336UL;2533369280004096UL;2533485244776448UL;2533416526282752UL;2533532490006529UL;2533433705365504UL;2533442295365632UL;2533446591447040UL;2533506720006145UL;2533498129088512UL;2533502426218497UL;2533373575364608UL;2533605503467521UL;2533382166609920UL;2533549669089281UL;2533566851645441UL;2533519604645889UL;2533541080268801UL;2533489540530176UL;2533429413740546UL;2533493835038720UL;2533639867138050UL;2533377871249408UL;2533618387910657UL;2533545374187521UL;2533528193531905UL;2814908684435456UL;3096332119179266UL;3096349299048450UL;3096430903427074UL;3096327824211970UL;3096340709113858UL;3096345004081154UL;3096383658786818UL;3096310644342786UL;3096319234277378UL;3096443788328962UL;3096435198394370UL;3096439493361666UL;3096323529244674UL;3096448083296258UL;3377704019099648UL;3659350794108930UL;3659196175286274UL;3659320729337858UL;3659337909207042UL;3659204765220866UL;3659178995417090UL;3659209060188162UL;3659226240057346UL;3659187585351682UL;3659213355155458UL;3659252009861122UL;3659243419926530UL;3659256304828418UL;3659307844435970UL;3659264894763010UL;3659234829991938UL;3659191880318978UL;3659247714893826UL;3659200470253570UL;3659230535024642UL;3659239124959234UL;3940808591409152UL;4222257795104770UL;4222159010856962UL;4222214845431810UL;4222141830987778UL;4222176190726146UL;4222150420922370UL;4222154715889666UL;4222163305824258UL;4222189075628034UL;4222201960529922UL;4222146125955074UL;4222193370595330UL;4222180485693442UL;4222287859875842UL;4222128946085890UL;4222206255497218UL;4222184780660738UL;4222137536020482UL;4222197665562626UL;4222270680006658UL;4222300744777730UL;4222283568185344UL;4503762837504002UL;4503659758288898UL;4503603923714050UL;4503775722405890UL;4503633990909952UL;4503664053256194UL;4503681233125378UL;4503732772732930UL;4503625398550530UL;4503651168354306UL;4503612513648642UL;4503655463321602UL;4503676938158082UL;4503629693517826UL;4503668348223490UL;4503689823059970UL;4503638283452418UL;4503621103583234UL;4503745657634818UL;4503616808615938UL;4503672643190786UL;4785164800098306UL;4785130440359938UL;4785388140756993UL;4785151915196418UL;4785100377751552UL;4785091785654274UL;4785147620229122UL;4785134735327234UL;4785126145392642UL;4785237814542338UL;4785087490686978UL;4785156210163714UL;4785220634673154UL;4785139030294530UL;4785207749771266UL;4785250699444226UL;4785108965523458UL;4785078900752386UL;4785104672849920UL;4785113260490754UL;4785143325261826UL;4785096082849792UL;5066717085761536UL;5066772919484416UL;5066781510402049UL;5066888885501953UL;5066635482300416UL;5066845934977025UL;5066794395041793UL;5066824459485185UL;5066669840138240UL;5066648365760512UL;5066802983927809UL;5066644070400000UL;5066820164583425UL;5066785804451841UL;5066764330926080UL;5066742855237632UL;5066858819944449UL;5066729970073600UL;5066755741319168UL;5066815870664705UL;5066691316678656UL;5066665547137024UL;5066760035172352UL;5066708495761408UL;5066652661645312UL;5066674135367680UL;5066893178306561UL;5066897475633153UL;5066777216614401UL;5066880297402369UL;5066656957005824UL;5066790100008961UL;5066811575631873UL;5066798689091585UL;5066768625434624UL;5066807280402433UL;5066721381842944UL;5348235015094272UL;5348381044113409UL;5348376749080577UL;5629512419835906UL;5629521009770498UL;5629533894672386UL;5629503829901314UL;5629529599705090UL;5629589729247234UL;5629645563822082UL;5629555369508866UL;5629581139312642UL;5629576844345346UL;5629662743691266UL;5629516714803202UL;5629563959443458UL;5629525304737794UL;5629675628593154UL;5629559664476162UL;5629572549378050UL;5629632678920194UL;5629538189639682UL;5629568254410754UL;5629551074541570UL;5911034643546114UL;5911000283807746UL;5910991693873154UL;5911150607663106UL;5910995988840450UL;5911026053611522UL;5911030348578818UL;5911120542892034UL;5911047528448002UL;5911137722761218UL;5911043233480706UL;5911004578775042UL;5910987398905858UL;5911064708317186UL;5911038938513410UL;5911056118382594UL;5911008873742338UL;5911107657990146UL;5911051823415298UL;5910978808971266UL;5911013168709634UL;6192582635028482UL;6192453786009602UL;6192522505486338UL;6192595519930370UL;6192539685355522UL;6192488145747970UL;6192531095420930UL;6192479555813378UL;6192612699799554UL;6192513915551746UL;6192475260846082UL;6192462375944194UL;6192501030649858UL;6192509620584450UL;6192466670911490UL;6192526800453634UL;6192625584701442UL;6192505325617154UL;6192518210519042UL;6192483850780674UL;6192470965878786UL;6474143508987904UL;6474139214479360UL;6474031840559104UL;6474164983562241UL;6474018953953280UL;6474023249313792UL;6474134918725632UL;6474027545198592UL;6474049018920960UL;6474044723691520UL;6474160688005121UL;6474040430690304UL;6474152100167681UL;6474272359186433UL;6474083379314688UL;6474169278595073UL;6474173572644865UL;6474182163955713UL;6474010365853696UL;6474156396969985UL;6474130624872448UL;6474177867481089UL;6474233703497729UL;6474186459185153UL;6474147803037696UL;6755481048317954UL;6755459573481474UL;6755463868448770UL;6755468163416066UL;6755416623808514UL;6755420918775810UL;6755562652696578UL;6755532587925506UL;6755476754923520UL;6755433803677698UL;6755450983546882UL;6755472458383362UL;6755425213743106UL;6755403738906626UL;6755489638252546UL;6755455278514178UL;6755545472827394UL;6755438098644994UL;6755429508710402UL;6755575537598466UL;6755412328841218UL;7037093462147074UL;7036994677899266UL;7036981792997378UL;7037033332604930UL;7036973203062786UL;7037080577245186UL;7036998972866562UL;7036960318160898UL;7037089167179778UL;7036977498030082UL;7036968908095490UL;7037097757114370UL;7036990382931970UL;7037084872212482UL;7318504017887234UL;7318714471284738UL;7599858731581442UL;7599957515829250UL;7599888796352514UL;7599987580600322UL;7599901681254402UL;7599914566156290UL;7599893091319810UL;7599828666810370UL;7599841551712258UL;7599880206417922UL;7599970400731138UL;7599897386287106UL;7599875911450626UL;7599854436614146UL;7599884501385218UL;7600000465502210UL;7599837256744962UL;7599850141646850UL;7599845846679554UL;7599905976221698UL;7599863026548738UL;7881368069996546UL;7881338005225474UL;7881320825356290UL;7881376659931138UL;7881462559277058UL;7881380954898434UL;7881312235421698UL;7881363775029250UL;7881475444178946UL;7881329415290882UL;7881355185094658UL;7881333710258178UL;7881372364963842UL;7881303645487106UL;7881445379407874UL;7881325120323586UL;7881316530388994UL;7881389544833026UL;7881350890127362UL;7881359480061954UL;7881432494505986UL;8162907471937538UL;8162843047428098UL;8162830162526210UL;8162920356839426UL;8162808687689730UL;8162847342395394UL;8162937536708610UL;8162950421610498UL;8162851637362690UL;8162778622918658UL;8162864522264578UL;8162795802787842UL;8162825867558914UL;8162800097755138UL;8162855932329986UL;8162838752460802UL;8162791507820546UL;8162804392722434UL;8162787212853250UL;8162812982657026UL;8162834457493506UL;8444459755700224UL;8444348086288384UL;8444365267664896UL;8444468345962496UL;8444352382173184UL;8444472640012288UL;8444524183814145UL;8444545655504897UL;8444507000930305UL;8444391037206528UL;8444464051453952UL;8444519885111297UL;8444485524979713UL;8444416806289408UL;8444395333943298UL;8444502704455681UL;8444515591192577UL;8444481230929921UL;8444373855895552UL;8444597196161025UL;8444498409619457UL;8444489820536833UL;8444455461847040UL;8444558540472321UL;8444476937142273UL;8444335202828288UL;8444356677533696UL;8444369560666112UL;8444494115569665UL;8444421102370816UL;8444343790927872UL;8444511296159745UL;8444408216289280UL;8444532773683201UL;8725934735622144UL;8726080765034497UL;8726012045492225UL;8726076469608449UL;9007332399513602UL;9007220730363906UL;9007233615265794UL;9007276564938754UL;9007345284415490UL;9007212140429314UL;9007289449840642UL;9007267975004162UL;9007280859906050UL;9007229320298498UL;9007255090102274UL;9007362464284674UL;9007250795134978UL;9007237910233090UL;9007263680036866UL;9007259385069570UL;9007272269971458UL;9007375349186562UL;9007225025331202UL;9007216435396610UL;9007203550494722UL;9288760131780610UL;9288798786486274UL;9288768721715202UL;9288897570734082UL;9288888980799490UL;9288884685832194UL;9288794491518978UL;9288880390864898UL;9288773016682498UL;9288790196551682UL;9288781606617090UL;9288833146224642UL;9288777311649794UL;9288893275766786UL;9570187862867970UL;9570256582344706UL;9570282352148482UL;9570278057181186UL;9851843232530434UL;9851830347628546UL;9851744448282626UL;9851748743249922UL;9851710088544258UL;9851804577824770UL;9851787397955586UL;9851740153315330UL;9851722973446146UL;9851718678478850UL;9851834642595842UL;9851817462726658UL;9851731563380738UL;9851791692922882UL;9851795987890178UL;9851765923119106UL;9851778808020994UL;9851838937563138UL;9851847527497730UL;9851727268413442UL;9851783102988290UL;9851989261418498UL;10133309619175424UL;10133451353161729UL;10133455648653313UL;10414939210514435UL;10696156494036992UL;10977536977469442UL;10977588517076994UL;10977575632175106UL;10977605696946178UL;10977558452305922UL;10977614286880770UL;10977541272436738UL;10977592812044290UL;10977584222109698UL;10977528387534850UL;10977545567404034UL;10977601401978882UL;10977549862371330UL;10977657236553730UL;10977562747273218UL;10977597107011586UL;10977670121455618UL;10977700186226690UL;10977687301324802UL;10977554157338626UL;10977579927142402UL;11259248176726017UL;11259243882676225UL;11259226704248833UL;11259084969934848UL;11259235292086273UL;11259213818560512UL;11259209522806784UL;11259102149279744UL;11259218113069056UL;11259239587643393UL;11259093558034432UL;11259205228953600UL;11259308307578881UL;11259261066346497UL;11259222407118848UL;11259157983395840UL;11259097853394944UL;11540577126776834UL;11540572831809538UL;11540680205991938UL;11540568536842242UL;11540559946907650UL;11540684500959234UL;11540693090893826UL;11540688795926530UL;11540632961351682UL;11540697385861122UL;11822034923028482UL;11822155182112770UL;11822172361981954UL;11822163772047362UL;11822168067014658UL;11822159477080066UL;11822043512963074UL;11822107937472514UL;11822052102897666UL;11822047807930370UL;12103638749216770UL;12103634454249474UL;12103582914641922UL;12103518490132482UL;12103522785099778UL;12103527080067074UL;12103509900197890UL;12103647339151362UL;12103630159282178UL;12103643044184066UL;12385143789518849UL;12385135198928897UL;12385002056122368UL;12384984876777472UL;12384993464877056UL;12385126611091457UL;12384997760237568UL;12385105135796224UL;12385139494486017UL;12385109429649408UL;12385057890238464UL;12385118019911680UL;12385122313961472UL;12385148083568641UL;12385208214421505UL;12385160973254657UL;12385113725403136UL;12666584407736322UL;12666592997670914UL;12666588702703618UL;12666532868128770UL;12666597292638210UL;12666472738586626UL;12666459853684738UL;12666580112769026UL;12666477033553922UL;12666468443619330UL;12947952010461186UL;12947934830592002UL;12948059384643586UL;12947947715493890UL;12948072269545474UL;12947943420526594UL;12948055089676290UL;12948063679610882UL;12948067974578178UL;12948007845036034UL;13229538655862786UL;13229530065928194UL;13229418396778498UL;13229409806843906UL;13229482821287938UL;13229547245797378UL;13229422691745794UL;13229542950830082UL;13229426986713090UL;13229534360895490UL;13511013632966658UL;13510884783947778UL;13510901963816962UL;13511017927933954UL;13510897668849666UL;13510893373882370UL;13511005043032066UL;13511022222901250UL;13511009337999362UL;13510957798391810UL;13792484314447874UL;13792368350330882UL;13792488609415170UL;13792372645298178UL;13792497199349762UL;13792432774840322UL;13792480019480578UL;13792492904382466UL;13792376940265474UL;13792359760396290UL;14073834737041410UL;14073972175994882UL;14073967881027586UL;14073963586060290UL;14073843326976002UL;14073954996125698UL;14073959291092994UL;14073851916910594UL;14073907751485442UL;14073847621943298UL;14355309713489922UL;14355438562508802UL;14355442857476098UL;14355434267541506UL;14355429972574210UL;14355382727933954UL;14355318303424514UL;14355326893359106UL;14355322598391810UL;14355447152443394UL;14636922127646720UL;14636784690462720UL;14636926424776705UL;14636909243334656UL;14636917833596928UL;14636904949481472UL;14637008028106753UL;14636913539088384UL;14636793278562304UL;14636939308171265UL;14636857703923712UL;14636797573922816UL;14636943607136257UL;14636935012614145UL;14636801869807616UL;14918328388943874UL;14918538842341378UL;15199923625394177UL;15199743231983616UL;15199863492509696UL;15199764708720640UL;15199897850675201UL;15199769001721856UL;15199957981528065UL;15199867787018240UL;15199902145511425UL;15199880671985665UL;15199884966035457UL;15199854902902784UL;15199893556625409UL;15199876378198017UL;15199756118589440UL;15199747527344128UL;15199872081068032UL;15199919326167041UL;15199906441986049UL;15199790478262272UL;15199773296951296UL;15199734643884032UL;15199807657345024UL;15199889261592577UL;15199945096560641UL;15199996637216769UL;15199751823228928UL;15199816247345152UL;15199820543426560UL;15199910737215489UL;15199915032248321UL;15199859196755968UL;15481316996874242UL;15481286932103170UL;15481248277397506UL;15481291227070466UL;15481334176743426UL;15481338471710722UL;15481226802561026UL;15481304111972354UL;15481231097528322UL;15481347061645314UL;15481218212626434UL;15481209622691842UL;15481282637135874UL;15481278342168578UL;15481488795566082UL;15481243982430210UL;15481295522037762UL;15481265457266690UL;15481329881776130UL;15481239687462914UL;15481222507593730UL;15481342766678018UL;15762847804096513UL;15762740431683584UL;15762843510046721UL;15762718955143168UL;15762757610766336UL;15762770496847872UL;15762873578881025UL;15762809150177280UL;15762826331619329UL;15762822034489344UL;15762766200766464UL;15762830625406977UL;15762723250372608UL;15762693185404928UL;15762804856324096UL;15762697480765440UL;15762852098932737UL;15762907934949377UL;15762684597305344UL;15762895049981953UL;15762856395407361UL;15762860690636801UL;15762701776650240UL;15762817740439552UL;15762869279588353UL;15762813445931008UL;15762839215013889UL;15762714662141952UL;15762706072010752UL;15762834919456769UL;15762946590638081UL;15762864985669633UL;16044421567348737UL;16044193931853824UL;16044357145591809UL;16044335667347457UL;16044339962380289UL;16044279833034752UL;16044314191724545UL;16044189638852608UL;16044327075643393UL;16044176753360896UL;16044318486757377UL;16044181048721408UL;16044370026692609UL;16044172457476096UL;16044288422641664UL;16044292717150208UL;16044322780807169UL;16044245473558528UL;16044236885000194UL;16044309896167425UL;16044198227083264UL;16044382911660033UL;16044215408394240UL;16044301308329985UL;16044297011200000UL;16044168162115584UL;16044344256299009UL;16044348555001857UL;16044331372118017UL;16044232587476992UL;16044284126887936UL;16044305602117633UL;16044241177477120UL;16044159574016000UL;16325754809745408UL;16325767693860864UL;16325634550726656UL;16325707564187648UL;16325771987910656UL;16325651730071552UL;16325647434186752UL;16325776285040641UL;16325784877727745UL;16325643138826240UL;16325857888370689UL;16325763399352320UL;16325759103598592UL;16607229785931778UL;16607126706716674UL;16607182541291522UL;16607118116782082UL;16607242670833666UL;16607238375866370UL;16607234080899074UL;16607122411749378UL;16607246965800962UL;16607109526847490UL;16888657517936642UL;16888593093427202UL;16888709057544194UL;16888713352511490UL;16888597388394498UL;16888721942446082UL;16888584503492610UL;16888717647478786UL;16888704762576898UL;16888601683361794UL;17170184034385922UL;17170076660203522UL;17170179739418626UL;17170192624320514UL;17170132494778370UL;17170072365236226UL;17170188329353218UL;17170059480334338UL;17170196919287810UL;17170068070268930UL;17451689079603201UL;17451663306194944UL;17451543045668864UL;17451534457569280UL;17451659010441216UL;17451667600703488UL;17451547341029376UL;17451757795213313UL;17451607471030272UL;17451551636914176UL;17451671894753280UL;17451654716588032UL;17451684779720705UL;17451676191883265UL;17733086746968064UL;18014531653664770UL;18014437164384258UL;18014535953940480UL;18014527358697474UL;18296006630440962UL;18295912141160450UL;18296002335473666UL;18577387123179520UL;18858844915367938UL;18858862095237122UL;18858853505302530UL;18858836325433346UL;18858883570073602UL;18858969469419522UL;18858892160008194UL;18858896454975490UL;18858840620400642UL;18858887865040898UL;18858986649288706UL;18858827735498754UL;18858999534190594UL;18858849210335234UL;18858905044910082UL;18858874980139010UL;18858913634844674UL;18858879275106306UL;18858900749942786UL;18858857800269826UL;18858956584517634UL;19140521755017216UL;19140517460967424UL;19140547524624385UL;19140513166458880UL;19140397201293312UL;19140508870705152UL;19140457331294208UL;19140384317833216UL;19140538935541761UL;19140534639984641UL;19140392905932800UL;19140607655477249UL;19140401497178112UL;19140551825031169UL;19140526052147201UL;19140504576851968UL;19140543230574593UL;19140560411164673UL;19421919427624960UL;19703394402304002UL;19703381519499264UL;19703411582173186UL;19984852201308160UL;20266327175725058UL;20266331473051648UL;20547711960547328UL;20829504763592705UL;20829436045426689UL;20829500468166657UL;20829358734180352UL;21110636140888066UL;21110661910691842UL;21110713450299394UL;21110756399972354UL;21110691975462914UL;21110679090561026UL;21110700565397506UL;21110649025789954UL;21110640435855362UL;21110653320757250UL;21110644730822658UL;21110627550953474UL;21110683385528322UL;21110687680495618UL;21110657615724546UL;21110674795593730UL;21110799349645314UL;21110696270430210UL;21110786464743426UL;21110769284874242UL;21110704860364802UL;21392179836420098UL;21392124001845250UL;21392149771649026UL;21392119706877954UL;21392128296812546UL;21392188426354690UL;21392132591779842UL;21392175541452802UL;21392231376027650UL;21392154066616322UL;21392244260929538UL;21392162656550914UL;21392158361583618UL;21392111116943362UL;21392115411910658UL;21392274325700610UL;21392261440798722UL;21392136886747138UL;21392166951518210UL;21392102527008770UL;21392171246485506UL;21673706352476162UL;21673633338032130UL;21673577503457282UL;21673719237378050UL;21673886743396353UL;21673637632999426UL;21673650517901314UL;21673611863195650UL;21673654812868610UL;21673594685489152UL;21673603275489280UL;21673607568228354UL;21673624748097538UL;21673663402803202UL;21673641927966722UL;21673590388359170UL;21673629043064834UL;21673646222934018UL;21673749302149122UL;21673736417247234UL;21673598980390912UL;21673586093391874UL;21955211398283264UL;22236686375059456UL;22518161351835648UL;22799649208532994UL;22799498884677634UL;22799477409841154UL;22799533244416002UL;22799619143761922UL;22799528949448706UL;22799546129317890UL;22799541834350594UL;22799636323631106UL;22799537539383298UL;22799507474612226UL;22799511769579522UL;22799550424285186UL;22799524654481410UL;22799554719252482UL;22799563309187074UL;22799606258860034UL;22799494589710338UL;22799503179644930UL;22799485999775746UL;22799490294743042UL;23081111300472834UL;23081025401126914UL;23081029696094210UL;23080952386682882UL;23081016811192322UL;23081094120603650UL;23080986746421250UL;23080999631323138UL;23081012516225026UL;23081003926290434UL;23081081235701762UL;23081008221257730UL;23080960976617474UL;23081021106159618UL;23080973861519362UL;23081124185374722UL;23080982453813248UL;23080978156486658UL;23081038286028802UL;23080969566552066UL;23080965271584770UL;23362556211363842UL;23362440247246850UL;23362513261690882UL;23362461722083330UL;23362569096265730UL;23362496081821698UL;23362457427116034UL;23362474606985218UL;23362448837181442UL;23362478901952514UL;23362453132148738UL;23362599161036802UL;23362504671756290UL;23362487491887106UL;23362586276134914UL;23362483196919810UL;23362427362344962UL;23362444542214146UL;23362435952279554UL;23362500376788994UL;23362491786854402UL;23644245942337537UL;23644018303041536UL;23644014010040320UL;23644022598270976UL;23925617834655745UL;23925596359098368UL;23925592065048576UL;23925471805374464UL;23925587770540032UL;23925626423541761UL;23925720915247105UL;23925467510013952UL;23925480396619776UL;23925682259558401UL;23925622128705537UL;23925488986750976UL;23925635015245825UL;23925493279752192UL;23925579180933120UL;23925609244065793UL;23925476101259264UL;23925630720016385UL;23925613539622913UL;23925583474786304UL;23925600656228353UL;23925458921914368UL;23925497574981632UL;23925531935375360UL;23925604954996737UL;24206899539542018UL;24206938194247682UL;24206882359672834UL;24206921014378498UL;24206852294901762UL;24206860884836354UL;24207024093593602UL;24207011208691714UL;24206994028822530UL;24206873769738242UL;24206981143920642UL;24206908129476610UL;24206929604116480UL;24206878064705538UL;24206925309345794UL;24206886654640130UL;24206912424443906UL;24206903834509314UL;24206865179803650UL;24206916719411202UL;24206869474770946UL;24488400287039490UL;24488335862530050UL;24488387402137602UL;24488374517235714UL;24488404582006786UL;24488353042399234UL;24488391697104898UL;24488413171941378UL;24488340157497346UL;24488469006516226UL;24488395992072194UL;24488361632333826UL;24488348747431938UL;24488357337366530UL;24488378812203010UL;24488499071287298UL;24488327272595458UL;24488344452464642UL;24488383107170306UL;24488486186385410UL;24488456121614338UL;24769943983161346UL;24770034174197761UL;24769883852046336UL;24769918209884160UL;24769901031391232UL;24770055650148353UL;24769913916882944UL;24770068534329345UL;24770064240410625UL;24770042764787713UL;24770021289230336UL;24770094304722945UL;24770051353673729UL;24769892440145920UL;24770107189690369UL;24770059945377793UL;24770025586360321UL;24769956865507328UL;24770047058837505UL;24769939686424576UL;24770004111065088UL;24770016995180544UL;24770029880147969UL;24770008404918272UL;24770012700672000UL;24770038469754881UL;24769969751588864UL;24769896735506432UL;24770145845379073UL;24770072833032193UL;24770081424801793UL;24769961163030530UL;24769905326751744UL;24769922505113600UL;24769965455507456UL;25051620822089729UL;25051543511040001UL;25051483381628928UL;25051582166401025UL;25051440432218112UL;25051388893593600UL;25051376008101888UL;25051380303462400UL;25051539217121281UL;25051371712217088UL;25051500563070977UL;25051522035548161UL;25051397481824256UL;25051431842217984UL;25051504856858625UL;25051513446465537UL;25051569281433601UL;25051393186594816UL;25051423257722880UL;25051530626859009UL;25051358828756992UL;25051534922088449UL;25051487677382656UL;25051444728299520UL;25051496265940992UL;25051517741498369UL;25051526330384385UL;25051367416856576UL;25051547811708929UL;25051577876414465UL;25051509150908417UL;25051491971891200UL;25051479087775744UL;25051414663135232UL;25332958361550848UL;25333100095537153UL;25333035673452545UL;25333104390963201UL;25614321665638400UL;25614454815653889UL;25614467694919681UL;25614437630803968UL;25614476283805697UL;25614463399886849UL;25614441925312512UL;25614450516492289UL;25614532119822337UL;25614429041197056UL;25614381795639296UL;25614347435245568UL;25614570775511041UL;25614308782178304UL;25614330256883712UL;25614433335050240UL;25614343140016128UL;25614459104329729UL;25614484875509761UL;25614325961523200UL;25614317370277888UL;25614338847014912UL;25614446219362304UL;25614471988969473UL;25614480580280321UL;25895826713214976UL;26177434828931073UL;26177520728932353UL;26177473488748545UL;26177344635142144UL;26177443417882625UL;26177258735599616UL;26177314569977856UL;26177426237227009UL;26177413353308161UL;26177469188276225UL;26177417648340993UL;26177447719010305UL;26177482073243649UL;26177391878733824UL;26177323164827648UL;26177267323699200UL;26177297388666880UL;26177331749060608UL;26177275914944512UL;26177340339060736UL;26177293093437440UL;26177409057751041UL;26177430533701633UL;26177439123963905UL;26177387584225280UL;26177271619059712UL;26177404763701249UL;26177378994618368UL;26177280210305024UL;26177421942390785UL;26177396172783616UL;26177288800436224UL;26177400469913601UL;26177383288471552UL;26458922695720961UL;26458742300409856UL;26458892625051649UL;26458853971329024UL;26458815315771392UL;26458806725771264UL;26458944164986881UL;26458789546688512UL;26458819611852800UL;26458884034461697UL;26458746595770368UL;26458995705643009UL;26458755187015680UL;26458879740411905UL;26458798141538304UL;26458901213937665UL;26458909805641729UL;26458858265182208UL;26458896919101441UL;26458871149494272UL;26458772365377536UL;26458914100674561UL;26458750891655168UL;26458862560935936UL;26458905510412289UL;26458763777146880UL;26458957049954305UL;26458888330018817UL;26458875446624257UL;26458948465590273UL;26458733712310272UL;26458918394593281UL;26458768070148096UL;26458866855444480UL;26740182917578754UL;26740135672938498UL;26740212982349826UL;26740174327644162UL;26740204392415234UL;26740178622611458UL;26740187212546050UL;26740157147774978UL;26740152852807682UL;26740298881695746UL;26740191507513346UL;26740161442742274UL;26740144262873090UL;26740285996793858UL;26740148557840386UL;26740127083003906UL;26740200097447938UL;26740268816924674UL;26740139967905794UL;26740255932022786UL;26740195802480642UL;27021730908536834UL;27021636419256322UL;27021726613569538UL;27303248841736192UL;27584710930006018UL;27584693750136834UL;27866100006715394UL;27866112891617282UL;27866087121813506UL;27866048467107842UL;27866044172140546UL;27866074236911618UL;27866198790963202UL;27866185906061314UL;27866104301682690UL;27866091416780802UL;27866035582205954UL;27866026992271362UL;27866082826846210UL;27866052762075138UL;27866155841290242UL;27866061352009730UL;27866039877173250UL;27866078531878914UL;27866168726192130UL;27866095711748098UL;27866057057042434UL;28147570689441794UL;28147566394474498UL;28147562099507202UL;28147523444801538UL;28147553509572610UL;28147587869310978UL;28147643703885826UL;28147510559899650UL;28147660883755010UL;28147532034736130UL;28147536329703426UL;28147557804539906UL;28147501969965058UL;28147574984409090UL;28147673768656898UL;28147519149834242UL;28147549214605314UL;28147579279376386UL;28147514854866946UL;28147630818983938UL;28147527739768834UL;28429187397910528UL;28429195986468864UL;28429269001961473UL;28429114383663104UL;28429226050912257UL;28429281886928897UL;28429316245291009UL;28429058549284864UL;28429208871436289UL;28429213166993409UL;28429191692419072UL;28429153037058048UL;28429088614121472UL;28429071432744960UL;28429264707256321UL;28429303360847873UL;28429311952486401UL;28429092907122688UL;28429299072499713UL;28429183102156800UL;28429067137384448UL;28429247526469633UL;28429204577386497UL;28429144448827392UL;28429200283598849UL;28429178808303616UL;28429221756076033UL;28429230347386881UL;28429080023990272UL;28429075728629760UL;28429097202352128UL;28429217462026241UL;28429238937649153UL;28429131562745856UL;28429140152745984UL;28429234642616321UL;28429243231567873UL;28429320542617601UL;28429165922222080UL;28710576476979202UL;28991939784343554UL;28992068633362434UL;28991956964212738UL;28992098698133506UL;28991935489376258UL;28992055748460546UL;28991974144081922UL;28991961259180034UL;28991978439049218UL;28992004208852994UL;28991944079310850UL;28991952669245442UL;28991991323951106UL;28992085813231618UL;28991987028983810UL;28991999913885698UL;28991995618918402UL;28991982734016514UL;28991926899441666UL;28992012798787586UL;28991948374278146UL;29273517837254656UL;29273693932093441UL;29273655277518849UL;29273706817060865UL;29273513544253440UL;29273702527860737UL;29273638097125377UL;29273547908382720UL;29273659572748289UL;29273663867781121UL;29273629507518465UL;29273504954122240UL;29273668161699841UL;29273616622551040UL;29273496362876928UL;29273603738435584UL;29273745472749569UL;29273522132484096UL;29273672462368769UL;29273633801568257UL;29273625213730817UL;29273492067516416UL;29273650981044225UL;29273483479416832UL;29273565082877952UL;29273539313795072UL;29273620916600832UL;29273608032288768UL;29273646686208001UL;29273556492877824UL;29273500658761728UL;29273642392158209UL;29273569378959360UL;29273612328042496UL;29555211859329025UL;29554958456127488UL;29555168908804097UL;29555147433312257UL;29555216152133633UL;29555031469588480UL;29555220449460225UL;29555040059588608UL;29555065829064704UL;29554988520964096UL;29555083008999424UL;29555181793771521UL;29555104484229121UL;29555164614098945UL;29555108778278913UL;29555044355670016UL;29555052943900672UL;29554967044227072UL;29555203267690497UL;29555134549458945UL;29555014290505728UL;29555078715146240UL;29555113073836033UL;29555121662918657UL;29555130254229505UL;29554997109194752UL;29554979930832896UL;29555198979473409UL;29554975635472384UL;29555087304753152UL;29555143138410497UL;29554971339587584UL;29555100190441473UL;29555091599261696UL;29555138844491777UL;29554992813965312UL;29555117368868865UL;29555125957754881UL;29555095893311488UL;29836532222328832UL;30117826810478592UL;30399413452996610UL;30399396273127426UL;30399400568094722UL;30399490762407938UL;30399512237244418UL;30399383388225538UL;30399422042931202UL;30399477877506050UL;30399662561099778UL;30399417747963906UL;30399503647309826UL;30399520827179010UL;30399391978160130UL;30399507942277122UL;30399404863062018UL;30399439222800386UL;30399452107702274UL;30399469287571458UL;30399460697636866UL;30399464992604162UL;30399456402669570UL;30399516532211714UL;30681000097284097UL;30680858362970112UL;30681081700614145UL;30681025864597505UL;30681034456301569UL;30680897016037376UL;30680871246430208UL;30681021569761281UL;30681008685121537UL;30680875542315008UL;30680995800154112UL;30680931376431104UL;30681017275711489UL;30681030161072129UL;30681004397232129UL;30680978621988864UL;30680987211595776UL;30680991506104320UL;30680888427806720UL;30680866951069696UL;30681120356302849UL;30680892720807936UL;30681012980678657UL;30680982915842048UL;30680879837675520UL;30962402064596992UL;31243855561883650UL;31243812612210690UL;31243735302799362UL;31243799727308802UL;31243761072603138UL;31243885626654722UL;31243795432341506UL;31243791137374210UL;31243773957505026UL;31243739597766658UL;31243756777635842UL;31243752482668546UL;31243868446785538UL;31243748187701250UL;31243726712864770UL;31243898511556610UL;31243786842406914UL;31243743892733954UL;31243778252472322UL;31243782547439618UL;31243804022276098UL;31525352018083840UL;31806758269812736UL;31806882822684672UL;31806822699040768UL;31806921476603905UL;31806904297914369UL;31806796922880000UL;31806981607456769UL;31806912887521281UL;31806839873273856UL;31806938658177025UL;31806775449157632UL;31806934363144193UL;31807020263145473UL;31806831283273728UL;31806900004126721UL;31806895706996736UL;31806942952095745UL;31806973023748097UL;31806771153272832UL;31806908591964161UL;31806947253223425UL;31806779744518144UL;31806891412946944UL;31806925771440129UL;31806814104190976UL;31806844169355264UL;31806788334649344UL;31806887118438400UL;31806792627650560UL;31806766857912320UL;31806917182554113UL;31806968722489345UL;31806878528831488UL;31806930067914753UL;32088233248358402UL;32088241838292994UL;32088271903064066UL;32088370687311874UL;32088353507442690UL;32088267608096770UL;32088332032606210UL;32088512421232642UL;32088263313129474UL;32088306262802434UL;32088357802409986UL;32088366392344578UL;32088310557769730UL;32088362097377282UL;32088327737638914UL;32088254723194882UL;32088340622540802UL;32088314852737026UL;32088250428227586UL;32088246133260290UL;32088289082933250UL;32088301967835138UL;32088319147704322UL;32369678159446018UL;32369639504740354UL;32369626619838466UL;32369660979576834UL;32369652389642242UL;32369703929249794UL;32369785533628418UL;32369673864478722UL;32369656684609538UL;32369686749380610UL;32369691044347906UL;32369648094674946UL;32369695339315202UL;32369755468857346UL;32369643799707650UL;32369699634282498UL;32369682454413314UL;32369768353759234UL;32369798418530306UL;32369635209773058UL;32369712519184386UL;32651131662041090UL;32651114482171906UL;32651230446288898UL;32651170316746754UL;32651161726812162UL;32651260511059970UL;32651166021779458UL;32651157431844866UL;32651174611714050UL;32651153136877570UL;32651273395961858UL;32651123072106498UL;32651178906681346UL;32651127367073794UL;32651101597270018UL;32651187496615938UL;32651135957008386UL;32651110187204610UL;32651148841910274UL;32651118777139202UL;32651243331190786UL;32932765552738306UL;32932756962803714UL;32932658178555906UL;32932726898032642UL;32932671063457794UL;32932744077901826UL;32932735487967234UL;32932714013130754UL;32932782732607490UL;32932731192999938UL;32932666768490498UL;32932675358425090UL;32932679653392386UL;32932692538294274UL;32932791322542082UL;32932688243326978UL;32932696833261570UL;32932795617509378UL;32932739782934530UL;32932787027574786UL;32932752667836418UL;32932778437640194UL;32932937351430146UL;33214141745332226UL;33214154630234114UL;33214412328271874UL;33214150335266818UL;33214240529580034UL;33214133155397634UL;33214270594351106UL;33214188989972482UL;33214163220168706UL;33214219054743554UL;33214201874874370UL;33214146040299522UL;33214206169841666UL;33214227644678146UL;33214266299383810UL;33214253414481922UL;33214210464808962UL;33214171810103298UL;33214167515136002UL;33214214759776258UL;33214257709449218UL;33214262004416514UL; |];


//Enum for return values 
type FLTypeDUnion = | Enumvariant_6 of string | Enumvariant_2 of int*int | Enumvariant_0 of expr | Enumvariant_21 of (lltype*string) list | Enumvariant_29 of String | Enumvariant_1 of unit | Enumvariant_37 of (lltype*string) | Enumvariant_4 of int | Enumvariant_35 of lltype | Enumvariant_5 of float | Enumvariant_22 of LBox<expr> list ;;

let _rrsemaction_0_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLint 

let _rrsemaction_1_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLstring 

let _rrsemaction_2_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  LLfloat 

let _rrsemaction_3_(parser:RTParser<FLTypeDUnion,unit>, v:string) =  (LLunknown, v) 

let _rrsemaction_4_(parser:RTParser<FLTypeDUnion,unit>, x:(lltype*string)) =  x 

let _rrsemaction_5_(parser:RTParser<FLTypeDUnion,unit>, v:string, _item1_:expr, t:lltype) =  (t,v) 

let _rrsemaction_6_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_7_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<string>) =  Var(x) 

let _rrsemaction_8_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<string>, _item1_:expr, l:LBox<expr> list, _item3_:expr) = Apply(x, l)

let _rrsemaction_9_(parser:RTParser<FLTypeDUnion,unit>, x:string) =  Strlit(x) 

let _rrsemaction_10_(parser:RTParser<FLTypeDUnion,unit>, x:int) =  Integer(x) 

let _rrsemaction_11_(parser:RTParser<FLTypeDUnion,unit>, x:float) =  Floatpt(x) 

let _rrsemaction_12_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  Nil 

let _rrsemaction_13_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_14_(parser:RTParser<FLTypeDUnion,unit>, e:String, x:expr) =  Uniop(e,x) 

let _rrsemaction_15_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "not" 

let _rrsemaction_16_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "~" 

let _rrsemaction_17_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "car" 

let _rrsemaction_18_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cdr" 

let _rrsemaction_19_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_20_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("^",x,y) 

let _rrsemaction_21_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_22_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_23_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "*" 

let _rrsemaction_24_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "/" 

let _rrsemaction_25_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "%" 

let _rrsemaction_26_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_27_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_28_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "+" 

let _rrsemaction_29_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "-" 

let _rrsemaction_30_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_31_(parser:RTParser<FLTypeDUnion,unit>, x:expr, e:String, y:expr) =  Binop(e,x,y) 

let _rrsemaction_32_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "=" 

let _rrsemaction_33_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "!=" 

let _rrsemaction_34_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "eq" 

let _rrsemaction_35_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<=" 

let _rrsemaction_36_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">=" 

let _rrsemaction_37_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "<" 

let _rrsemaction_38_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  ">" 

let _rrsemaction_39_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =  "cons" 

let _rrsemaction_40_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_41_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("and" ,x,y) 

let _rrsemaction_42_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_43_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr, y:expr) =  Binop("or",x,y) 

let _rrsemaction_44_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_45_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, v:(lltype*string) list, _item2_:expr, x:LBox<expr>) =  TypedLambda(v,LLunknown,x) 

let _rrsemaction_46_(parser:RTParser<FLTypeDUnion,unit>, t:lltype, _item1_:expr, v:(lltype*string) list, _item3_:expr, x:LBox<expr>) =  TypedLambda(v,t,x) 

let _rrsemaction_47_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_48_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr, _item4_:expr, y:LBox<expr>) = TypedLet(d,x,y)

let _rrsemaction_49_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_50_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, d:LBox<(lltype*string)>, _item2_:expr, x:expr) = TypedDefine(d,x)

let _rrsemaction_51_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_52_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_53_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string), _item1_:expr, seq:(lltype*string) list) =  e::seq 

let _rrsemaction_54_(parser:RTParser<FLTypeDUnion,unit>, e:(lltype*string)) =  [e] 

let _rrsemaction_55_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, _item1_:expr, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_56_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_57_(parser:RTParser<FLTypeDUnion,unit>) =  [] 

let _rrsemaction_58_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:LBox<expr> list, _item2_:expr) =  ListLiteral(x) 

let _rrsemaction_59_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_60_(parser:RTParser<FLTypeDUnion,unit>, x:expr) = x

let _rrsemaction_61_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) = x

let _rrsemaction_62_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, x:expr, _item2_:expr) =  x 

let _rrsemaction_63_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:LBox<expr>, _item3_:expr, x:expr) =  Whileloop(p,x) 

let _rrsemaction_64_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr, _item1_:expr, p:LBox<expr>, _item3_:expr, x:expr, _item5_:expr, y:expr) =  Ifelse(p,x,y)

let _rrsemaction_65_(parser:RTParser<FLTypeDUnion,unit>, x:expr, _item1_:expr) =  x 

let _rrsemaction_66_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_67_(parser:RTParser<FLTypeDUnion,unit>, x:expr) =  x 

let _rrsemaction_68_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>, seq:LBox<expr> list) =  e::seq 

let _rrsemaction_69_(parser:RTParser<FLTypeDUnion,unit>, e:LBox<expr>) =  [e] 

let _rrsemaction_70_(parser:RTParser<FLTypeDUnion,unit>, x:LBox<expr> list) =  CodeBlock(x) 

let _rrsemaction_71_(parser:RTParser<FLTypeDUnion,unit>, _item0_:expr) =   Unchecked.defaultof<unit>

let make_parser() : RTParser<FLTypeDUnion,unit> =
  let parser1 = skeleton_parser(Unchecked.defaultof<unit>,72,119)
  let mutable rule = skeleton_production("")
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_35(_rrsemaction_0_(parser,_item0_)));
  parser1.Rules.[0] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_35(_rrsemaction_1_(parser,_item0_)));
  parser1.Rules.[1] <- rule;
  rule <- skeleton_production("UNIT_TYPE")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_35(_rrsemaction_2_(parser,_item0_)));
  parser1.Rules.[2] <- rule;
  rule <- skeleton_production("UNTYPED_PREFIX")
  rule.action <- fun parser ->
    (let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_37(_rrsemaction_3_(parser,v)));
  parser1.Rules.[3] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_37(_rrsemaction_4_(parser,x)));
  parser1.Rules.[4] <- rule;
  rule <- skeleton_production("TYPE_PREFIX")
  rule.action <- fun parser ->
    (let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_35(_rr_35) ->  _rr_35 | _ -> Unchecked.defaultof<lltype>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_37(_rrsemaction_5_(parser,v,_item1_,t)));
  parser1.Rules.[5] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_6_(parser,_item0_,x,_item2_)));
  parser1.Rules.[6] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_7_(parser,x)));
  parser1.Rules.[7] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let l = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_8_(parser,x,_item1_,l,_item3_)));
  parser1.Rules.[8] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_6(_rr_6) ->  _rr_6 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_9_(parser,x)));
  parser1.Rules.[9] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_4(_rr_4) ->  _rr_4 | _ -> Unchecked.defaultof<int>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_10_(parser,x)));
  parser1.Rules.[10] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_5(_rr_5) ->  _rr_5 | _ -> Unchecked.defaultof<float>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_11_(parser,x)));
  parser1.Rules.[11] <- rule;
  rule <- skeleton_production("UNIT_EXPR")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_12_(parser,_item0_)));
  parser1.Rules.[12] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_13_(parser,x)));
  parser1.Rules.[13] <- rule;
  rule <- skeleton_production("UNARY_OPERATOR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_14_(parser,e,x)));
  parser1.Rules.[14] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_15_(parser,_item0_)));
  parser1.Rules.[15] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_16_(parser,_item0_)));
  parser1.Rules.[16] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_17_(parser,_item0_)));
  parser1.Rules.[17] <- rule;
  rule <- skeleton_production("UNIOP")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_18_(parser,_item0_)));
  parser1.Rules.[18] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_19_(parser,x)));
  parser1.Rules.[19] <- rule;
  rule <- skeleton_production("EXPONENT_OPER")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_20_(parser,x,_item1_,y)));
  parser1.Rules.[20] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_21_(parser,x)));
  parser1.Rules.[21] <- rule;
  rule <- skeleton_production("BINOP_MULTIPLICATION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_22_(parser,x,e,y)));
  parser1.Rules.[22] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_23_(parser,_item0_)));
  parser1.Rules.[23] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_24_(parser,_item0_)));
  parser1.Rules.[24] <- rule;
  rule <- skeleton_production("BINOP_MULT_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_25_(parser,_item0_)));
  parser1.Rules.[25] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_26_(parser,x)));
  parser1.Rules.[26] <- rule;
  rule <- skeleton_production("BINOP_ADDITION_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_27_(parser,x,e,y)));
  parser1.Rules.[27] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_28_(parser,_item0_)));
  parser1.Rules.[28] <- rule;
  rule <- skeleton_production("BINOP_PLUS_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_29_(parser,_item0_)));
  parser1.Rules.[29] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_30_(parser,x)));
  parser1.Rules.[30] <- rule;
  rule <- skeleton_production("BINOP_EQUALITY_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_29(_rr_29) ->  _rr_29 | _ -> Unchecked.defaultof<String>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_31_(parser,x,e,y)));
  parser1.Rules.[31] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_32_(parser,_item0_)));
  parser1.Rules.[32] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_33_(parser,_item0_)));
  parser1.Rules.[33] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_34_(parser,_item0_)));
  parser1.Rules.[34] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_35_(parser,_item0_)));
  parser1.Rules.[35] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_36_(parser,_item0_)));
  parser1.Rules.[36] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_37_(parser,_item0_)));
  parser1.Rules.[37] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_38_(parser,_item0_)));
  parser1.Rules.[38] <- rule;
  rule <- skeleton_production("BINOP_EQUAL_OPER")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_29(_rrsemaction_39_(parser,_item0_)));
  parser1.Rules.[39] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_40_(parser,x)));
  parser1.Rules.[40] <- rule;
  rule <- skeleton_production("AND_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_41_(parser,x,_item1_,y)));
  parser1.Rules.[41] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_42_(parser,x)));
  parser1.Rules.[42] <- rule;
  rule <- skeleton_production("OR_EXPR")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_43_(parser,x,_item1_,y)));
  parser1.Rules.[43] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_44_(parser,x)));
  parser1.Rules.[44] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_45_(parser,_item0_,v,_item2_,x)));
  parser1.Rules.[45] <- rule;
  rule <- skeleton_production("LAMBDA_EXPR")
  rule.action <- fun parser ->
    (let x_sitem = parser.Pop() in let x_val = (match x_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = lbox(x_val,x_sitem.line,x_sitem.column) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let t = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_35(_rr_35) ->  _rr_35 | _ -> Unchecked.defaultof<lltype>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_46_(parser,t,_item1_,v,_item3_,x)));
  parser1.Rules.[46] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_47_(parser,x)));
  parser1.Rules.[47] <- rule;
  rule <- skeleton_production("LET_EXPR")
  rule.action <- fun parser ->
    (let y_sitem = parser.Pop() in let y_val = (match y_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let y = lbox(y_val,y_sitem.line,y_sitem.column) in let _item4_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_48_(parser,_item0_,d,_item2_,x,_item4_,y)));
  parser1.Rules.[48] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_49_(parser,x)));
  parser1.Rules.[49] <- rule;
  rule <- skeleton_production("DEFINE_EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let d_sitem = parser.Pop() in let d_val = (match d_sitem.svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in let d = lbox(d_val,d_sitem.line,d_sitem.column) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_50_(parser,_item0_,d,_item2_,x)));
  parser1.Rules.[50] <- rule;
  rule <- skeleton_production("EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_51_(parser,x)));
  parser1.Rules.[51] <- rule;
  rule <- skeleton_production("EXPR")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_52_(parser,x)));
  parser1.Rules.[52] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_21(_rr_21) ->  _rr_21 | _ -> Unchecked.defaultof<(lltype*string) list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_53_(parser,e,_item1_,seq)));
  parser1.Rules.[53] <- rule;
  rule <- skeleton_production("VAR_SEQ")
  rule.action <- fun parser ->
    (let e = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_37(_rr_37) ->  _rr_37 | _ -> Unchecked.defaultof<(lltype*string)>) in  FLTypeDUnion.Enumvariant_21(_rrsemaction_54_(parser,e)));
  parser1.Rules.[54] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_55_(parser,e,_item1_,seq)));
  parser1.Rules.[55] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_56_(parser,e)));
  parser1.Rules.[56] <- rule;
  rule <- skeleton_production("LIST_SEQ")
  rule.action <- fun parser ->
    ( FLTypeDUnion.Enumvariant_22(_rrsemaction_57_(parser)));
  parser1.Rules.[57] <- rule;
  rule <- skeleton_production("LIST_LITERAL")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_58_(parser,_item0_,x,_item2_)));
  parser1.Rules.[58] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_59_(parser,_item0_,x,_item2_)));
  parser1.Rules.[59] <- rule;
  rule <- skeleton_production("LAMBDA_BLOCK")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_60_(parser,x)));
  parser1.Rules.[60] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_61_(parser,x,_item1_)));
  parser1.Rules.[61] <- rule;
  rule <- skeleton_production("CODE_BLOCK")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_62_(parser,_item0_,x,_item2_)));
  parser1.Rules.[62] <- rule;
  rule <- skeleton_production("LOOP_STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p_sitem = parser.Pop() in let p_val = (match p_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = lbox(p_val,p_sitem.line,p_sitem.column) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_63_(parser,_item0_,_item1_,p,_item3_,x)));
  parser1.Rules.[63] <- rule;
  rule <- skeleton_production("SELECT_STATEMENT")
  rule.action <- fun parser ->
    (let y = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item5_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item3_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p_sitem = parser.Pop() in let p_val = (match p_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let p = lbox(p_val,p_sitem.line,p_sitem.column) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_64_(parser,_item0_,_item1_,p,_item3_,x,_item5_,y)));
  parser1.Rules.[64] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_65_(parser,x,_item1_)));
  parser1.Rules.[65] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_66_(parser,x)));
  parser1.Rules.[66] <- rule;
  rule <- skeleton_production("STATEMENT")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_67_(parser,x)));
  parser1.Rules.[67] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let seq = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_68_(parser,e,seq)));
  parser1.Rules.[68] <- rule;
  rule <- skeleton_production("STATEMENT_SEQ")
  rule.action <- fun parser ->
    (let e_sitem = parser.Pop() in let e_val = (match e_sitem.svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in let e = lbox(e_val,e_sitem.line,e_sitem.column) in  FLTypeDUnion.Enumvariant_22(_rrsemaction_69_(parser,e)));
  parser1.Rules.[69] <- rule;
  rule <- skeleton_production("PROGRAM")
  rule.action <- fun parser ->
    (let x = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_22(_rr_22) ->  _rr_22 | _ -> Unchecked.defaultof<LBox<expr> list>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_70_(parser,x)));
  parser1.Rules.[70] <- rule;
  rule <- skeleton_production("START")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<expr>) in  FLTypeDUnion.Enumvariant_1(_rrsemaction_71_(parser,_item0_)));
  parser1.Rules.[71] <- rule;

  for i in 0..1839 do
    let (sti,symi,action) = decode_action(TABLE.[i])
    parser1.RSM.[sti].Add(SYMBOLS.[symi],action)
  for s in SYMBOLS do ignore (parser1.Symset.Add(s));
  parser1;;

let convert_token (lt:RawToken) =
  if lt=null then None
  else
    let (uval,utype) = 
      match lt.token_name with
        | "Alphanum" -> (FLTypeDUnion.Enumvariant_6((fun x-> x)(lt.token_text)),"VAR")
        | "Num" -> (FLTypeDUnion.Enumvariant_4(int(lt.token_text)),"INTEGER_LITERAL")
        | "Float" -> (FLTypeDUnion.Enumvariant_5(float(lt.token_text)),"FLOAT_LITERAL")
        | "StrLit" -> (FLTypeDUnion.Enumvariant_6((fun x -> x)(lt.token_text)),"STRING_LITERAL")
        | "||" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"OR")
        | "not" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOT")
        | "nil" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NIL")
        | "lambda" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LAMBDA")
        | "define" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DEFINE")
        | "boolean" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"BOOLEAN")
        | "++" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUSPLUS")
        | "<=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LTE")
        | "for" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FOR")
        | "+" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"PLUS")
        | "cons" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CONS")
        | "int" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"INT")
        | "String" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"STRING")
        | "," -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COMMA")
        | "car" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CAR")
        | "^" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EXPONENT")
        | ">=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GTE")
        | "(" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LPAREN")
        | "let" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LET")
        | "if" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IF")
        | "eq" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQ")
        | "!=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"NOTEQ")
        | "while" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"WHILE")
        | "/" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DIVIDE")
        | ">" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"GT")
        | "false" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FALSE")
        | "}" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RCURLY")
        | "-" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUS")
        | "cdr" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"CDR")
        | "." -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"DOT")
        | "&&" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"AND")
        | ":" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"COLON")
        | "[" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LBRACKET")
        | "--" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MINUSMINUS")
        | "float" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"FLOAT")
        | ")" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RPAREN")
        | "in" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"IN")
        | "~" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TILDA")
        | "{" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LCURLY")
        | "]" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"RBRACKET")
        | "<" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"LT")
        | "true" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TRUE")
        | "=" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"EQUALS")
        | "*" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"TIMES")
        | "else" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"ELSE")
        | "%" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"MODULO")
        | ";" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),";")
        | "'" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"'")
        | "EOF" -> (FLTypeDUnion.Enumvariant_1(Unchecked.defaultof<unit>),"EOF")
        | x -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<expr>),"Error:"+x)
    Some({TerminalToken.sym=utype; svalue=uval; line=lt.line; column=lt.column;});;

let parse_with(parser:RTParser<FLTypeDUnion,unit>, lexer:AbstractLexer<unit>) : expr option  =
  lexer.set_shared(parser.exstate)
  parser.NextToken <- fun () -> convert_token(lexer.next_lt())
  match parser.parse_core() with
    | Some(FLTypeDUnion.Enumvariant_0(_yyxres_)) -> Some(_yyxres_)
    | _ -> None;;

