!type expr =
!  |Integer of int
!  | Floatpt of float
!  | Strlit of string
!  | Var of string
!  | Nil
!  | Binop of string*expr*expr
!  | Uniop of string*expr
!  | Ifelse of expr*expr*expr
!  | Whileloop of expr*expr
!  | Define of LBox<string>*expr
!  | TypedDefine of LBox<lltype*string>*expr
!  | Lambda of (string list)*expr
!  | TypedLambda of ((lltype*string) list)*lltype*expr
!  | Let of LBox<string>*expr*LBox<expr>
!  | TypedLet of LBox<lltype*string>*expr*LBox<expr>
!  | Quote of expr
!  | Setq of LBox<string>*expr
!  | Sequence of LBox<expr> list
!  | Beginseq of LBox<expr> list
!  // type expressions
!  | TypeExpr of lltype
!  | TypedVal of (lltype*expr) 
!  | Label of string   // not a proper expression - just a temporary
!  | Error
! and lltype =  // abstract syntax for type expressions
!  | LLint | LLfloat | LLstring
!  | LList of lltype | LLtuple of lltype list
!  | LLfun of (lltype list)*lltype
!  | LLunknown | LLuntypable | LLvar of string | LLunit

lexattribute line_comment #

valuetype expr

terminals ;

!//-------------------------------------------------------
!//LEX TERMINALS
!//-------------------------------------------------------

!//Math Operators
lexterminal PLUS +
lexterminal MINUS -
lexterminal TIMES *
lexterminal DIVIDE /
lexterminal MODULO %
lexterminal EXPONENT ^
lexterminal EQUALS =
lexterminal PLUSPLUS ++
lexterminal MINUSMINUS --

!//Comparison Operators
lexterminal LT <
lexterminal GT >
lexterminal LTE <=
lexterminal GTE >=
lexterminal EQ eq
lexterminal NOTEQ neq

!//Logic Operators
lexterminal OR ||
lexterminal AND &&
lexterminal NOT not

!//Misc Operators
lexterminal CONS cons
lexterminal CAR car
lexterminal CDR cdr
lexterminal TILDA ~
lexterminal DISPLAY display
lexterminal LAMBDA lambda

!//Primitive Types
lexterminal BOOLEAN boolean
lexterminal INT int
lexterminal STRING String
lexterminal FLOAT float

!//Syntax Components
lexterminal DOT .
lexterminal COMMA ,
lexterminal COLON :


!//Grouping Symbols
lexterminal LBRACKET [
lexterminal RBRACKET ]
lexterminal LCURLY {
lexterminal RCURLY }
lexterminal LPAREN (
lexterminal RPAREN ) 

!//Declaration Symbols
lexterminal LET let
lexterminal DEFINE define
lexterminal IN in


!//Loops and Decision Statements
lexterminal IF if
lexterminal ELSE else
lexterminal FOR for
lexterminal WHILE while

!//Value Literals
lexterminal TRUE true
lexterminal FALSE false
lexterminal NIL nil

!//Imports
!//lexterminal YOINK yoink

!//-------------------------------------------------------
!//VALUE TERMINALS
!//-------------------------------------------------------

valueterminal VAR ~ string ~ Alphanum ~ (fun x-> x)
valueterminal INTEGER_LITERAL ~ int ~ Num ~ int
valueterminal FLOAT_LITERAL ~ float ~ Float ~ float
valueterminal STRING_LITERAL ~ string ~ Alphanum ~ (fun x -> x)

!//-------------------------------------------------------
!//PRODUCTION DECLARATIONS
!//-------------------------------------------------------

!//Expressions
nonterminal UNIT_EXPR expr
nonterminal LAMBDA_EXPR expr
nonterminal UNARY_OPERATOR_EXPR expr
nonterminal EXPONENT_OPER expr
nonterminal BINOP_MULTIPLICATION_EXPR expr
nonterminal BINOP_ADDITION_EXPR expr
nonterminal AND_EXPR expr
nonterminal OR_EXPR expr
nonterminal BINOP_EQUALITY_EXPR expr
nonterminal DEFINE_EXPR expr
nonterminal LET_EXPR expr
nonterminal EXPR expr

!// Sequences
nonterminal EXPR_SEQ LBox<expr> list
nonterminal LIST_SEQ LBox<expr> list
nonterminal VAR_SEQ (lltype*string) list
nonterminal STATEMENT_SEQ LBox<expr> list
nonterminal LIST_LITERAL expr
nonterminal CODE_BLOCK expr

!//Operators
nonterminal UNIOP String
nonterminal BINOP_MULT_OPER String
nonterminal BINOP_PLUS_OPER String
nonterminal BINOP_EQUAL_OPER String

!//Statement Types
nonterminal PROGRAM expr
nonterminal STATEMENT expr
nonterminal EXPR_STATEMENT expr
nonterminal LOOP_STATEMENT expr
nonterminal SELECT_STATEMENT expr



!//Types
nonterminal UNIT_TYPE lltype
nonterminal UNTYPED_PREFIX (lltype*string)
nonterminal TYPE_PREFIX (lltype*string)


topsym  PROGRAM

!//-------------------------------------------------------
!//GRAMMAR PRODUCTION RULES
!//-------------------------------------------------------

UNIT_TYPE --> INT { LLint }
UNIT_TYPE --> STRING { LLstring }
UNIT_TYPE --> FLOAT { LLfloat }

UNTYPED_PREFIX -->  VAR:v { (LLunknown, v) }
TYPE_PREFIX --> UNTYPED_PREFIX:x { x }
TYPE_PREFIX --> VAR:v COLON UNIT_TYPE:t { (t,v) }

!//UNIT_EXPR --> LBRACKET EXPR_SEQ:x RBRACKET {}
UNIT_EXPR --> LPAREN EXPR:x RPAREN { x }
UNIT_EXPR --> VAR:x { Var(x) }
UNIT_EXPR --> STRING_LITERAL:x { Strlit(x) }
UNIT_EXPR --> INTEGER_LITERAL:x { Integer(x) }
UNIT_EXPR --> FLOAT_LITERAL:x { Floatpt(x) }
UNIT_EXPR --> NIL { Nil }
!//UNIT_EXPR --> TRUE { True }
!//UNIT_EXPR --> FALSE { False }

UNARY_OPERATOR_EXPR --> UNIT_EXPR:x { x }
UNARY_OPERATOR_EXPR --> UNIOP:e LAMBDA_EXPR:x { Uniop(e,x) }
UNIOP --> NOT { "not" }
UNIOP --> TILDA { "~" }
UNIOP --> CAR { "car" }
UNIOP --> CDR { "cdr" }
UNIOP --> DISPLAY { "display" }

EXPONENT_OPER --> UNARY_OPERATOR_EXPR:x { x }
EXPONENT_OPER --> EXPONENT_OPER:x EXPONENT UNARY_OPERATOR_EXPR:y { Binop("^",x,y) }

BINOP_MULTIPLICATION_EXPR --> EXPONENT_OPER:x { x }
BINOP_MULTIPLICATION_EXPR --> BINOP_MULTIPLICATION_EXPR:x BINOP_MULT_OPER:e EXPONENT_OPER:y { Binop(e,x,y) }
BINOP_MULT_OPER --> TIMES { "*" }
BINOP_MULT_OPER --> DIVIDE { "/" }
BINOP_MULT_OPER --> MODULO { "%" }

BINOP_ADDITION_EXPR --> BINOP_MULTIPLICATION_EXPR:x { x }
BINOP_ADDITION_EXPR --> BINOP_ADDITION_EXPR:x BINOP_PLUS_OPER:e BINOP_MULTIPLICATION_EXPR:y { Binop(e,x,y) }
BINOP_PLUS_OPER --> PLUS { "+" }
BINOP_PLUS_OPER --> MINUS { "-" }

AND_EXPR --> BINOP_ADDITION_EXPR:x { x }
AND_EXPR --> AND_EXPR:x AND BINOP_ADDITION_EXPR:y { Binop("and" ,x,y) }

OR_EXPR --> AND_EXPR:x { x }
OR_EXPR --> OR_EXPR:x OR AND_EXPR:y { Binop("or",x,y) } 

BINOP_EQUALITY_EXPR --> OR_EXPR:x { x }
BINOP_EQUALITY_EXPR --> BINOP_EQUALITY_EXPR:x BINOP_EQUAL_OPER:e OR_EXPR:y { Binop(e,x,y) } 
BINOP_EQUAL_OPER --> EQUALS { "=" }
BINOP_EQUAL_OPER --> NOTEQ { "neq" }
BINOP_EQUAL_OPER --> EQ { "eq" }
BINOP_EQUAL_OPER --> LTE { "<=" }
BINOP_EQUAL_OPER --> GTE { ">=" }
BINOP_EQUAL_OPER --> LT { "<" }
BINOP_EQUAL_OPER --> GT { ">" }
BINOP_EQUAL_OPER --> CONS { "cons" }

LAMBDA_EXPR --> BINOP_EQUALITY_EXPR:x { x }
LAMBDA_EXPR --> LAMBDA VAR_SEQ:v DOT BINOP_EQUALITY_EXPR:x { TypedLambda(v,LLunknown,x) } 
LAMBDA_EXPR --> UNIT_TYPE:t LAMBDA VAR_SEQ:v DOT BINOP_EQUALITY_EXPR:x { TypedLambda(v,t,x) } 

LET_EXPR --> LAMBDA_EXPR:x { x }
LET_EXPR --> LET TYPE_PREFIX:[d] EQUALS LAMBDA_EXPR:x IN LAMBDA_EXPR:[y] {TypedLet(d,x,y)}

DEFINE_EXPR --> LET_EXPR:x { x } 
DEFINE_EXPR --> DEFINE TYPE_PREFIX:[d] EQUALS LAMBDA_EXPR:x {TypedDefine(d,x)}

EXPR --> DEFINE_EXPR:x { x }

!//THIS IS A TEMPORARY INJECTION FOR A LIST LITERAL- THIS NEEDS TO CHANGE
EXPR --> LIST_LITERAL:x { x }

EXPR_SEQ --> EXPR:[e] ;  EXPR_SEQ:seq  { e:: seq }
EXPR_SEQ --> EXPR:[e] ;  { [e] } 
VAR_SEQ --> TYPE_PREFIX:e COMMA VAR_SEQ:seq { e::seq }
VAR_SEQ --> TYPE_PREFIX:e { [e] }  
LIST_SEQ --> EXPR:[e] COMMA LIST_SEQ:seq { e::seq }
LIST_SEQ --> EXPR:[e] { [e] }

LIST_LITERAL --> LBRACKET LIST_SEQ:x RBRACKET { Sequence(x) }

CODE_BLOCK --> EXPR:x ; {x}
CODE_BLOCK --> LCURLY STATEMENT:x RCURLY { x }

EXPR_STATEMENT --> EXPR_SEQ:e { Beginseq(e) } 

LOOP_STATEMENT --> WHILE LPAREN EXPR:p RPAREN CODE_BLOCK:x { Whileloop(p,x) }

SELECT_STATEMENT --> IF LPAREN EXPR:p RPAREN CODE_BLOCK:x ELSE CODE_BLOCK:y { Ifelse(p,x,y)}

STATEMENT--> EXPR_STATEMENT:x { x }
STATEMENT --> LOOP_STATEMENT:x { x }
STATEMENT --> SELECT_STATEMENT:x { x }

STATEMENT_SEQ --> STATEMENT:[e] STATEMENT_SEQ:seq  { e::seq }
STATEMENT_SEQ --> STATEMENT:[e]  { [e] } 

PROGRAM --> STATEMENT_SEQ:x { Beginseq(x) }

EOF
